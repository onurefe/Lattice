ARM GAS  /tmp/cc7cRapf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB142:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "lattice.h"
  24:Src/main.c    **** #include "eeprom_emulator.h"
  25:Src/main.c    **** #include "cli.h"
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/cc7cRapf.s 			page 2


  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** #define CONTACTOR_DELAY_IN_MS (1000.0f * (FBR_BULK_CAPACITOR * FBR_CHARGEUP_RESISTOR))
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** ADC_HandleTypeDef hadc1;
  48:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  49:Src/main.c    **** 
  50:Src/main.c    **** HRTIM_HandleTypeDef hhrtim1;
  51:Src/main.c    **** 
  52:Src/main.c    **** UART_HandleTypeDef huart1;
  53:Src/main.c    **** UART_HandleTypeDef huart3;
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE BEGIN PV */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE END PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  60:Src/main.c    **** void SystemClock_Config(void);
  61:Src/main.c    **** static void MX_GPIO_Init(void);
  62:Src/main.c    **** static void MX_DMA_Init(void);
  63:Src/main.c    **** static void MX_HRTIM1_Init(void);
  64:Src/main.c    **** static void MX_ADC1_Init(void);
  65:Src/main.c    **** static void MX_USART1_UART_Init(void);
  66:Src/main.c    **** static void MX_USART3_UART_Init(void);
  67:Src/main.c    **** /* USER CODE BEGIN PFP */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END PFP */
  70:Src/main.c    **** 
  71:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  72:Src/main.c    **** /* USER CODE BEGIN 0 */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* USER CODE END 0 */
  75:Src/main.c    **** 
  76:Src/main.c    **** /**
  77:Src/main.c    ****   * @brief  The application entry point.
  78:Src/main.c    ****   * @retval int
  79:Src/main.c    ****   */
  80:Src/main.c    **** int main(void)
  81:Src/main.c    **** {
  82:Src/main.c    ****     /* USER CODE BEGIN 1 */
  83:Src/main.c    **** 
  84:Src/main.c    ****     /* USER CODE END 1 */
  85:Src/main.c    **** 
  86:Src/main.c    ****     /* MCU Configuration--------------------------------------------------------*/
  87:Src/main.c    **** 
  88:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  /tmp/cc7cRapf.s 			page 3


  89:Src/main.c    ****     HAL_Init();
  90:Src/main.c    **** 
  91:Src/main.c    ****     /* USER CODE BEGIN Init */
  92:Src/main.c    **** 
  93:Src/main.c    ****     /* USER CODE END Init */
  94:Src/main.c    **** 
  95:Src/main.c    ****     /* Configure the system clock */
  96:Src/main.c    ****     SystemClock_Config();
  97:Src/main.c    **** 
  98:Src/main.c    ****     /* USER CODE BEGIN SysInit */
  99:Src/main.c    **** 
 100:Src/main.c    ****     /* USER CODE END SysInit */
 101:Src/main.c    **** 
 102:Src/main.c    ****     /* Initialize all configured peripherals */
 103:Src/main.c    ****     MX_GPIO_Init();
 104:Src/main.c    ****     MX_DMA_Init();
 105:Src/main.c    ****     MX_HRTIM1_Init();
 106:Src/main.c    ****     MX_ADC1_Init();
 107:Src/main.c    ****     MX_USART1_UART_Init();
 108:Src/main.c    ****     MX_USART3_UART_Init();
 109:Src/main.c    **** 
 110:Src/main.c    ****     /* USER CODE BEGIN 2 */
 111:Src/main.c    ****     Cli_Init();             // Initialize command line interface.
 112:Src/main.c    ****     EepromEmulator_Init();  // Initialize eeprom emulator.
 113:Src/main.c    **** 
 114:Src/main.c    ****     // Turn on the contactor.
 115:Src/main.c    ****     HAL_Delay(CONTACTOR_DELAY_IN_MS);
 116:Src/main.c    ****     HAL_GPIO_WritePin(CONTACTOR_CTRL_GPIO_Port, CONTACTOR_CTRL_Pin, GPIO_PIN_RESET);
 117:Src/main.c    **** 
 118:Src/main.c    ****     Lattice_Start();        // Start lattice module.
 119:Src/main.c    ****     Cli_Start();            // Start command line interface.
 120:Src/main.c    ****     /* USER CODE END 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****     /* Infinite loop */
 123:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 124:Src/main.c    ****     while (1)
 125:Src/main.c    ****     {
 126:Src/main.c    ****         Cli_Execute();
 127:Src/main.c    ****         Lattice_Execute();
 128:Src/main.c    ****         /* USER CODE END WHILE */
 129:Src/main.c    **** 
 130:Src/main.c    ****         /* USER CODE BEGIN 3 */
 131:Src/main.c    ****     }
 132:Src/main.c    ****     /* USER CODE END 3 */
 133:Src/main.c    **** }
 134:Src/main.c    **** 
 135:Src/main.c    **** /**
 136:Src/main.c    ****   * @brief System Clock Configuration
 137:Src/main.c    ****   * @retval None
 138:Src/main.c    ****   */
 139:Src/main.c    **** void SystemClock_Config(void)
 140:Src/main.c    **** {
 141:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 142:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 143:Src/main.c    ****     RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 144:Src/main.c    **** 
 145:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks
ARM GAS  /tmp/cc7cRapf.s 			page 4


 146:Src/main.c    ****     */
 147:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 148:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 149:Src/main.c    ****     RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 150:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 151:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 152:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 153:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 154:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 155:Src/main.c    ****     {
 156:Src/main.c    ****         Error_Handler();
 157:Src/main.c    ****     }
 158:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks
 159:Src/main.c    ****     */
 160:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 161:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 162:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 163:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 164:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 165:Src/main.c    **** 
 166:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 167:Src/main.c    ****     {
 168:Src/main.c    ****         Error_Handler();
 169:Src/main.c    ****     }
 170:Src/main.c    ****     PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1 | RCC_PERIPHCLK_USART1;
 171:Src/main.c    ****     PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 172:Src/main.c    ****     PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 173:Src/main.c    ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 174:Src/main.c    ****     {
 175:Src/main.c    ****         Error_Handler();
 176:Src/main.c    ****     }
 177:Src/main.c    **** }
 178:Src/main.c    **** 
 179:Src/main.c    **** /**
 180:Src/main.c    ****   * @brief ADC1 Initialization Function
 181:Src/main.c    ****   * @param None
 182:Src/main.c    ****   * @retval None
 183:Src/main.c    ****   */
 184:Src/main.c    **** static void MX_ADC1_Init(void)
 185:Src/main.c    **** {
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 0 */
 188:Src/main.c    **** 
 189:Src/main.c    ****     /* USER CODE END ADC1_Init 0 */
 190:Src/main.c    **** 
 191:Src/main.c    ****     ADC_MultiModeTypeDef multimode = {0};
 192:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 193:Src/main.c    **** 
 194:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 1 */
 195:Src/main.c    **** 
 196:Src/main.c    ****     /* USER CODE END ADC1_Init 1 */
 197:Src/main.c    ****     /** Common config
 198:Src/main.c    ****     */
 199:Src/main.c    ****     hadc1.Instance = ADC1;
 200:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 201:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 202:Src/main.c    ****     hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
ARM GAS  /tmp/cc7cRapf.s 			page 5


 203:Src/main.c    ****     hadc1.Init.ContinuousConvMode = DISABLE;
 204:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 205:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 206:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 207:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 208:Src/main.c    ****     hadc1.Init.NbrOfConversion = 2;
 209:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 210:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 211:Src/main.c    ****     hadc1.Init.LowPowerAutoWait = DISABLE;
 212:Src/main.c    ****     hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 213:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 214:Src/main.c    ****     {
 215:Src/main.c    ****         Error_Handler();
 216:Src/main.c    ****     }
 217:Src/main.c    ****     /** Configure the ADC multi-mode
 218:Src/main.c    ****     */
 219:Src/main.c    ****     multimode.Mode = ADC_MODE_INDEPENDENT;
 220:Src/main.c    ****     if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 221:Src/main.c    ****     {
 222:Src/main.c    ****         Error_Handler();
 223:Src/main.c    ****     }
 224:Src/main.c    ****     /** Configure Regular Channel
 225:Src/main.c    ****     */
 226:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_1;
 227:Src/main.c    ****     sConfig.Rank = ADC_REGULAR_RANK_1;
 228:Src/main.c    ****     sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 229:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 230:Src/main.c    ****     sConfig.OffsetNumber = ADC_OFFSET_NONE;
 231:Src/main.c    ****     sConfig.Offset = 0;
 232:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 233:Src/main.c    ****     {
 234:Src/main.c    ****         Error_Handler();
 235:Src/main.c    ****     }
 236:Src/main.c    ****     /** Configure Regular Channel
 237:Src/main.c    ****     */
 238:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_3;
 239:Src/main.c    ****     sConfig.Rank = ADC_REGULAR_RANK_2;
 240:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 241:Src/main.c    ****     {
 242:Src/main.c    ****         Error_Handler();
 243:Src/main.c    ****     }
 244:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 2 */
 245:Src/main.c    **** 
 246:Src/main.c    ****     /* USER CODE END ADC1_Init 2 */
 247:Src/main.c    **** }
 248:Src/main.c    **** 
 249:Src/main.c    **** /**
 250:Src/main.c    ****   * @brief HRTIM1 Initialization Function
 251:Src/main.c    ****   * @param None
 252:Src/main.c    ****   * @retval None
 253:Src/main.c    ****   */
 254:Src/main.c    **** static void MX_HRTIM1_Init(void)
 255:Src/main.c    **** {
 256:Src/main.c    **** 
 257:Src/main.c    ****     /* USER CODE BEGIN HRTIM1_Init 0 */
 258:Src/main.c    **** 
 259:Src/main.c    ****     /* USER CODE END HRTIM1_Init 0 */
ARM GAS  /tmp/cc7cRapf.s 			page 6


 260:Src/main.c    **** 
 261:Src/main.c    ****     HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 262:Src/main.c    ****     HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 263:Src/main.c    ****     HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 264:Src/main.c    ****     HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 265:Src/main.c    ****     HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 266:Src/main.c    ****     HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 267:Src/main.c    **** 
 268:Src/main.c    ****     /* USER CODE BEGIN HRTIM1_Init 1 */
 269:Src/main.c    **** 
 270:Src/main.c    ****     /* USER CODE END HRTIM1_Init 1 */
 271:Src/main.c    ****     hhrtim1.Instance = HRTIM1;
 272:Src/main.c    ****     hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 273:Src/main.c    ****     hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 274:Src/main.c    ****     if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 275:Src/main.c    ****     {
 276:Src/main.c    ****         Error_Handler();
 277:Src/main.c    ****     }
 278:Src/main.c    ****     if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 279:Src/main.c    ****     {
 280:Src/main.c    ****         Error_Handler();
 281:Src/main.c    ****     }
 282:Src/main.c    ****     if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 283:Src/main.c    ****     {
 284:Src/main.c    ****         Error_Handler();
 285:Src/main.c    ****     }
 286:Src/main.c    ****     pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 287:Src/main.c    ****     pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_CMP2;
 288:Src/main.c    ****     if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 289:Src/main.c    ****     {
 290:Src/main.c    ****         Error_Handler();
 291:Src/main.c    ****     }
 292:Src/main.c    ****     pTimeBaseCfg.Period = 0xFFF7;
 293:Src/main.c    ****     pTimeBaseCfg.RepetitionCounter = 0x00;
 294:Src/main.c    ****     pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 295:Src/main.c    ****     pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 296:Src/main.c    ****     if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 297:Src/main.c    ****     {
 298:Src/main.c    ****         Error_Handler();
 299:Src/main.c    ****     }
 300:Src/main.c    ****     pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 301:Src/main.c    ****     pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 302:Src/main.c    ****     pTimerCfg.DMASrcAddress = 0x0000;
 303:Src/main.c    ****     pTimerCfg.DMADstAddress = 0x0000;
 304:Src/main.c    ****     pTimerCfg.DMASize = 0x1;
 305:Src/main.c    ****     pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 306:Src/main.c    ****     pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 307:Src/main.c    ****     pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 308:Src/main.c    ****     pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 309:Src/main.c    ****     pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 310:Src/main.c    ****     pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 311:Src/main.c    ****     pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 312:Src/main.c    ****     pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 313:Src/main.c    ****     pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 314:Src/main.c    ****     pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 315:Src/main.c    ****     pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READONLY;
 316:Src/main.c    ****     pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
ARM GAS  /tmp/cc7cRapf.s 			page 7


 317:Src/main.c    ****     pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 318:Src/main.c    ****     pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 319:Src/main.c    ****     pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 320:Src/main.c    ****     pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 321:Src/main.c    ****     if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 322:Src/main.c    ****     {
 323:Src/main.c    ****         Error_Handler();
 324:Src/main.c    ****     }
 325:Src/main.c    ****     pTimerCfg.DMASrcAddress = 0x0000;
 326:Src/main.c    ****     pTimerCfg.DMADstAddress = 0x0000;
 327:Src/main.c    ****     pTimerCfg.DMASize = 0x1;
 328:Src/main.c    ****     pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 329:Src/main.c    ****     pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 330:Src/main.c    ****     pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 331:Src/main.c    ****     pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER1_CMP1;
 332:Src/main.c    ****     pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 333:Src/main.c    ****     if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 334:Src/main.c    ****     {
 335:Src/main.c    ****         Error_Handler();
 336:Src/main.c    ****     }
 337:Src/main.c    ****     pCompareCfg.CompareValue = 0x0018;
 338:Src/main.c    ****     if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &p
 339:Src/main.c    ****     {
 340:Src/main.c    ****         Error_Handler();
 341:Src/main.c    ****     }
 342:Src/main.c    ****     pCompareCfg.CompareValue = 0xFFF7;
 343:Src/main.c    ****     pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 344:Src/main.c    ****     pCompareCfg.AutoDelayedTimeout = 0x0000;
 345:Src/main.c    **** 
 346:Src/main.c    ****     if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &p
 347:Src/main.c    ****     {
 348:Src/main.c    ****         Error_Handler();
 349:Src/main.c    ****     }
 350:Src/main.c    ****     pCompareCfg.CompareValue = 0x8000;
 351:Src/main.c    ****     pCompareCfg.AutoDelayedTimeout = 0x0000;
 352:Src/main.c    **** 
 353:Src/main.c    ****     if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &p
 354:Src/main.c    ****     {
 355:Src/main.c    ****         Error_Handler();
 356:Src/main.c    ****     }
 357:Src/main.c    ****     pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV1;
 358:Src/main.c    ****     pDeadTimeCfg.RisingValue = 360;
 359:Src/main.c    ****     pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 360:Src/main.c    ****     pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_READONLY;
 361:Src/main.c    ****     pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 362:Src/main.c    ****     pDeadTimeCfg.FallingValue = 332;
 363:Src/main.c    ****     pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 364:Src/main.c    ****     pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_READONLY;
 365:Src/main.c    ****     pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 366:Src/main.c    ****     if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 367:Src/main.c    ****     {
 368:Src/main.c    ****         Error_Handler();
 369:Src/main.c    ****     }
 370:Src/main.c    ****     pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 371:Src/main.c    ****     pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 372:Src/main.c    ****     pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 373:Src/main.c    ****     pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
ARM GAS  /tmp/cc7cRapf.s 			page 8


 374:Src/main.c    ****     pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 375:Src/main.c    ****     pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 376:Src/main.c    ****     pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 377:Src/main.c    ****     pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 378:Src/main.c    ****     if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutp
 379:Src/main.c    ****     {
 380:Src/main.c    ****         Error_Handler();
 381:Src/main.c    ****     }
 382:Src/main.c    ****     pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 383:Src/main.c    ****     pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 384:Src/main.c    ****     if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutp
 385:Src/main.c    ****     {
 386:Src/main.c    ****         Error_Handler();
 387:Src/main.c    ****     }
 388:Src/main.c    ****     if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 389:Src/main.c    ****     {
 390:Src/main.c    ****         Error_Handler();
 391:Src/main.c    ****     }
 392:Src/main.c    ****     /* USER CODE BEGIN HRTIM1_Init 2 */
 393:Src/main.c    **** 
 394:Src/main.c    ****     /* USER CODE END HRTIM1_Init 2 */
 395:Src/main.c    ****     HAL_HRTIM_MspPostInit(&hhrtim1);
 396:Src/main.c    **** }
 397:Src/main.c    **** 
 398:Src/main.c    **** /**
 399:Src/main.c    ****   * @brief USART1 Initialization Function
 400:Src/main.c    ****   * @param None
 401:Src/main.c    ****   * @retval None
 402:Src/main.c    ****   */
 403:Src/main.c    **** static void MX_USART1_UART_Init(void)
 404:Src/main.c    **** {
 405:Src/main.c    **** 
 406:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 0 */
 407:Src/main.c    **** 
 408:Src/main.c    ****     /* USER CODE END USART1_Init 0 */
 409:Src/main.c    **** 
 410:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 1 */
 411:Src/main.c    **** 
 412:Src/main.c    ****     /* USER CODE END USART1_Init 1 */
 413:Src/main.c    ****     huart1.Instance = USART1;
 414:Src/main.c    ****     huart1.Init.BaudRate = 38400;
 415:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 416:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 417:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 418:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 419:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 420:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 421:Src/main.c    ****     huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 422:Src/main.c    ****     huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 423:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 424:Src/main.c    ****     {
 425:Src/main.c    ****         Error_Handler();
 426:Src/main.c    ****     }
 427:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 2 */
 428:Src/main.c    **** 
 429:Src/main.c    ****     /* USER CODE END USART1_Init 2 */
 430:Src/main.c    **** }
ARM GAS  /tmp/cc7cRapf.s 			page 9


 431:Src/main.c    **** 
 432:Src/main.c    **** /**
 433:Src/main.c    ****   * @brief USART3 Initialization Function
 434:Src/main.c    ****   * @param None
 435:Src/main.c    ****   * @retval None
 436:Src/main.c    ****   */
 437:Src/main.c    **** static void MX_USART3_UART_Init(void)
 438:Src/main.c    **** {
 439:Src/main.c    **** 
 440:Src/main.c    ****     /* USER CODE BEGIN USART3_Init 0 */
 441:Src/main.c    **** 
 442:Src/main.c    ****     /* USER CODE END USART3_Init 0 */
 443:Src/main.c    **** 
 444:Src/main.c    ****     /* USER CODE BEGIN USART3_Init 1 */
 445:Src/main.c    **** 
 446:Src/main.c    ****     /* USER CODE END USART3_Init 1 */
 447:Src/main.c    ****     huart3.Instance = USART3;
 448:Src/main.c    ****     huart3.Init.BaudRate = 9600;
 449:Src/main.c    ****     huart3.Init.WordLength = UART_WORDLENGTH_8B;
 450:Src/main.c    ****     huart3.Init.StopBits = UART_STOPBITS_1;
 451:Src/main.c    ****     huart3.Init.Parity = UART_PARITY_NONE;
 452:Src/main.c    ****     huart3.Init.Mode = UART_MODE_TX_RX;
 453:Src/main.c    ****     huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 454:Src/main.c    ****     huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 455:Src/main.c    ****     huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 456:Src/main.c    ****     huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 457:Src/main.c    ****     if (HAL_UART_Init(&huart3) != HAL_OK)
 458:Src/main.c    ****     {
 459:Src/main.c    ****         Error_Handler();
 460:Src/main.c    ****     }
 461:Src/main.c    ****     /* USER CODE BEGIN USART3_Init 2 */
 462:Src/main.c    ****     // Enable USART3 interrupt.
 463:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART3_IRQn);
 464:Src/main.c    ****     /* USER CODE END USART3_Init 2 */
 465:Src/main.c    **** }
 466:Src/main.c    **** 
 467:Src/main.c    **** /**
 468:Src/main.c    ****   * Enable DMA controller clock
 469:Src/main.c    ****   */
 470:Src/main.c    **** static void MX_DMA_Init(void)
 471:Src/main.c    **** {
 472:Src/main.c    ****     /* DMA controller clock enable */
 473:Src/main.c    ****     __HAL_RCC_DMA1_CLK_ENABLE();
 474:Src/main.c    **** 
 475:Src/main.c    ****     /* DMA interrupt init */
 476:Src/main.c    ****     /* DMA1_Channel1_IRQn interrupt configuration */
 477:Src/main.c    ****     HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 478:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 479:Src/main.c    **** }
 480:Src/main.c    **** 
 481:Src/main.c    **** /**
 482:Src/main.c    ****   * @brief GPIO Initialization Function
 483:Src/main.c    ****   * @param None
 484:Src/main.c    ****   * @retval None
 485:Src/main.c    ****   */
 486:Src/main.c    **** static void MX_GPIO_Init(void)
 487:Src/main.c    **** {
ARM GAS  /tmp/cc7cRapf.s 			page 10


  28              		.loc 1 487 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 89B0     		sub	sp, sp, #36
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
 488:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 488 5 view .LVU1
  44              		.loc 1 488 22 is_stmt 0 view .LVU2
  45 0004 0024     		movs	r4, #0
  46 0006 0394     		str	r4, [sp, #12]
  47 0008 0494     		str	r4, [sp, #16]
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
 489:Src/main.c    **** 
 490:Src/main.c    ****     /* GPIO Ports Clock Enable */
 491:Src/main.c    ****     __HAL_RCC_GPIOF_CLK_ENABLE();
  51              		.loc 1 491 5 is_stmt 1 view .LVU3
  52              	.LBB2:
  53              		.loc 1 491 5 view .LVU4
  54              		.loc 1 491 5 view .LVU5
  55 0010 314B     		ldr	r3, .L3
  56 0012 5A69     		ldr	r2, [r3, #20]
  57 0014 42F48002 		orr	r2, r2, #4194304
  58 0018 5A61     		str	r2, [r3, #20]
  59              		.loc 1 491 5 view .LVU6
  60 001a 5A69     		ldr	r2, [r3, #20]
  61 001c 02F48002 		and	r2, r2, #4194304
  62 0020 0092     		str	r2, [sp]
  63              		.loc 1 491 5 view .LVU7
  64 0022 009A     		ldr	r2, [sp]
  65              	.LBE2:
  66              		.loc 1 491 5 view .LVU8
 492:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  67              		.loc 1 492 5 view .LVU9
  68              	.LBB3:
  69              		.loc 1 492 5 view .LVU10
  70              		.loc 1 492 5 view .LVU11
  71 0024 5A69     		ldr	r2, [r3, #20]
  72 0026 42F40032 		orr	r2, r2, #131072
  73 002a 5A61     		str	r2, [r3, #20]
  74              		.loc 1 492 5 view .LVU12
  75 002c 5A69     		ldr	r2, [r3, #20]
  76 002e 02F40032 		and	r2, r2, #131072
  77 0032 0192     		str	r2, [sp, #4]
  78              		.loc 1 492 5 view .LVU13
  79 0034 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/cc7cRapf.s 			page 11


  80              	.LBE3:
  81              		.loc 1 492 5 view .LVU14
 493:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 493 5 view .LVU15
  83              	.LBB4:
  84              		.loc 1 493 5 view .LVU16
  85              		.loc 1 493 5 view .LVU17
  86 0036 5A69     		ldr	r2, [r3, #20]
  87 0038 42F48022 		orr	r2, r2, #262144
  88 003c 5A61     		str	r2, [r3, #20]
  89              		.loc 1 493 5 view .LVU18
  90 003e 5B69     		ldr	r3, [r3, #20]
  91 0040 03F48023 		and	r3, r3, #262144
  92 0044 0293     		str	r3, [sp, #8]
  93              		.loc 1 493 5 view .LVU19
  94 0046 029B     		ldr	r3, [sp, #8]
  95              	.LBE4:
  96              		.loc 1 493 5 view .LVU20
 494:Src/main.c    **** 
 495:Src/main.c    ****     /*Configure GPIO pin Output Level */
 496:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, RS485_DEnRE_Pin | LED_RED_Pin | LED_GREEN_Pin | LED_BLUE_Pin | MISC0_P
  97              		.loc 1 496 5 view .LVU21
  98 0048 244E     		ldr	r6, .L3+4
  99 004a 2246     		mov	r2, r4
 100 004c 47F21C01 		movw	r1, #28700
 101 0050 3046     		mov	r0, r6
 102 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 103              	.LVL0:
 497:Src/main.c    ****     HAL_GPIO_WritePin(CONTACTOR_CTRL_GPIO_Port, CONTACTOR_CTRL_Pin, GPIO_PIN_SET);
 104              		.loc 1 497 5 view .LVU22
 105 0056 0122     		movs	r2, #1
 106 0058 2021     		movs	r1, #32
 107 005a 3046     		mov	r0, r6
 108 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 109              	.LVL1:
 498:Src/main.c    **** 
 499:Src/main.c    ****     /*Configure GPIO pins : TRIGIN_RISING_Pin */
 500:Src/main.c    ****     GPIO_InitStruct.Pin = TRIGIN_RISING_Pin;
 110              		.loc 1 500 5 view .LVU23
 111              		.loc 1 500 25 is_stmt 0 view .LVU24
 112 0060 1023     		movs	r3, #16
 113 0062 0393     		str	r3, [sp, #12]
 501:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 114              		.loc 1 501 5 is_stmt 1 view .LVU25
 115              		.loc 1 501 26 is_stmt 0 view .LVU26
 116 0064 1E4B     		ldr	r3, .L3+8
 117 0066 0493     		str	r3, [sp, #16]
 502:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 118              		.loc 1 502 5 is_stmt 1 view .LVU27
 119              		.loc 1 502 26 is_stmt 0 view .LVU28
 120 0068 0225     		movs	r5, #2
 121 006a 0595     		str	r5, [sp, #20]
 503:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 122              		.loc 1 503 5 is_stmt 1 view .LVU29
 123 006c 03A9     		add	r1, sp, #12
 124 006e 4FF09040 		mov	r0, #1207959552
 125 0072 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cc7cRapf.s 			page 12


 126              	.LVL2:
 504:Src/main.c    **** 
 505:Src/main.c    ****     /*Configure GPIO pins : TRIGIN_FALLING_Pin */
 506:Src/main.c    ****     GPIO_InitStruct.Pin = TRIGIN_FALLING_Pin;
 127              		.loc 1 506 5 view .LVU30
 128              		.loc 1 506 25 is_stmt 0 view .LVU31
 129 0076 2023     		movs	r3, #32
 130 0078 0393     		str	r3, [sp, #12]
 507:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 131              		.loc 1 507 5 is_stmt 1 view .LVU32
 132              		.loc 1 507 26 is_stmt 0 view .LVU33
 133 007a 1A4B     		ldr	r3, .L3+12
 134 007c 0493     		str	r3, [sp, #16]
 508:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 135              		.loc 1 508 5 is_stmt 1 view .LVU34
 136              		.loc 1 508 26 is_stmt 0 view .LVU35
 137 007e 0595     		str	r5, [sp, #20]
 509:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 138              		.loc 1 509 5 is_stmt 1 view .LVU36
 139 0080 03A9     		add	r1, sp, #12
 140 0082 4FF09040 		mov	r0, #1207959552
 141 0086 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL3:
 510:Src/main.c    **** 
 511:Src/main.c    ****     /*Configure GPIO pins : RS485_DEnRE_Pin */
 512:Src/main.c    ****     GPIO_InitStruct.Pin = RS485_DEnRE_Pin;
 143              		.loc 1 512 5 view .LVU37
 144              		.loc 1 512 25 is_stmt 0 view .LVU38
 145 008a 0423     		movs	r3, #4
 146 008c 0393     		str	r3, [sp, #12]
 513:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 147              		.loc 1 513 5 is_stmt 1 view .LVU39
 148              		.loc 1 513 26 is_stmt 0 view .LVU40
 149 008e 0127     		movs	r7, #1
 150 0090 0497     		str	r7, [sp, #16]
 514:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 151              		.loc 1 514 5 is_stmt 1 view .LVU41
 152              		.loc 1 514 26 is_stmt 0 view .LVU42
 153 0092 0594     		str	r4, [sp, #20]
 515:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 154              		.loc 1 515 5 is_stmt 1 view .LVU43
 155              		.loc 1 515 27 is_stmt 0 view .LVU44
 156 0094 0697     		str	r7, [sp, #24]
 516:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 157              		.loc 1 516 5 is_stmt 1 view .LVU45
 158 0096 03A9     		add	r1, sp, #12
 159 0098 3046     		mov	r0, r6
 160 009a FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL4:
 517:Src/main.c    **** 
 518:Src/main.c    ****     /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin MISC0_Pin
 519:Src/main.c    ****                              MISC1_Pin MISC2_Pin */
 520:Src/main.c    ****     GPIO_InitStruct.Pin = LED_RED_Pin | LED_GREEN_Pin | LED_BLUE_Pin | MISC0_Pin | MISC1_Pin | CONT
 162              		.loc 1 520 5 view .LVU46
 163              		.loc 1 520 25 is_stmt 0 view .LVU47
 164 009e 47F23803 		movw	r3, #28728
 165 00a2 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/cc7cRapf.s 			page 13


 521:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 166              		.loc 1 521 5 is_stmt 1 view .LVU48
 167              		.loc 1 521 26 is_stmt 0 view .LVU49
 168 00a4 0497     		str	r7, [sp, #16]
 522:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 169              		.loc 1 522 5 is_stmt 1 view .LVU50
 170              		.loc 1 522 26 is_stmt 0 view .LVU51
 171 00a6 0594     		str	r4, [sp, #20]
 523:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 172              		.loc 1 523 5 is_stmt 1 view .LVU52
 173              		.loc 1 523 27 is_stmt 0 view .LVU53
 174 00a8 0694     		str	r4, [sp, #24]
 524:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 175              		.loc 1 524 5 is_stmt 1 view .LVU54
 176 00aa 03A9     		add	r1, sp, #12
 177 00ac 3046     		mov	r0, r6
 178 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 179              	.LVL5:
 525:Src/main.c    **** 
 526:Src/main.c    ****     /* EXTI interrupt init*/
 527:Src/main.c    ****     HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 180              		.loc 1 527 5 view .LVU55
 181 00b2 2246     		mov	r2, r4
 182 00b4 2946     		mov	r1, r5
 183 00b6 0A20     		movs	r0, #10
 184 00b8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 185              	.LVL6:
 528:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 186              		.loc 1 528 5 view .LVU56
 187 00bc 0A20     		movs	r0, #10
 188 00be FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 189              	.LVL7:
 529:Src/main.c    **** 
 530:Src/main.c    ****     HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 190              		.loc 1 530 5 view .LVU57
 191 00c2 2246     		mov	r2, r4
 192 00c4 2946     		mov	r1, r5
 193 00c6 1720     		movs	r0, #23
 194 00c8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 195              	.LVL8:
 531:Src/main.c    ****     HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 196              		.loc 1 531 5 view .LVU58
 197 00cc 1720     		movs	r0, #23
 198 00ce FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 199              	.LVL9:
 532:Src/main.c    **** }
 200              		.loc 1 532 1 is_stmt 0 view .LVU59
 201 00d2 09B0     		add	sp, sp, #36
 202              	.LCFI2:
 203              		.cfi_def_cfa_offset 20
 204              		@ sp needed
 205 00d4 F0BD     		pop	{r4, r5, r6, r7, pc}
 206              	.L4:
 207 00d6 00BF     		.align	2
 208              	.L3:
 209 00d8 00100240 		.word	1073876992
 210 00dc 00040048 		.word	1207960576
ARM GAS  /tmp/cc7cRapf.s 			page 14


 211 00e0 00001110 		.word	269549568
 212 00e4 00002110 		.word	270598144
 213              		.cfi_endproc
 214              	.LFE142:
 216              		.section	.text.MX_DMA_Init,"ax",%progbits
 217              		.align	1
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu fpv4-sp-d16
 223              	MX_DMA_Init:
 224              	.LFB141:
 471:Src/main.c    ****     /* DMA controller clock enable */
 225              		.loc 1 471 1 is_stmt 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229 0000 00B5     		push	{lr}
 230              	.LCFI3:
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 14, -4
 233 0002 83B0     		sub	sp, sp, #12
 234              	.LCFI4:
 235              		.cfi_def_cfa_offset 16
 473:Src/main.c    **** 
 236              		.loc 1 473 5 view .LVU61
 237              	.LBB5:
 473:Src/main.c    **** 
 238              		.loc 1 473 5 view .LVU62
 473:Src/main.c    **** 
 239              		.loc 1 473 5 view .LVU63
 240 0004 0A4B     		ldr	r3, .L7
 241 0006 5A69     		ldr	r2, [r3, #20]
 242 0008 42F00102 		orr	r2, r2, #1
 243 000c 5A61     		str	r2, [r3, #20]
 473:Src/main.c    **** 
 244              		.loc 1 473 5 view .LVU64
 245 000e 5B69     		ldr	r3, [r3, #20]
 246 0010 03F00103 		and	r3, r3, #1
 247 0014 0193     		str	r3, [sp, #4]
 473:Src/main.c    **** 
 248              		.loc 1 473 5 view .LVU65
 249 0016 019B     		ldr	r3, [sp, #4]
 250              	.LBE5:
 473:Src/main.c    **** 
 251              		.loc 1 473 5 view .LVU66
 477:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 252              		.loc 1 477 5 view .LVU67
 253 0018 0022     		movs	r2, #0
 254 001a 0121     		movs	r1, #1
 255 001c 0B20     		movs	r0, #11
 256 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 257              	.LVL10:
 478:Src/main.c    **** }
 258              		.loc 1 478 5 view .LVU68
 259 0022 0B20     		movs	r0, #11
 260 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /tmp/cc7cRapf.s 			page 15


 261              	.LVL11:
 479:Src/main.c    **** 
 262              		.loc 1 479 1 is_stmt 0 view .LVU69
 263 0028 03B0     		add	sp, sp, #12
 264              	.LCFI5:
 265              		.cfi_def_cfa_offset 4
 266              		@ sp needed
 267 002a 5DF804FB 		ldr	pc, [sp], #4
 268              	.L8:
 269 002e 00BF     		.align	2
 270              	.L7:
 271 0030 00100240 		.word	1073876992
 272              		.cfi_endproc
 273              	.LFE141:
 275              		.section	.text.MX_HRTIM1_Init,"ax",%progbits
 276              		.align	1
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	MX_HRTIM1_Init:
 283              	.LFB138:
 255:Src/main.c    **** 
 284              		.loc 1 255 1 is_stmt 1 view -0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 192
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 289              	.LCFI6:
 290              		.cfi_def_cfa_offset 32
 291              		.cfi_offset 4, -32
 292              		.cfi_offset 5, -28
 293              		.cfi_offset 6, -24
 294              		.cfi_offset 7, -20
 295              		.cfi_offset 8, -16
 296              		.cfi_offset 9, -12
 297              		.cfi_offset 10, -8
 298              		.cfi_offset 14, -4
 299 0004 B0B0     		sub	sp, sp, #192
 300              	.LCFI7:
 301              		.cfi_def_cfa_offset 224
 261:Src/main.c    ****     HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 302              		.loc 1 261 5 view .LVU71
 261:Src/main.c    ****     HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 303              		.loc 1 261 32 is_stmt 0 view .LVU72
 304 0006 0024     		movs	r4, #0
 305 0008 2E94     		str	r4, [sp, #184]
 306 000a 2F94     		str	r4, [sp, #188]
 262:Src/main.c    ****     HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 307              		.loc 1 262 5 is_stmt 1 view .LVU73
 262:Src/main.c    ****     HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 308              		.loc 1 262 30 is_stmt 0 view .LVU74
 309 000c 2A94     		str	r4, [sp, #168]
 310 000e 2B94     		str	r4, [sp, #172]
 311 0010 2C94     		str	r4, [sp, #176]
 312 0012 2D94     		str	r4, [sp, #180]
 263:Src/main.c    ****     HRTIM_CompareCfgTypeDef pCompareCfg = {0};
ARM GAS  /tmp/cc7cRapf.s 			page 16


 313              		.loc 1 263 5 is_stmt 1 view .LVU75
 263:Src/main.c    ****     HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 314              		.loc 1 263 27 is_stmt 0 view .LVU76
 315 0014 5422     		movs	r2, #84
 316 0016 2146     		mov	r1, r4
 317 0018 0DEB0200 		add	r0, sp, r2
 318 001c FFF7FEFF 		bl	memset
 319              	.LVL12:
 264:Src/main.c    ****     HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 320              		.loc 1 264 5 is_stmt 1 view .LVU77
 264:Src/main.c    ****     HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 321              		.loc 1 264 29 is_stmt 0 view .LVU78
 322 0020 1294     		str	r4, [sp, #72]
 323 0022 1394     		str	r4, [sp, #76]
 324 0024 1494     		str	r4, [sp, #80]
 265:Src/main.c    ****     HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 325              		.loc 1 265 5 is_stmt 1 view .LVU79
 265:Src/main.c    ****     HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 326              		.loc 1 265 30 is_stmt 0 view .LVU80
 327 0026 2422     		movs	r2, #36
 328 0028 2146     		mov	r1, r4
 329 002a 0DEB0200 		add	r0, sp, r2
 330 002e FFF7FEFF 		bl	memset
 331              	.LVL13:
 266:Src/main.c    **** 
 332              		.loc 1 266 5 is_stmt 1 view .LVU81
 266:Src/main.c    **** 
 333              		.loc 1 266 28 is_stmt 0 view .LVU82
 334 0032 2022     		movs	r2, #32
 335 0034 2146     		mov	r1, r4
 336 0036 01A8     		add	r0, sp, #4
 337 0038 FFF7FEFF 		bl	memset
 338              	.LVL14:
 271:Src/main.c    ****     hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 339              		.loc 1 271 5 is_stmt 1 view .LVU83
 271:Src/main.c    ****     hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 340              		.loc 1 271 22 is_stmt 0 view .LVU84
 341 003c 5A4D     		ldr	r5, .L11
 342 003e 5B4B     		ldr	r3, .L11+4
 343 0040 2B60     		str	r3, [r5]
 272:Src/main.c    ****     hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 344              		.loc 1 272 5 is_stmt 1 view .LVU85
 272:Src/main.c    ****     hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 345              		.loc 1 272 42 is_stmt 0 view .LVU86
 346 0042 6C60     		str	r4, [r5, #4]
 273:Src/main.c    ****     if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 347              		.loc 1 273 5 is_stmt 1 view .LVU87
 273:Src/main.c    ****     if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 348              		.loc 1 273 30 is_stmt 0 view .LVU88
 349 0044 AC60     		str	r4, [r5, #8]
 274:Src/main.c    ****     {
 350              		.loc 1 274 5 is_stmt 1 view .LVU89
 274:Src/main.c    ****     {
 351              		.loc 1 274 9 is_stmt 0 view .LVU90
 352 0046 2846     		mov	r0, r5
 353 0048 FFF7FEFF 		bl	HAL_HRTIM_Init
 354              	.LVL15:
ARM GAS  /tmp/cc7cRapf.s 			page 17


 278:Src/main.c    ****     {
 355              		.loc 1 278 5 is_stmt 1 view .LVU91
 278:Src/main.c    ****     {
 356              		.loc 1 278 9 is_stmt 0 view .LVU92
 357 004c 0C21     		movs	r1, #12
 358 004e 2846     		mov	r0, r5
 359 0050 FFF7FEFF 		bl	HAL_HRTIM_DLLCalibrationStart
 360              	.LVL16:
 282:Src/main.c    ****     {
 361              		.loc 1 282 5 is_stmt 1 view .LVU93
 282:Src/main.c    ****     {
 362              		.loc 1 282 9 is_stmt 0 view .LVU94
 363 0054 0A21     		movs	r1, #10
 364 0056 2846     		mov	r0, r5
 365 0058 FFF7FEFF 		bl	HAL_HRTIM_PollForDLLCalibration
 366              	.LVL17:
 286:Src/main.c    ****     pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_CMP2;
 367              		.loc 1 286 5 is_stmt 1 view .LVU95
 286:Src/main.c    ****     pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_CMP2;
 368              		.loc 1 286 33 is_stmt 0 view .LVU96
 369 005c 4FF40033 		mov	r3, #131072
 370 0060 2E93     		str	r3, [sp, #184]
 287:Src/main.c    ****     if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 371              		.loc 1 287 5 is_stmt 1 view .LVU97
 287:Src/main.c    ****     if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 372              		.loc 1 287 28 is_stmt 0 view .LVU98
 373 0062 4FF40048 		mov	r8, #32768
 374 0066 CDF8BC80 		str	r8, [sp, #188]
 288:Src/main.c    ****     {
 375              		.loc 1 288 5 is_stmt 1 view .LVU99
 288:Src/main.c    ****     {
 376              		.loc 1 288 9 is_stmt 0 view .LVU100
 377 006a 2EAA     		add	r2, sp, #184
 378 006c 0121     		movs	r1, #1
 379 006e 2846     		mov	r0, r5
 380 0070 FFF7FEFF 		bl	HAL_HRTIM_ADCTriggerConfig
 381              	.LVL18:
 292:Src/main.c    ****     pTimeBaseCfg.RepetitionCounter = 0x00;
 382              		.loc 1 292 5 is_stmt 1 view .LVU101
 292:Src/main.c    ****     pTimeBaseCfg.RepetitionCounter = 0x00;
 383              		.loc 1 292 25 is_stmt 0 view .LVU102
 384 0074 4FF6F77A 		movw	r10, #65527
 385 0078 CDF8A8A0 		str	r10, [sp, #168]
 293:Src/main.c    ****     pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 386              		.loc 1 293 5 is_stmt 1 view .LVU103
 293:Src/main.c    ****     pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 387              		.loc 1 293 36 is_stmt 0 view .LVU104
 388 007c 2B94     		str	r4, [sp, #172]
 294:Src/main.c    ****     pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 389              		.loc 1 294 5 is_stmt 1 view .LVU105
 294:Src/main.c    ****     pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 390              		.loc 1 294 33 is_stmt 0 view .LVU106
 391 007e 0227     		movs	r7, #2
 392 0080 2C97     		str	r7, [sp, #176]
 295:Src/main.c    ****     if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 393              		.loc 1 295 5 is_stmt 1 view .LVU107
 295:Src/main.c    ****     if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
ARM GAS  /tmp/cc7cRapf.s 			page 18


 394              		.loc 1 295 23 is_stmt 0 view .LVU108
 395 0082 0823     		movs	r3, #8
 396 0084 2D93     		str	r3, [sp, #180]
 296:Src/main.c    ****     {
 397              		.loc 1 296 5 is_stmt 1 view .LVU109
 296:Src/main.c    ****     {
 398              		.loc 1 296 9 is_stmt 0 view .LVU110
 399 0086 2AAA     		add	r2, sp, #168
 400 0088 2146     		mov	r1, r4
 401 008a 2846     		mov	r0, r5
 402 008c FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 403              	.LVL19:
 300:Src/main.c    ****     pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 404              		.loc 1 300 5 is_stmt 1 view .LVU111
 300:Src/main.c    ****     pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 405              		.loc 1 300 33 is_stmt 0 view .LVU112
 406 0090 1594     		str	r4, [sp, #84]
 301:Src/main.c    ****     pTimerCfg.DMASrcAddress = 0x0000;
 407              		.loc 1 301 5 is_stmt 1 view .LVU113
 301:Src/main.c    ****     pTimerCfg.DMASrcAddress = 0x0000;
 408              		.loc 1 301 27 is_stmt 0 view .LVU114
 409 0092 1694     		str	r4, [sp, #88]
 302:Src/main.c    ****     pTimerCfg.DMADstAddress = 0x0000;
 410              		.loc 1 302 5 is_stmt 1 view .LVU115
 302:Src/main.c    ****     pTimerCfg.DMADstAddress = 0x0000;
 411              		.loc 1 302 29 is_stmt 0 view .LVU116
 412 0094 1794     		str	r4, [sp, #92]
 303:Src/main.c    ****     pTimerCfg.DMASize = 0x1;
 413              		.loc 1 303 5 is_stmt 1 view .LVU117
 303:Src/main.c    ****     pTimerCfg.DMASize = 0x1;
 414              		.loc 1 303 29 is_stmt 0 view .LVU118
 415 0096 1894     		str	r4, [sp, #96]
 304:Src/main.c    ****     pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 416              		.loc 1 304 5 is_stmt 1 view .LVU119
 304:Src/main.c    ****     pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 417              		.loc 1 304 23 is_stmt 0 view .LVU120
 418 0098 0126     		movs	r6, #1
 419 009a 1996     		str	r6, [sp, #100]
 305:Src/main.c    ****     pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 420              		.loc 1 305 5 is_stmt 1 view .LVU121
 305:Src/main.c    ****     pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 421              		.loc 1 305 30 is_stmt 0 view .LVU122
 422 009c 1A94     		str	r4, [sp, #104]
 306:Src/main.c    ****     pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 423              		.loc 1 306 5 is_stmt 1 view .LVU123
 306:Src/main.c    ****     pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 424              		.loc 1 306 27 is_stmt 0 view .LVU124
 425 009e 1B94     		str	r4, [sp, #108]
 307:Src/main.c    ****     pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 426              		.loc 1 307 5 is_stmt 1 view .LVU125
 307:Src/main.c    ****     pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 427              		.loc 1 307 27 is_stmt 0 view .LVU126
 428 00a0 1C94     		str	r4, [sp, #112]
 308:Src/main.c    ****     pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 429              		.loc 1 308 5 is_stmt 1 view .LVU127
 308:Src/main.c    ****     pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 430              		.loc 1 308 26 is_stmt 0 view .LVU128
ARM GAS  /tmp/cc7cRapf.s 			page 19


 431 00a2 1D94     		str	r4, [sp, #116]
 309:Src/main.c    ****     pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 432              		.loc 1 309 5 is_stmt 1 view .LVU129
 309:Src/main.c    ****     pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 433              		.loc 1 309 29 is_stmt 0 view .LVU130
 434 00a4 4FF00063 		mov	r3, #134217728
 435 00a8 1E93     		str	r3, [sp, #120]
 310:Src/main.c    ****     pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 436              		.loc 1 310 5 is_stmt 1 view .LVU131
 310:Src/main.c    ****     pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 437              		.loc 1 310 28 is_stmt 0 view .LVU132
 438 00aa 1F94     		str	r4, [sp, #124]
 311:Src/main.c    ****     pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 439              		.loc 1 311 5 is_stmt 1 view .LVU133
 311:Src/main.c    ****     pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 440              		.loc 1 311 25 is_stmt 0 view .LVU134
 441 00ac 2094     		str	r4, [sp, #128]
 312:Src/main.c    ****     pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 442              		.loc 1 312 5 is_stmt 1 view .LVU135
 312:Src/main.c    ****     pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 443              		.loc 1 312 32 is_stmt 0 view .LVU136
 444 00ae 2194     		str	r4, [sp, #132]
 313:Src/main.c    ****     pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 445              		.loc 1 313 5 is_stmt 1 view .LVU137
 313:Src/main.c    ****     pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 446              		.loc 1 313 24 is_stmt 0 view .LVU138
 447 00b0 2294     		str	r4, [sp, #136]
 314:Src/main.c    ****     pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READONLY;
 448              		.loc 1 314 5 is_stmt 1 view .LVU139
 314:Src/main.c    ****     pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READONLY;
 449              		.loc 1 314 27 is_stmt 0 view .LVU140
 450 00b2 2394     		str	r4, [sp, #140]
 315:Src/main.c    ****     pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 451              		.loc 1 315 5 is_stmt 1 view .LVU141
 315:Src/main.c    ****     pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 452              		.loc 1 315 25 is_stmt 0 view .LVU142
 453 00b4 4FF00049 		mov	r9, #-2147483648
 454 00b8 CDF89090 		str	r9, [sp, #144]
 316:Src/main.c    ****     pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 455              		.loc 1 316 5 is_stmt 1 view .LVU143
 316:Src/main.c    ****     pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 456              		.loc 1 316 33 is_stmt 0 view .LVU144
 457 00bc 4FF48073 		mov	r3, #256
 458 00c0 2593     		str	r3, [sp, #148]
 317:Src/main.c    ****     pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 459              		.loc 1 317 5 is_stmt 1 view .LVU145
 317:Src/main.c    ****     pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 460              		.loc 1 317 37 is_stmt 0 view .LVU146
 461 00c2 2694     		str	r4, [sp, #152]
 318:Src/main.c    ****     pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 462              		.loc 1 318 5 is_stmt 1 view .LVU147
 318:Src/main.c    ****     pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 463              		.loc 1 318 29 is_stmt 0 view .LVU148
 464 00c4 2794     		str	r4, [sp, #156]
 319:Src/main.c    ****     pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 465              		.loc 1 319 5 is_stmt 1 view .LVU149
 319:Src/main.c    ****     pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
ARM GAS  /tmp/cc7cRapf.s 			page 20


 466              		.loc 1 319 28 is_stmt 0 view .LVU150
 467 00c6 2894     		str	r4, [sp, #160]
 320:Src/main.c    ****     if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 468              		.loc 1 320 5 is_stmt 1 view .LVU151
 320:Src/main.c    ****     if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 469              		.loc 1 320 27 is_stmt 0 view .LVU152
 470 00c8 4FF48023 		mov	r3, #262144
 471 00cc 2993     		str	r3, [sp, #164]
 321:Src/main.c    ****     {
 472              		.loc 1 321 5 is_stmt 1 view .LVU153
 321:Src/main.c    ****     {
 473              		.loc 1 321 9 is_stmt 0 view .LVU154
 474 00ce 15AA     		add	r2, sp, #84
 475 00d0 2146     		mov	r1, r4
 476 00d2 2846     		mov	r0, r5
 477 00d4 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerConfig
 478              	.LVL20:
 325:Src/main.c    ****     pTimerCfg.DMADstAddress = 0x0000;
 479              		.loc 1 325 5 is_stmt 1 view .LVU155
 325:Src/main.c    ****     pTimerCfg.DMADstAddress = 0x0000;
 480              		.loc 1 325 29 is_stmt 0 view .LVU156
 481 00d8 1794     		str	r4, [sp, #92]
 326:Src/main.c    ****     pTimerCfg.DMASize = 0x1;
 482              		.loc 1 326 5 is_stmt 1 view .LVU157
 326:Src/main.c    ****     pTimerCfg.DMASize = 0x1;
 483              		.loc 1 326 29 is_stmt 0 view .LVU158
 484 00da 1894     		str	r4, [sp, #96]
 327:Src/main.c    ****     pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 485              		.loc 1 327 5 is_stmt 1 view .LVU159
 327:Src/main.c    ****     pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 486              		.loc 1 327 23 is_stmt 0 view .LVU160
 487 00dc 1996     		str	r6, [sp, #100]
 328:Src/main.c    ****     pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 488              		.loc 1 328 5 is_stmt 1 view .LVU161
 328:Src/main.c    ****     pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 489              		.loc 1 328 25 is_stmt 0 view .LVU162
 490 00de 2494     		str	r4, [sp, #144]
 329:Src/main.c    ****     pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 491              		.loc 1 329 5 is_stmt 1 view .LVU163
 329:Src/main.c    ****     pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 492              		.loc 1 329 33 is_stmt 0 view .LVU164
 493 00e0 2594     		str	r4, [sp, #148]
 330:Src/main.c    ****     pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER1_CMP1;
 494              		.loc 1 330 5 is_stmt 1 view .LVU165
 330:Src/main.c    ****     pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER1_CMP1;
 495              		.loc 1 330 29 is_stmt 0 view .LVU166
 496 00e2 4FF40023 		mov	r3, #524288
 497 00e6 2793     		str	r3, [sp, #156]
 331:Src/main.c    ****     pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 498              		.loc 1 331 5 is_stmt 1 view .LVU167
 331:Src/main.c    ****     pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 499              		.loc 1 331 28 is_stmt 0 view .LVU168
 500 00e8 2893     		str	r3, [sp, #160]
 332:Src/main.c    ****     if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 501              		.loc 1 332 5 is_stmt 1 view .LVU169
 332:Src/main.c    ****     if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 502              		.loc 1 332 27 is_stmt 0 view .LVU170
ARM GAS  /tmp/cc7cRapf.s 			page 21


 503 00ea 2994     		str	r4, [sp, #164]
 333:Src/main.c    ****     {
 504              		.loc 1 333 5 is_stmt 1 view .LVU171
 333:Src/main.c    ****     {
 505              		.loc 1 333 9 is_stmt 0 view .LVU172
 506 00ec 15AA     		add	r2, sp, #84
 507 00ee 3146     		mov	r1, r6
 508 00f0 2846     		mov	r0, r5
 509 00f2 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerConfig
 510              	.LVL21:
 337:Src/main.c    ****     if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &p
 511              		.loc 1 337 5 is_stmt 1 view .LVU173
 337:Src/main.c    ****     if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &p
 512              		.loc 1 337 30 is_stmt 0 view .LVU174
 513 00f6 1823     		movs	r3, #24
 514 00f8 1293     		str	r3, [sp, #72]
 338:Src/main.c    ****     {
 515              		.loc 1 338 5 is_stmt 1 view .LVU175
 338:Src/main.c    ****     {
 516              		.loc 1 338 9 is_stmt 0 view .LVU176
 517 00fa 12AB     		add	r3, sp, #72
 518 00fc 3246     		mov	r2, r6
 519 00fe 2146     		mov	r1, r4
 520 0100 2846     		mov	r0, r5
 521 0102 FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 522              	.LVL22:
 342:Src/main.c    ****     pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 523              		.loc 1 342 5 is_stmt 1 view .LVU177
 342:Src/main.c    ****     pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 524              		.loc 1 342 30 is_stmt 0 view .LVU178
 525 0106 CDF848A0 		str	r10, [sp, #72]
 343:Src/main.c    ****     pCompareCfg.AutoDelayedTimeout = 0x0000;
 526              		.loc 1 343 5 is_stmt 1 view .LVU179
 343:Src/main.c    ****     pCompareCfg.AutoDelayedTimeout = 0x0000;
 527              		.loc 1 343 33 is_stmt 0 view .LVU180
 528 010a 1394     		str	r4, [sp, #76]
 344:Src/main.c    **** 
 529              		.loc 1 344 5 is_stmt 1 view .LVU181
 344:Src/main.c    **** 
 530              		.loc 1 344 36 is_stmt 0 view .LVU182
 531 010c 1494     		str	r4, [sp, #80]
 346:Src/main.c    ****     {
 532              		.loc 1 346 5 is_stmt 1 view .LVU183
 346:Src/main.c    ****     {
 533              		.loc 1 346 9 is_stmt 0 view .LVU184
 534 010e 12AB     		add	r3, sp, #72
 535 0110 3A46     		mov	r2, r7
 536 0112 2146     		mov	r1, r4
 537 0114 2846     		mov	r0, r5
 538 0116 FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 539              	.LVL23:
 350:Src/main.c    ****     pCompareCfg.AutoDelayedTimeout = 0x0000;
 540              		.loc 1 350 5 is_stmt 1 view .LVU185
 350:Src/main.c    ****     pCompareCfg.AutoDelayedTimeout = 0x0000;
 541              		.loc 1 350 30 is_stmt 0 view .LVU186
 542 011a CDF84880 		str	r8, [sp, #72]
 351:Src/main.c    **** 
ARM GAS  /tmp/cc7cRapf.s 			page 22


 543              		.loc 1 351 5 is_stmt 1 view .LVU187
 351:Src/main.c    **** 
 544              		.loc 1 351 36 is_stmt 0 view .LVU188
 545 011e 1494     		str	r4, [sp, #80]
 353:Src/main.c    ****     {
 546              		.loc 1 353 5 is_stmt 1 view .LVU189
 353:Src/main.c    ****     {
 547              		.loc 1 353 9 is_stmt 0 view .LVU190
 548 0120 12AB     		add	r3, sp, #72
 549 0122 3A46     		mov	r2, r7
 550 0124 3146     		mov	r1, r6
 551 0126 2846     		mov	r0, r5
 552 0128 FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 553              	.LVL24:
 357:Src/main.c    ****     pDeadTimeCfg.RisingValue = 360;
 554              		.loc 1 357 5 is_stmt 1 view .LVU191
 357:Src/main.c    ****     pDeadTimeCfg.RisingValue = 360;
 555              		.loc 1 357 28 is_stmt 0 view .LVU192
 556 012c 4FF44063 		mov	r3, #3072
 557 0130 0993     		str	r3, [sp, #36]
 358:Src/main.c    ****     pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 558              		.loc 1 358 5 is_stmt 1 view .LVU193
 358:Src/main.c    ****     pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 559              		.loc 1 358 30 is_stmt 0 view .LVU194
 560 0132 4FF4B473 		mov	r3, #360
 561 0136 0A93     		str	r3, [sp, #40]
 359:Src/main.c    ****     pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_READONLY;
 562              		.loc 1 359 5 is_stmt 1 view .LVU195
 359:Src/main.c    ****     pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_READONLY;
 563              		.loc 1 359 29 is_stmt 0 view .LVU196
 564 0138 0B94     		str	r4, [sp, #44]
 360:Src/main.c    ****     pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 565              		.loc 1 360 5 is_stmt 1 view .LVU197
 360:Src/main.c    ****     pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 566              		.loc 1 360 29 is_stmt 0 view .LVU198
 567 013a CDF83080 		str	r8, [sp, #48]
 361:Src/main.c    ****     pDeadTimeCfg.FallingValue = 332;
 568              		.loc 1 361 5 is_stmt 1 view .LVU199
 361:Src/main.c    ****     pDeadTimeCfg.FallingValue = 332;
 569              		.loc 1 361 33 is_stmt 0 view .LVU200
 570 013e 4FF48043 		mov	r3, #16384
 571 0142 0D93     		str	r3, [sp, #52]
 362:Src/main.c    ****     pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 572              		.loc 1 362 5 is_stmt 1 view .LVU201
 362:Src/main.c    ****     pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 573              		.loc 1 362 31 is_stmt 0 view .LVU202
 574 0144 4FF4A673 		mov	r3, #332
 575 0148 0E93     		str	r3, [sp, #56]
 363:Src/main.c    ****     pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_READONLY;
 576              		.loc 1 363 5 is_stmt 1 view .LVU203
 363:Src/main.c    ****     pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_READONLY;
 577              		.loc 1 363 30 is_stmt 0 view .LVU204
 578 014a 0F94     		str	r4, [sp, #60]
 364:Src/main.c    ****     pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 579              		.loc 1 364 5 is_stmt 1 view .LVU205
 364:Src/main.c    ****     pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 580              		.loc 1 364 30 is_stmt 0 view .LVU206
ARM GAS  /tmp/cc7cRapf.s 			page 23


 581 014c CDF84090 		str	r9, [sp, #64]
 365:Src/main.c    ****     if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 582              		.loc 1 365 5 is_stmt 1 view .LVU207
 365:Src/main.c    ****     if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 583              		.loc 1 365 34 is_stmt 0 view .LVU208
 584 0150 4FF08043 		mov	r3, #1073741824
 585 0154 1193     		str	r3, [sp, #68]
 366:Src/main.c    ****     {
 586              		.loc 1 366 5 is_stmt 1 view .LVU209
 366:Src/main.c    ****     {
 587              		.loc 1 366 9 is_stmt 0 view .LVU210
 588 0156 09AA     		add	r2, sp, #36
 589 0158 2146     		mov	r1, r4
 590 015a 2846     		mov	r0, r5
 591 015c FFF7FEFF 		bl	HAL_HRTIM_DeadTimeConfig
 592              	.LVL25:
 370:Src/main.c    ****     pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 593              		.loc 1 370 5 is_stmt 1 view .LVU211
 370:Src/main.c    ****     pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 594              		.loc 1 370 25 is_stmt 0 view .LVU212
 595 0160 0197     		str	r7, [sp, #4]
 371:Src/main.c    ****     pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 596              		.loc 1 371 5 is_stmt 1 view .LVU213
 371:Src/main.c    ****     pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 597              		.loc 1 371 26 is_stmt 0 view .LVU214
 598 0162 0423     		movs	r3, #4
 599 0164 0293     		str	r3, [sp, #8]
 372:Src/main.c    ****     pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 600              		.loc 1 372 5 is_stmt 1 view .LVU215
 372:Src/main.c    ****     pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 601              		.loc 1 372 28 is_stmt 0 view .LVU216
 602 0166 1023     		movs	r3, #16
 603 0168 0393     		str	r3, [sp, #12]
 373:Src/main.c    ****     pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 604              		.loc 1 373 5 is_stmt 1 view .LVU217
 373:Src/main.c    ****     pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 605              		.loc 1 373 25 is_stmt 0 view .LVU218
 606 016a 0494     		str	r4, [sp, #16]
 374:Src/main.c    ****     pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 607              		.loc 1 374 5 is_stmt 1 view .LVU219
 374:Src/main.c    ****     pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 608              		.loc 1 374 26 is_stmt 0 view .LVU220
 609 016c 0594     		str	r4, [sp, #20]
 375:Src/main.c    ****     pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 610              		.loc 1 375 5 is_stmt 1 view .LVU221
 375:Src/main.c    ****     pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 611              		.loc 1 375 27 is_stmt 0 view .LVU222
 612 016e 0694     		str	r4, [sp, #24]
 376:Src/main.c    ****     pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 613              		.loc 1 376 5 is_stmt 1 view .LVU223
 376:Src/main.c    ****     pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 614              		.loc 1 376 34 is_stmt 0 view .LVU224
 615 0170 0794     		str	r4, [sp, #28]
 377:Src/main.c    ****     if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutp
 616              		.loc 1 377 5 is_stmt 1 view .LVU225
 377:Src/main.c    ****     if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutp
 617              		.loc 1 377 38 is_stmt 0 view .LVU226
ARM GAS  /tmp/cc7cRapf.s 			page 24


 618 0172 0894     		str	r4, [sp, #32]
 378:Src/main.c    ****     {
 619              		.loc 1 378 5 is_stmt 1 view .LVU227
 378:Src/main.c    ****     {
 620              		.loc 1 378 9 is_stmt 0 view .LVU228
 621 0174 01AB     		add	r3, sp, #4
 622 0176 3246     		mov	r2, r6
 623 0178 2146     		mov	r1, r4
 624 017a 2846     		mov	r0, r5
 625 017c FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 626              	.LVL26:
 382:Src/main.c    ****     pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 627              		.loc 1 382 5 is_stmt 1 view .LVU229
 382:Src/main.c    ****     pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 628              		.loc 1 382 26 is_stmt 0 view .LVU230
 629 0180 0294     		str	r4, [sp, #8]
 383:Src/main.c    ****     if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutp
 630              		.loc 1 383 5 is_stmt 1 view .LVU231
 383:Src/main.c    ****     if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutp
 631              		.loc 1 383 28 is_stmt 0 view .LVU232
 632 0182 0394     		str	r4, [sp, #12]
 384:Src/main.c    ****     {
 633              		.loc 1 384 5 is_stmt 1 view .LVU233
 384:Src/main.c    ****     {
 634              		.loc 1 384 9 is_stmt 0 view .LVU234
 635 0184 01AB     		add	r3, sp, #4
 636 0186 3A46     		mov	r2, r7
 637 0188 2146     		mov	r1, r4
 638 018a 2846     		mov	r0, r5
 639 018c FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 640              	.LVL27:
 388:Src/main.c    ****     {
 641              		.loc 1 388 5 is_stmt 1 view .LVU235
 388:Src/main.c    ****     {
 642              		.loc 1 388 9 is_stmt 0 view .LVU236
 643 0190 2AAA     		add	r2, sp, #168
 644 0192 3146     		mov	r1, r6
 645 0194 2846     		mov	r0, r5
 646 0196 FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 647              	.LVL28:
 395:Src/main.c    **** }
 648              		.loc 1 395 5 is_stmt 1 view .LVU237
 649 019a 2846     		mov	r0, r5
 650 019c FFF7FEFF 		bl	HAL_HRTIM_MspPostInit
 651              	.LVL29:
 396:Src/main.c    **** 
 652              		.loc 1 396 1 is_stmt 0 view .LVU238
 653 01a0 30B0     		add	sp, sp, #192
 654              	.LCFI8:
 655              		.cfi_def_cfa_offset 32
 656              		@ sp needed
 657 01a2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 658              	.L12:
 659 01a6 00BF     		.align	2
 660              	.L11:
 661 01a8 00000000 		.word	hhrtim1
 662 01ac 00740140 		.word	1073837056
ARM GAS  /tmp/cc7cRapf.s 			page 25


 663              		.cfi_endproc
 664              	.LFE138:
 666              		.section	.text.MX_ADC1_Init,"ax",%progbits
 667              		.align	1
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	MX_ADC1_Init:
 674              	.LFB137:
 185:Src/main.c    **** 
 675              		.loc 1 185 1 is_stmt 1 view -0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 40
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 680              	.LCFI9:
 681              		.cfi_def_cfa_offset 20
 682              		.cfi_offset 4, -20
 683              		.cfi_offset 5, -16
 684              		.cfi_offset 6, -12
 685              		.cfi_offset 7, -8
 686              		.cfi_offset 14, -4
 687 0002 8BB0     		sub	sp, sp, #44
 688              	.LCFI10:
 689              		.cfi_def_cfa_offset 64
 191:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 690              		.loc 1 191 5 view .LVU240
 191:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 691              		.loc 1 191 26 is_stmt 0 view .LVU241
 692 0004 0025     		movs	r5, #0
 693 0006 0795     		str	r5, [sp, #28]
 694 0008 0895     		str	r5, [sp, #32]
 695 000a 0995     		str	r5, [sp, #36]
 192:Src/main.c    **** 
 696              		.loc 1 192 5 is_stmt 1 view .LVU242
 192:Src/main.c    **** 
 697              		.loc 1 192 28 is_stmt 0 view .LVU243
 698 000c 0195     		str	r5, [sp, #4]
 699 000e 0295     		str	r5, [sp, #8]
 700 0010 0395     		str	r5, [sp, #12]
 701 0012 0495     		str	r5, [sp, #16]
 702 0014 0595     		str	r5, [sp, #20]
 703 0016 0695     		str	r5, [sp, #24]
 199:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 704              		.loc 1 199 5 is_stmt 1 view .LVU244
 199:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 705              		.loc 1 199 20 is_stmt 0 view .LVU245
 706 0018 1B4C     		ldr	r4, .L15
 707 001a 4FF0A043 		mov	r3, #1342177280
 708 001e 2360     		str	r3, [r4]
 200:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 709              		.loc 1 200 5 is_stmt 1 view .LVU246
 200:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 710              		.loc 1 200 31 is_stmt 0 view .LVU247
 711 0020 4FF40033 		mov	r3, #131072
 712 0024 6360     		str	r3, [r4, #4]
ARM GAS  /tmp/cc7cRapf.s 			page 26


 201:Src/main.c    ****     hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 713              		.loc 1 201 5 is_stmt 1 view .LVU248
 201:Src/main.c    ****     hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 714              		.loc 1 201 27 is_stmt 0 view .LVU249
 715 0026 A560     		str	r5, [r4, #8]
 202:Src/main.c    ****     hadc1.Init.ContinuousConvMode = DISABLE;
 716              		.loc 1 202 5 is_stmt 1 view .LVU250
 202:Src/main.c    ****     hadc1.Init.ContinuousConvMode = DISABLE;
 717              		.loc 1 202 29 is_stmt 0 view .LVU251
 718 0028 0126     		movs	r6, #1
 719 002a 2661     		str	r6, [r4, #16]
 203:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 720              		.loc 1 203 5 is_stmt 1 view .LVU252
 203:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 721              		.loc 1 203 35 is_stmt 0 view .LVU253
 722 002c E561     		str	r5, [r4, #28]
 204:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 723              		.loc 1 204 5 is_stmt 1 view .LVU254
 204:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 724              		.loc 1 204 38 is_stmt 0 view .LVU255
 725 002e 6562     		str	r5, [r4, #36]
 205:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 726              		.loc 1 205 5 is_stmt 1 view .LVU256
 205:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 727              		.loc 1 205 37 is_stmt 0 view .LVU257
 728 0030 4FF48063 		mov	r3, #1024
 729 0034 2363     		str	r3, [r4, #48]
 206:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 730              		.loc 1 206 5 is_stmt 1 view .LVU258
 206:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 731              		.loc 1 206 33 is_stmt 0 view .LVU259
 732 0036 4FF4E073 		mov	r3, #448
 733 003a E362     		str	r3, [r4, #44]
 207:Src/main.c    ****     hadc1.Init.NbrOfConversion = 2;
 734              		.loc 1 207 5 is_stmt 1 view .LVU260
 207:Src/main.c    ****     hadc1.Init.NbrOfConversion = 2;
 735              		.loc 1 207 26 is_stmt 0 view .LVU261
 736 003c E560     		str	r5, [r4, #12]
 208:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 737              		.loc 1 208 5 is_stmt 1 view .LVU262
 208:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 738              		.loc 1 208 32 is_stmt 0 view .LVU263
 739 003e 0227     		movs	r7, #2
 740 0040 2762     		str	r7, [r4, #32]
 209:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 741              		.loc 1 209 5 is_stmt 1 view .LVU264
 209:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 742              		.loc 1 209 38 is_stmt 0 view .LVU265
 743 0042 6663     		str	r6, [r4, #52]
 210:Src/main.c    ****     hadc1.Init.LowPowerAutoWait = DISABLE;
 744              		.loc 1 210 5 is_stmt 1 view .LVU266
 210:Src/main.c    ****     hadc1.Init.LowPowerAutoWait = DISABLE;
 745              		.loc 1 210 29 is_stmt 0 view .LVU267
 746 0044 0823     		movs	r3, #8
 747 0046 6361     		str	r3, [r4, #20]
 211:Src/main.c    ****     hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 748              		.loc 1 211 5 is_stmt 1 view .LVU268
ARM GAS  /tmp/cc7cRapf.s 			page 27


 211:Src/main.c    ****     hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 749              		.loc 1 211 33 is_stmt 0 view .LVU269
 750 0048 A561     		str	r5, [r4, #24]
 212:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 751              		.loc 1 212 5 is_stmt 1 view .LVU270
 212:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 752              		.loc 1 212 24 is_stmt 0 view .LVU271
 753 004a A563     		str	r5, [r4, #56]
 213:Src/main.c    ****     {
 754              		.loc 1 213 5 is_stmt 1 view .LVU272
 213:Src/main.c    ****     {
 755              		.loc 1 213 9 is_stmt 0 view .LVU273
 756 004c 2046     		mov	r0, r4
 757 004e FFF7FEFF 		bl	HAL_ADC_Init
 758              	.LVL30:
 219:Src/main.c    ****     if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 759              		.loc 1 219 5 is_stmt 1 view .LVU274
 219:Src/main.c    ****     if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 760              		.loc 1 219 20 is_stmt 0 view .LVU275
 761 0052 0795     		str	r5, [sp, #28]
 220:Src/main.c    ****     {
 762              		.loc 1 220 5 is_stmt 1 view .LVU276
 220:Src/main.c    ****     {
 763              		.loc 1 220 9 is_stmt 0 view .LVU277
 764 0054 07A9     		add	r1, sp, #28
 765 0056 2046     		mov	r0, r4
 766 0058 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 767              	.LVL31:
 226:Src/main.c    ****     sConfig.Rank = ADC_REGULAR_RANK_1;
 768              		.loc 1 226 5 is_stmt 1 view .LVU278
 226:Src/main.c    ****     sConfig.Rank = ADC_REGULAR_RANK_1;
 769              		.loc 1 226 21 is_stmt 0 view .LVU279
 770 005c 0196     		str	r6, [sp, #4]
 227:Src/main.c    ****     sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 771              		.loc 1 227 5 is_stmt 1 view .LVU280
 227:Src/main.c    ****     sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 772              		.loc 1 227 18 is_stmt 0 view .LVU281
 773 005e 0296     		str	r6, [sp, #8]
 228:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 774              		.loc 1 228 5 is_stmt 1 view .LVU282
 228:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 775              		.loc 1 228 24 is_stmt 0 view .LVU283
 776 0060 0496     		str	r6, [sp, #16]
 229:Src/main.c    ****     sConfig.OffsetNumber = ADC_OFFSET_NONE;
 777              		.loc 1 229 5 is_stmt 1 view .LVU284
 229:Src/main.c    ****     sConfig.OffsetNumber = ADC_OFFSET_NONE;
 778              		.loc 1 229 26 is_stmt 0 view .LVU285
 779 0062 0423     		movs	r3, #4
 780 0064 0393     		str	r3, [sp, #12]
 230:Src/main.c    ****     sConfig.Offset = 0;
 781              		.loc 1 230 5 is_stmt 1 view .LVU286
 230:Src/main.c    ****     sConfig.Offset = 0;
 782              		.loc 1 230 26 is_stmt 0 view .LVU287
 783 0066 0595     		str	r5, [sp, #20]
 231:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 784              		.loc 1 231 5 is_stmt 1 view .LVU288
 231:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/cc7cRapf.s 			page 28


 785              		.loc 1 231 20 is_stmt 0 view .LVU289
 786 0068 0695     		str	r5, [sp, #24]
 232:Src/main.c    ****     {
 787              		.loc 1 232 5 is_stmt 1 view .LVU290
 232:Src/main.c    ****     {
 788              		.loc 1 232 9 is_stmt 0 view .LVU291
 789 006a 0DEB0301 		add	r1, sp, r3
 790 006e 2046     		mov	r0, r4
 791 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 792              	.LVL32:
 238:Src/main.c    ****     sConfig.Rank = ADC_REGULAR_RANK_2;
 793              		.loc 1 238 5 is_stmt 1 view .LVU292
 238:Src/main.c    ****     sConfig.Rank = ADC_REGULAR_RANK_2;
 794              		.loc 1 238 21 is_stmt 0 view .LVU293
 795 0074 0323     		movs	r3, #3
 796 0076 0193     		str	r3, [sp, #4]
 239:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 797              		.loc 1 239 5 is_stmt 1 view .LVU294
 239:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 798              		.loc 1 239 18 is_stmt 0 view .LVU295
 799 0078 0297     		str	r7, [sp, #8]
 240:Src/main.c    ****     {
 800              		.loc 1 240 5 is_stmt 1 view .LVU296
 240:Src/main.c    ****     {
 801              		.loc 1 240 9 is_stmt 0 view .LVU297
 802 007a 01A9     		add	r1, sp, #4
 803 007c 2046     		mov	r0, r4
 804 007e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 805              	.LVL33:
 247:Src/main.c    **** 
 806              		.loc 1 247 1 view .LVU298
 807 0082 0BB0     		add	sp, sp, #44
 808              	.LCFI11:
 809              		.cfi_def_cfa_offset 20
 810              		@ sp needed
 811 0084 F0BD     		pop	{r4, r5, r6, r7, pc}
 812              	.L16:
 813 0086 00BF     		.align	2
 814              	.L15:
 815 0088 00000000 		.word	hadc1
 816              		.cfi_endproc
 817              	.LFE137:
 819              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 820              		.align	1
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 824              		.fpu fpv4-sp-d16
 826              	MX_USART1_UART_Init:
 827              	.LFB139:
 404:Src/main.c    **** 
 828              		.loc 1 404 1 is_stmt 1 view -0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832 0000 08B5     		push	{r3, lr}
 833              	.LCFI12:
ARM GAS  /tmp/cc7cRapf.s 			page 29


 834              		.cfi_def_cfa_offset 8
 835              		.cfi_offset 3, -8
 836              		.cfi_offset 14, -4
 413:Src/main.c    ****     huart1.Init.BaudRate = 38400;
 837              		.loc 1 413 5 view .LVU300
 413:Src/main.c    ****     huart1.Init.BaudRate = 38400;
 838              		.loc 1 413 21 is_stmt 0 view .LVU301
 839 0002 0948     		ldr	r0, .L19
 840 0004 094B     		ldr	r3, .L19+4
 841 0006 0360     		str	r3, [r0]
 414:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 842              		.loc 1 414 5 is_stmt 1 view .LVU302
 414:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 843              		.loc 1 414 26 is_stmt 0 view .LVU303
 844 0008 4FF41643 		mov	r3, #38400
 845 000c 4360     		str	r3, [r0, #4]
 415:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 846              		.loc 1 415 5 is_stmt 1 view .LVU304
 415:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 847              		.loc 1 415 28 is_stmt 0 view .LVU305
 848 000e 0023     		movs	r3, #0
 849 0010 8360     		str	r3, [r0, #8]
 416:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 850              		.loc 1 416 5 is_stmt 1 view .LVU306
 416:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 851              		.loc 1 416 26 is_stmt 0 view .LVU307
 852 0012 C360     		str	r3, [r0, #12]
 417:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 853              		.loc 1 417 5 is_stmt 1 view .LVU308
 417:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 854              		.loc 1 417 24 is_stmt 0 view .LVU309
 855 0014 0361     		str	r3, [r0, #16]
 418:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 856              		.loc 1 418 5 is_stmt 1 view .LVU310
 418:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 857              		.loc 1 418 22 is_stmt 0 view .LVU311
 858 0016 0C22     		movs	r2, #12
 859 0018 4261     		str	r2, [r0, #20]
 419:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 860              		.loc 1 419 5 is_stmt 1 view .LVU312
 419:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 861              		.loc 1 419 27 is_stmt 0 view .LVU313
 862 001a 8361     		str	r3, [r0, #24]
 420:Src/main.c    ****     huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 863              		.loc 1 420 5 is_stmt 1 view .LVU314
 420:Src/main.c    ****     huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 864              		.loc 1 420 30 is_stmt 0 view .LVU315
 865 001c C361     		str	r3, [r0, #28]
 421:Src/main.c    ****     huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 866              		.loc 1 421 5 is_stmt 1 view .LVU316
 421:Src/main.c    ****     huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 867              		.loc 1 421 32 is_stmt 0 view .LVU317
 868 001e 0362     		str	r3, [r0, #32]
 422:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 869              		.loc 1 422 5 is_stmt 1 view .LVU318
 422:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 870              		.loc 1 422 40 is_stmt 0 view .LVU319
ARM GAS  /tmp/cc7cRapf.s 			page 30


 871 0020 4362     		str	r3, [r0, #36]
 423:Src/main.c    ****     {
 872              		.loc 1 423 5 is_stmt 1 view .LVU320
 423:Src/main.c    ****     {
 873              		.loc 1 423 9 is_stmt 0 view .LVU321
 874 0022 FFF7FEFF 		bl	HAL_UART_Init
 875              	.LVL34:
 430:Src/main.c    **** 
 876              		.loc 1 430 1 view .LVU322
 877 0026 08BD     		pop	{r3, pc}
 878              	.L20:
 879              		.align	2
 880              	.L19:
 881 0028 00000000 		.word	huart1
 882 002c 00380140 		.word	1073821696
 883              		.cfi_endproc
 884              	.LFE139:
 886              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 887              		.align	1
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 891              		.fpu fpv4-sp-d16
 893              	MX_USART3_UART_Init:
 894              	.LFB140:
 438:Src/main.c    **** 
 895              		.loc 1 438 1 is_stmt 1 view -0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899 0000 08B5     		push	{r3, lr}
 900              	.LCFI13:
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 3, -8
 903              		.cfi_offset 14, -4
 447:Src/main.c    ****     huart3.Init.BaudRate = 9600;
 904              		.loc 1 447 5 view .LVU324
 447:Src/main.c    ****     huart3.Init.BaudRate = 9600;
 905              		.loc 1 447 21 is_stmt 0 view .LVU325
 906 0002 0B48     		ldr	r0, .L23
 907 0004 0B4B     		ldr	r3, .L23+4
 908 0006 0360     		str	r3, [r0]
 448:Src/main.c    ****     huart3.Init.WordLength = UART_WORDLENGTH_8B;
 909              		.loc 1 448 5 is_stmt 1 view .LVU326
 448:Src/main.c    ****     huart3.Init.WordLength = UART_WORDLENGTH_8B;
 910              		.loc 1 448 26 is_stmt 0 view .LVU327
 911 0008 4FF41653 		mov	r3, #9600
 912 000c 4360     		str	r3, [r0, #4]
 449:Src/main.c    ****     huart3.Init.StopBits = UART_STOPBITS_1;
 913              		.loc 1 449 5 is_stmt 1 view .LVU328
 449:Src/main.c    ****     huart3.Init.StopBits = UART_STOPBITS_1;
 914              		.loc 1 449 28 is_stmt 0 view .LVU329
 915 000e 0023     		movs	r3, #0
 916 0010 8360     		str	r3, [r0, #8]
 450:Src/main.c    ****     huart3.Init.Parity = UART_PARITY_NONE;
 917              		.loc 1 450 5 is_stmt 1 view .LVU330
 450:Src/main.c    ****     huart3.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/cc7cRapf.s 			page 31


 918              		.loc 1 450 26 is_stmt 0 view .LVU331
 919 0012 C360     		str	r3, [r0, #12]
 451:Src/main.c    ****     huart3.Init.Mode = UART_MODE_TX_RX;
 920              		.loc 1 451 5 is_stmt 1 view .LVU332
 451:Src/main.c    ****     huart3.Init.Mode = UART_MODE_TX_RX;
 921              		.loc 1 451 24 is_stmt 0 view .LVU333
 922 0014 0361     		str	r3, [r0, #16]
 452:Src/main.c    ****     huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 923              		.loc 1 452 5 is_stmt 1 view .LVU334
 452:Src/main.c    ****     huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 924              		.loc 1 452 22 is_stmt 0 view .LVU335
 925 0016 0C22     		movs	r2, #12
 926 0018 4261     		str	r2, [r0, #20]
 453:Src/main.c    ****     huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 927              		.loc 1 453 5 is_stmt 1 view .LVU336
 453:Src/main.c    ****     huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 928              		.loc 1 453 27 is_stmt 0 view .LVU337
 929 001a 8361     		str	r3, [r0, #24]
 454:Src/main.c    ****     huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 930              		.loc 1 454 5 is_stmt 1 view .LVU338
 454:Src/main.c    ****     huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 931              		.loc 1 454 30 is_stmt 0 view .LVU339
 932 001c C361     		str	r3, [r0, #28]
 455:Src/main.c    ****     huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 933              		.loc 1 455 5 is_stmt 1 view .LVU340
 455:Src/main.c    ****     huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 934              		.loc 1 455 32 is_stmt 0 view .LVU341
 935 001e 0362     		str	r3, [r0, #32]
 456:Src/main.c    ****     if (HAL_UART_Init(&huart3) != HAL_OK)
 936              		.loc 1 456 5 is_stmt 1 view .LVU342
 456:Src/main.c    ****     if (HAL_UART_Init(&huart3) != HAL_OK)
 937              		.loc 1 456 40 is_stmt 0 view .LVU343
 938 0020 4362     		str	r3, [r0, #36]
 457:Src/main.c    ****     {
 939              		.loc 1 457 5 is_stmt 1 view .LVU344
 457:Src/main.c    ****     {
 940              		.loc 1 457 9 is_stmt 0 view .LVU345
 941 0022 FFF7FEFF 		bl	HAL_UART_Init
 942              	.LVL35:
 463:Src/main.c    ****     /* USER CODE END USART3_Init 2 */
 943              		.loc 1 463 5 is_stmt 1 view .LVU346
 944 0026 2720     		movs	r0, #39
 945 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 946              	.LVL36:
 465:Src/main.c    **** 
 947              		.loc 1 465 1 is_stmt 0 view .LVU347
 948 002c 08BD     		pop	{r3, pc}
 949              	.L24:
 950 002e 00BF     		.align	2
 951              	.L23:
 952 0030 00000000 		.word	huart3
 953 0034 00480040 		.word	1073760256
 954              		.cfi_endproc
 955              	.LFE140:
 957              		.section	.text.SystemClock_Config,"ax",%progbits
 958              		.align	1
 959              		.global	SystemClock_Config
ARM GAS  /tmp/cc7cRapf.s 			page 32


 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu fpv4-sp-d16
 965              	SystemClock_Config:
 966              	.LFB136:
 140:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 967              		.loc 1 140 1 is_stmt 1 view -0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 88
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971 0000 30B5     		push	{r4, r5, lr}
 972              	.LCFI14:
 973              		.cfi_def_cfa_offset 12
 974              		.cfi_offset 4, -12
 975              		.cfi_offset 5, -8
 976              		.cfi_offset 14, -4
 977 0002 97B0     		sub	sp, sp, #92
 978              	.LCFI15:
 979              		.cfi_def_cfa_offset 104
 141:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 980              		.loc 1 141 5 view .LVU349
 141:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 981              		.loc 1 141 24 is_stmt 0 view .LVU350
 982 0004 0024     		movs	r4, #0
 983 0006 0F94     		str	r4, [sp, #60]
 984 0008 1194     		str	r4, [sp, #68]
 985 000a 1294     		str	r4, [sp, #72]
 142:Src/main.c    ****     RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 986              		.loc 1 142 5 is_stmt 1 view .LVU351
 142:Src/main.c    ****     RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 987              		.loc 1 142 24 is_stmt 0 view .LVU352
 988 000c 0794     		str	r4, [sp, #28]
 989 000e 0894     		str	r4, [sp, #32]
 990 0010 0994     		str	r4, [sp, #36]
 991 0012 0A94     		str	r4, [sp, #40]
 992 0014 0B94     		str	r4, [sp, #44]
 143:Src/main.c    **** 
 993              		.loc 1 143 5 is_stmt 1 view .LVU353
 143:Src/main.c    **** 
 994              		.loc 1 143 30 is_stmt 0 view .LVU354
 995 0016 0094     		str	r4, [sp]
 996 0018 0194     		str	r4, [sp, #4]
 997 001a 0294     		str	r4, [sp, #8]
 998 001c 0394     		str	r4, [sp, #12]
 999 001e 0494     		str	r4, [sp, #16]
 1000 0020 0594     		str	r4, [sp, #20]
 1001 0022 0694     		str	r4, [sp, #24]
 147:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1002              		.loc 1 147 5 is_stmt 1 view .LVU355
 147:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1003              		.loc 1 147 38 is_stmt 0 view .LVU356
 1004 0024 0122     		movs	r2, #1
 1005 0026 0C92     		str	r2, [sp, #48]
 148:Src/main.c    ****     RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1006              		.loc 1 148 5 is_stmt 1 view .LVU357
 148:Src/main.c    ****     RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
ARM GAS  /tmp/cc7cRapf.s 			page 33


 1007              		.loc 1 148 32 is_stmt 0 view .LVU358
 1008 0028 4FF48033 		mov	r3, #65536
 1009 002c 0D93     		str	r3, [sp, #52]
 149:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1010              		.loc 1 149 5 is_stmt 1 view .LVU359
 149:Src/main.c    ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1011              		.loc 1 149 38 is_stmt 0 view .LVU360
 1012 002e 0E94     		str	r4, [sp, #56]
 150:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1013              		.loc 1 150 5 is_stmt 1 view .LVU361
 150:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1014              		.loc 1 150 32 is_stmt 0 view .LVU362
 1015 0030 1092     		str	r2, [sp, #64]
 151:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1016              		.loc 1 151 5 is_stmt 1 view .LVU363
 151:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1017              		.loc 1 151 36 is_stmt 0 view .LVU364
 1018 0032 0225     		movs	r5, #2
 1019 0034 1395     		str	r5, [sp, #76]
 152:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1020              		.loc 1 152 5 is_stmt 1 view .LVU365
 152:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1021              		.loc 1 152 37 is_stmt 0 view .LVU366
 1022 0036 1493     		str	r3, [sp, #80]
 153:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1023              		.loc 1 153 5 is_stmt 1 view .LVU367
 153:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1024              		.loc 1 153 34 is_stmt 0 view .LVU368
 1025 0038 4FF4E013 		mov	r3, #1835008
 1026 003c 1593     		str	r3, [sp, #84]
 154:Src/main.c    ****     {
 1027              		.loc 1 154 5 is_stmt 1 view .LVU369
 154:Src/main.c    ****     {
 1028              		.loc 1 154 9 is_stmt 0 view .LVU370
 1029 003e 0CA8     		add	r0, sp, #48
 1030 0040 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1031              	.LVL37:
 160:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1032              		.loc 1 160 5 is_stmt 1 view .LVU371
 160:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1033              		.loc 1 160 33 is_stmt 0 view .LVU372
 1034 0044 0F23     		movs	r3, #15
 1035 0046 0793     		str	r3, [sp, #28]
 161:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1036              		.loc 1 161 5 is_stmt 1 view .LVU373
 161:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1037              		.loc 1 161 36 is_stmt 0 view .LVU374
 1038 0048 0895     		str	r5, [sp, #32]
 162:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1039              		.loc 1 162 5 is_stmt 1 view .LVU375
 162:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1040              		.loc 1 162 37 is_stmt 0 view .LVU376
 1041 004a 0994     		str	r4, [sp, #36]
 163:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1042              		.loc 1 163 5 is_stmt 1 view .LVU377
 163:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1043              		.loc 1 163 38 is_stmt 0 view .LVU378
ARM GAS  /tmp/cc7cRapf.s 			page 34


 1044 004c 4FF48063 		mov	r3, #1024
 1045 0050 0A93     		str	r3, [sp, #40]
 164:Src/main.c    **** 
 1046              		.loc 1 164 5 is_stmt 1 view .LVU379
 164:Src/main.c    **** 
 1047              		.loc 1 164 38 is_stmt 0 view .LVU380
 1048 0052 0B94     		str	r4, [sp, #44]
 166:Src/main.c    ****     {
 1049              		.loc 1 166 5 is_stmt 1 view .LVU381
 166:Src/main.c    ****     {
 1050              		.loc 1 166 9 is_stmt 0 view .LVU382
 1051 0054 2946     		mov	r1, r5
 1052 0056 07A8     		add	r0, sp, #28
 1053 0058 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1054              	.LVL38:
 170:Src/main.c    ****     PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 1055              		.loc 1 170 5 is_stmt 1 view .LVU383
 170:Src/main.c    ****     PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 1056              		.loc 1 170 40 is_stmt 0 view .LVU384
 1057 005c 44F20103 		movw	r3, #16385
 1058 0060 0093     		str	r3, [sp]
 171:Src/main.c    ****     PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 1059              		.loc 1 171 5 is_stmt 1 view .LVU385
 171:Src/main.c    ****     PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 1060              		.loc 1 171 40 is_stmt 0 view .LVU386
 1061 0062 0294     		str	r4, [sp, #8]
 172:Src/main.c    ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1062              		.loc 1 172 5 is_stmt 1 view .LVU387
 172:Src/main.c    ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1063              		.loc 1 172 40 is_stmt 0 view .LVU388
 1064 0064 4FF48053 		mov	r3, #4096
 1065 0068 0693     		str	r3, [sp, #24]
 173:Src/main.c    ****     {
 1066              		.loc 1 173 5 is_stmt 1 view .LVU389
 173:Src/main.c    ****     {
 1067              		.loc 1 173 9 is_stmt 0 view .LVU390
 1068 006a 6846     		mov	r0, sp
 1069 006c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1070              	.LVL39:
 177:Src/main.c    **** 
 1071              		.loc 1 177 1 view .LVU391
 1072 0070 17B0     		add	sp, sp, #92
 1073              	.LCFI16:
 1074              		.cfi_def_cfa_offset 12
 1075              		@ sp needed
 1076 0072 30BD     		pop	{r4, r5, pc}
 1077              		.cfi_endproc
 1078              	.LFE136:
 1080              		.section	.text.main,"ax",%progbits
 1081              		.align	1
 1082              		.global	main
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu fpv4-sp-d16
 1088              	main:
 1089              	.LFB135:
ARM GAS  /tmp/cc7cRapf.s 			page 35


  81:Src/main.c    ****     /* USER CODE BEGIN 1 */
 1090              		.loc 1 81 1 is_stmt 1 view -0
 1091              		.cfi_startproc
 1092              		@ Volatile: function does not return.
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095 0000 08B5     		push	{r3, lr}
 1096              	.LCFI17:
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 3, -8
 1099              		.cfi_offset 14, -4
  89:Src/main.c    **** 
 1100              		.loc 1 89 5 view .LVU393
 1101 0002 FFF7FEFF 		bl	HAL_Init
 1102              	.LVL40:
  96:Src/main.c    **** 
 1103              		.loc 1 96 5 view .LVU394
 1104 0006 FFF7FEFF 		bl	SystemClock_Config
 1105              	.LVL41:
 103:Src/main.c    ****     MX_DMA_Init();
 1106              		.loc 1 103 5 view .LVU395
 1107 000a FFF7FEFF 		bl	MX_GPIO_Init
 1108              	.LVL42:
 104:Src/main.c    ****     MX_HRTIM1_Init();
 1109              		.loc 1 104 5 view .LVU396
 1110 000e FFF7FEFF 		bl	MX_DMA_Init
 1111              	.LVL43:
 105:Src/main.c    ****     MX_ADC1_Init();
 1112              		.loc 1 105 5 view .LVU397
 1113 0012 FFF7FEFF 		bl	MX_HRTIM1_Init
 1114              	.LVL44:
 106:Src/main.c    ****     MX_USART1_UART_Init();
 1115              		.loc 1 106 5 view .LVU398
 1116 0016 FFF7FEFF 		bl	MX_ADC1_Init
 1117              	.LVL45:
 107:Src/main.c    ****     MX_USART3_UART_Init();
 1118              		.loc 1 107 5 view .LVU399
 1119 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 1120              	.LVL46:
 108:Src/main.c    **** 
 1121              		.loc 1 108 5 view .LVU400
 1122 001e FFF7FEFF 		bl	MX_USART3_UART_Init
 1123              	.LVL47:
 111:Src/main.c    ****     EepromEmulator_Init();  // Initialize eeprom emulator.
 1124              		.loc 1 111 5 view .LVU401
 1125 0022 FFF7FEFF 		bl	Cli_Init
 1126              	.LVL48:
 112:Src/main.c    **** 
 1127              		.loc 1 112 5 view .LVU402
 1128 0026 FFF7FEFF 		bl	EepromEmulator_Init
 1129              	.LVL49:
 115:Src/main.c    ****     HAL_GPIO_WritePin(CONTACTOR_CTRL_GPIO_Port, CONTACTOR_CTRL_Pin, GPIO_PIN_RESET);
 1130              		.loc 1 115 5 view .LVU403
 1131 002a E120     		movs	r0, #225
 1132 002c FFF7FEFF 		bl	HAL_Delay
 1133              	.LVL50:
 116:Src/main.c    **** 
ARM GAS  /tmp/cc7cRapf.s 			page 36


 1134              		.loc 1 116 5 view .LVU404
 1135 0030 0022     		movs	r2, #0
 1136 0032 2021     		movs	r1, #32
 1137 0034 0548     		ldr	r0, .L30
 1138 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1139              	.LVL51:
 118:Src/main.c    ****     Cli_Start();            // Start command line interface.
 1140              		.loc 1 118 5 view .LVU405
 1141 003a FFF7FEFF 		bl	Lattice_Start
 1142              	.LVL52:
 119:Src/main.c    ****     /* USER CODE END 2 */
 1143              		.loc 1 119 5 view .LVU406
 1144 003e FFF7FEFF 		bl	Cli_Start
 1145              	.LVL53:
 1146              	.L28:
 124:Src/main.c    ****     {
 1147              		.loc 1 124 5 discriminator 1 view .LVU407
 126:Src/main.c    ****         Lattice_Execute();
 1148              		.loc 1 126 9 discriminator 1 view .LVU408
 1149 0042 FFF7FEFF 		bl	Cli_Execute
 1150              	.LVL54:
 127:Src/main.c    ****         /* USER CODE END WHILE */
 1151              		.loc 1 127 9 discriminator 1 view .LVU409
 1152 0046 FFF7FEFF 		bl	Lattice_Execute
 1153              	.LVL55:
 124:Src/main.c    ****     {
 1154              		.loc 1 124 11 discriminator 1 view .LVU410
 1155 004a FAE7     		b	.L28
 1156              	.L31:
 1157              		.align	2
 1158              	.L30:
 1159 004c 00040048 		.word	1207960576
 1160              		.cfi_endproc
 1161              	.LFE135:
 1163              		.section	.text.Error_Handler,"ax",%progbits
 1164              		.align	1
 1165              		.global	Error_Handler
 1166              		.syntax unified
 1167              		.thumb
 1168              		.thumb_func
 1169              		.fpu fpv4-sp-d16
 1171              	Error_Handler:
 1172              	.LFB143:
 533:Src/main.c    **** 
 534:Src/main.c    **** /* USER CODE BEGIN 4 */
 535:Src/main.c    **** 
 536:Src/main.c    **** /* USER CODE END 4 */
 537:Src/main.c    **** 
 538:Src/main.c    **** /**
 539:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 540:Src/main.c    ****   * @retval None
 541:Src/main.c    ****   */
 542:Src/main.c    **** void Error_Handler(void)
 543:Src/main.c    **** {
 1173              		.loc 1 543 1 view -0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc7cRapf.s 			page 37


 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177              		@ link register save eliminated.
 544:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
 545:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
 546:Src/main.c    **** 
 547:Src/main.c    ****     /* USER CODE END Error_Handler_Debug */
 548:Src/main.c    **** }
 1178              		.loc 1 548 1 view .LVU412
 1179 0000 7047     		bx	lr
 1180              		.cfi_endproc
 1181              	.LFE143:
 1183              		.comm	huart3,112,4
 1184              		.comm	huart1,112,4
 1185              		.comm	hhrtim1,220,4
 1186              		.comm	hdma_adc1,68,4
 1187              		.comm	hadc1,84,4
 1188              		.text
 1189              	.Letext0:
 1190              		.file 2 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/machin
 1191              		.file 3 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/_s
 1192              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1193              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 1194              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f334x8.h"
 1195              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 1196              		.file 8 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/
 1197              		.file 9 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/_t
 1198              		.file 10 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/r
 1199              		.file 11 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys/l
 1200              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1201              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1202              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1203              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1204              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1205              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 1206              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 1207              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_hrtim.h"
 1208              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1209              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 1210              		.file 22 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/math.
 1211              		.file 23 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 1212              		.file 24 "Inc/main.h"
 1213              		.file 25 "Inc/cli.h"
 1214              		.file 26 "Inc/eeprom_emulator.h"
 1215              		.file 27 "Inc/lattice.h"
 1216              		.file 28 "<built-in>"
ARM GAS  /tmp/cc7cRapf.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc7cRapf.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc7cRapf.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc7cRapf.s:209    .text.MX_GPIO_Init:00000000000000d8 $d
     /tmp/cc7cRapf.s:217    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc7cRapf.s:223    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc7cRapf.s:271    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc7cRapf.s:276    .text.MX_HRTIM1_Init:0000000000000000 $t
     /tmp/cc7cRapf.s:282    .text.MX_HRTIM1_Init:0000000000000000 MX_HRTIM1_Init
     /tmp/cc7cRapf.s:661    .text.MX_HRTIM1_Init:00000000000001a8 $d
                            *COM*:00000000000000dc hhrtim1
     /tmp/cc7cRapf.s:667    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc7cRapf.s:673    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc7cRapf.s:815    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000054 hadc1
     /tmp/cc7cRapf.s:820    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc7cRapf.s:826    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc7cRapf.s:881    .text.MX_USART1_UART_Init:0000000000000028 $d
                            *COM*:0000000000000070 huart1
     /tmp/cc7cRapf.s:887    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cc7cRapf.s:893    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cc7cRapf.s:952    .text.MX_USART3_UART_Init:0000000000000030 $d
                            *COM*:0000000000000070 huart3
     /tmp/cc7cRapf.s:958    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc7cRapf.s:965    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc7cRapf.s:1081   .text.main:0000000000000000 $t
     /tmp/cc7cRapf.s:1088   .text.main:0000000000000000 main
     /tmp/cc7cRapf.s:1159   .text.main:000000000000004c $d
     /tmp/cc7cRapf.s:1164   .text.Error_Handler:0000000000000000 $t
     /tmp/cc7cRapf.s:1171   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000044 hdma_adc1

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
memset
HAL_HRTIM_Init
HAL_HRTIM_DLLCalibrationStart
HAL_HRTIM_PollForDLLCalibration
HAL_HRTIM_ADCTriggerConfig
HAL_HRTIM_TimeBaseConfig
HAL_HRTIM_WaveformTimerConfig
HAL_HRTIM_WaveformCompareConfig
HAL_HRTIM_DeadTimeConfig
HAL_HRTIM_WaveformOutputConfig
HAL_HRTIM_MspPostInit
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
ARM GAS  /tmp/cc7cRapf.s 			page 39


Cli_Init
EepromEmulator_Init
HAL_Delay
Lattice_Start
Cli_Start
Cli_Execute
Lattice_Execute
