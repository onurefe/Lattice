ARM GAS  /tmp/ccIlGWJH.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB134:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "lattice.h"
  24:Src/main.c    **** #include "synchronous_rectifier.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccIlGWJH.s 			page 2


  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** ADC_HandleTypeDef hadc1;
  48:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  49:Src/main.c    **** 
  50:Src/main.c    **** HRTIM_HandleTypeDef hhrtim1;
  51:Src/main.c    **** 
  52:Src/main.c    **** TIM_HandleTypeDef htim3;
  53:Src/main.c    **** 
  54:Src/main.c    **** UART_HandleTypeDef huart1;
  55:Src/main.c    **** UART_HandleTypeDef huart3;
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PV */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  62:Src/main.c    **** void SystemClock_Config(void);
  63:Src/main.c    **** static void MX_GPIO_Init(void);
  64:Src/main.c    **** static void MX_DMA_Init(void);
  65:Src/main.c    **** static void MX_HRTIM1_Init(void);
  66:Src/main.c    **** static void MX_TIM3_Init(void);
  67:Src/main.c    **** static void MX_ADC1_Init(void);
  68:Src/main.c    **** static void MX_USART1_UART_Init(void);
  69:Src/main.c    **** static void MX_USART3_UART_Init(void);
  70:Src/main.c    **** /* USER CODE BEGIN PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PFP */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  75:Src/main.c    **** /* USER CODE BEGIN 0 */
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END 0 */
  78:Src/main.c    **** 
  79:Src/main.c    **** /**
  80:Src/main.c    ****   * @brief  The application entry point.
  81:Src/main.c    ****   * @retval int
  82:Src/main.c    ****   */
  83:Src/main.c    **** int main(void)
  84:Src/main.c    **** {
  85:Src/main.c    ****   /* USER CODE BEGIN 1 */
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE END 1 */
  88:Src/main.c    **** 
ARM GAS  /tmp/ccIlGWJH.s 			page 3


  89:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  92:Src/main.c    ****   HAL_Init();
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE BEGIN Init */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE END Init */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Configure the system clock */
  99:Src/main.c    ****   SystemClock_Config();
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END SysInit */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Initialize all configured peripherals */
 106:Src/main.c    ****   MX_GPIO_Init();
 107:Src/main.c    ****   MX_DMA_Init();
 108:Src/main.c    ****   MX_HRTIM1_Init();
 109:Src/main.c    ****   MX_TIM3_Init();
 110:Src/main.c    ****   MX_ADC1_Init();
 111:Src/main.c    ****   MX_USART1_UART_Init();
 112:Src/main.c    ****   MX_USART3_UART_Init();
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE BEGIN 2 */
 115:Src/main.c    ****   Sr_Start();
 116:Src/main.c    ****   // Sr_SetVoltage(0.0f);
 117:Src/main.c    ****   // Wait till stabilized.
 118:Src/main.c    ****   while (!Sr_IsStabilized());
 119:Src/main.c    **** 
 120:Src/main.c    ****   //Lattice_Start();
 121:Src/main.c    ****   /* USER CODE END 2 */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Infinite loop */
 124:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 125:Src/main.c    ****   while (1)
 126:Src/main.c    ****   {
 127:Src/main.c    ****     //Lattice_Execute();
 128:Src/main.c    ****     /* USER CODE END WHILE */
 129:Src/main.c    **** 
 130:Src/main.c    ****     /* USER CODE BEGIN 3 */
 131:Src/main.c    ****   }
 132:Src/main.c    ****   /* USER CODE END 3 */
 133:Src/main.c    **** }
 134:Src/main.c    **** 
 135:Src/main.c    **** /**
 136:Src/main.c    ****   * @brief System Clock Configuration
 137:Src/main.c    ****   * @retval None
 138:Src/main.c    ****   */
 139:Src/main.c    **** void SystemClock_Config(void)
 140:Src/main.c    **** {
 141:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 142:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 143:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 144:Src/main.c    **** 
 145:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
ARM GAS  /tmp/ccIlGWJH.s 			page 4


 146:Src/main.c    ****   */
 147:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 148:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 149:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 150:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 153:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 154:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 155:Src/main.c    ****   {
 156:Src/main.c    ****     Error_Handler();
 157:Src/main.c    ****   }
 158:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 159:Src/main.c    ****   */
 160:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 161:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 162:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 163:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 164:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 165:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 166:Src/main.c    **** 
 167:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 168:Src/main.c    ****   {
 169:Src/main.c    ****     Error_Handler();
 170:Src/main.c    ****   }
 171:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_USART1;
 172:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 173:Src/main.c    ****   PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 174:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 175:Src/main.c    ****   {
 176:Src/main.c    ****     Error_Handler();
 177:Src/main.c    ****   }
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** /**
 181:Src/main.c    ****   * @brief ADC1 Initialization Function
 182:Src/main.c    ****   * @param None
 183:Src/main.c    ****   * @retval None
 184:Src/main.c    ****   */
 185:Src/main.c    **** static void MX_ADC1_Init(void)
 186:Src/main.c    **** {
 187:Src/main.c    **** 
 188:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 191:Src/main.c    **** 
 192:Src/main.c    ****   ADC_MultiModeTypeDef multimode = {0};
 193:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 198:Src/main.c    ****   /** Common config 
 199:Src/main.c    ****   */
 200:Src/main.c    ****   hadc1.Instance = ADC1;
 201:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 202:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
ARM GAS  /tmp/ccIlGWJH.s 			page 5


 203:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 204:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 205:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 206:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 207:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 208:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 209:Src/main.c    ****   hadc1.Init.NbrOfConversion = 2;
 210:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 211:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 212:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 213:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 214:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 215:Src/main.c    ****   {
 216:Src/main.c    ****     Error_Handler();
 217:Src/main.c    ****   }
 218:Src/main.c    ****   /** Configure the ADC multi-mode 
 219:Src/main.c    ****   */
 220:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 221:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 222:Src/main.c    ****   {
 223:Src/main.c    ****     Error_Handler();
 224:Src/main.c    ****   }
 225:Src/main.c    ****   /** Configure Regular Channel 
 226:Src/main.c    ****   */
 227:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 228:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 229:Src/main.c    ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 230:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 231:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 232:Src/main.c    ****   sConfig.Offset = 0;
 233:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 234:Src/main.c    ****   {
 235:Src/main.c    ****     Error_Handler();
 236:Src/main.c    ****   }
 237:Src/main.c    ****   /** Configure Regular Channel 
 238:Src/main.c    ****   */
 239:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 240:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 241:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 242:Src/main.c    ****   {
 243:Src/main.c    ****     Error_Handler();
 244:Src/main.c    ****   }
 245:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 248:Src/main.c    **** 
 249:Src/main.c    **** }
 250:Src/main.c    **** 
 251:Src/main.c    **** /**
 252:Src/main.c    ****   * @brief HRTIM1 Initialization Function
 253:Src/main.c    ****   * @param None
 254:Src/main.c    ****   * @retval None
 255:Src/main.c    ****   */
 256:Src/main.c    **** static void MX_HRTIM1_Init(void)
 257:Src/main.c    **** {
 258:Src/main.c    **** 
 259:Src/main.c    ****   /* USER CODE BEGIN HRTIM1_Init 0 */
ARM GAS  /tmp/ccIlGWJH.s 			page 6


 260:Src/main.c    **** 
 261:Src/main.c    ****   /* USER CODE END HRTIM1_Init 0 */
 262:Src/main.c    **** 
 263:Src/main.c    ****   HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 264:Src/main.c    ****   HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 265:Src/main.c    ****   HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 266:Src/main.c    ****   HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 267:Src/main.c    ****   HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 268:Src/main.c    ****   HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN HRTIM1_Init 1 */
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE END HRTIM1_Init 1 */
 273:Src/main.c    ****   hhrtim1.Instance = HRTIM1;
 274:Src/main.c    ****   hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 275:Src/main.c    ****   hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 276:Src/main.c    ****   if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 277:Src/main.c    ****   {
 278:Src/main.c    ****     Error_Handler();
 279:Src/main.c    ****   }
 280:Src/main.c    ****   if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 281:Src/main.c    ****   {
 282:Src/main.c    ****     Error_Handler();
 283:Src/main.c    ****   }
 284:Src/main.c    ****   if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 285:Src/main.c    ****   {
 286:Src/main.c    ****     Error_Handler();
 287:Src/main.c    ****   }
 288:Src/main.c    ****   pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 289:Src/main.c    ****   pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_CMP2;
 290:Src/main.c    ****   if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 291:Src/main.c    ****   {
 292:Src/main.c    ****     Error_Handler();
 293:Src/main.c    ****   }
 294:Src/main.c    ****   pTimeBaseCfg.Period = 0xFFF7;
 295:Src/main.c    ****   pTimeBaseCfg.RepetitionCounter = 0x00;
 296:Src/main.c    ****   pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 297:Src/main.c    ****   pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 298:Src/main.c    ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 299:Src/main.c    ****   {
 300:Src/main.c    ****     Error_Handler();
 301:Src/main.c    ****   }
 302:Src/main.c    ****   pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 303:Src/main.c    ****   pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 304:Src/main.c    ****   pTimerCfg.DMASrcAddress = 0x0000;
 305:Src/main.c    ****   pTimerCfg.DMADstAddress = 0x0000;
 306:Src/main.c    ****   pTimerCfg.DMASize = 0x1;
 307:Src/main.c    ****   pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 308:Src/main.c    ****   pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 309:Src/main.c    ****   pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 310:Src/main.c    ****   pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 311:Src/main.c    ****   pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 312:Src/main.c    ****   pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 313:Src/main.c    ****   pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 314:Src/main.c    ****   pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 315:Src/main.c    ****   pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 316:Src/main.c    ****   pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
ARM GAS  /tmp/ccIlGWJH.s 			page 7


 317:Src/main.c    ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READONLY;
 318:Src/main.c    ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 319:Src/main.c    ****   pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 320:Src/main.c    ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 321:Src/main.c    ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 322:Src/main.c    ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 323:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 324:Src/main.c    ****   {
 325:Src/main.c    ****     Error_Handler();
 326:Src/main.c    ****   }
 327:Src/main.c    ****   pTimerCfg.DMASrcAddress = 0x0000;
 328:Src/main.c    ****   pTimerCfg.DMADstAddress = 0x0000;
 329:Src/main.c    ****   pTimerCfg.DMASize = 0x1;
 330:Src/main.c    ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 331:Src/main.c    ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 332:Src/main.c    ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 333:Src/main.c    ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER1_CMP1;
 334:Src/main.c    ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 335:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     Error_Handler();
 338:Src/main.c    ****   }
 339:Src/main.c    ****   pCompareCfg.CompareValue = 0x0018;
 340:Src/main.c    ****   if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCo
 341:Src/main.c    ****   {
 342:Src/main.c    ****     Error_Handler();
 343:Src/main.c    ****   }
 344:Src/main.c    ****   pCompareCfg.CompareValue = 0xFFF7;
 345:Src/main.c    ****   pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 346:Src/main.c    ****   pCompareCfg.AutoDelayedTimeout = 0x0000;
 347:Src/main.c    **** 
 348:Src/main.c    ****   if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCo
 349:Src/main.c    ****   {
 350:Src/main.c    ****     Error_Handler();
 351:Src/main.c    ****   }
 352:Src/main.c    ****   pCompareCfg.CompareValue = 0x8000;
 353:Src/main.c    ****   pCompareCfg.AutoDelayedTimeout = 0x0000;
 354:Src/main.c    **** 
 355:Src/main.c    ****   if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCo
 356:Src/main.c    ****   {
 357:Src/main.c    ****     Error_Handler();
 358:Src/main.c    ****   }
 359:Src/main.c    ****   pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV1;
 360:Src/main.c    ****   pDeadTimeCfg.RisingValue = 216;
 361:Src/main.c    ****   pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 362:Src/main.c    ****   pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_READONLY;
 363:Src/main.c    ****   pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 364:Src/main.c    ****   pDeadTimeCfg.FallingValue = 216;
 365:Src/main.c    ****   pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_NEGATIVE;
 366:Src/main.c    ****   pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_READONLY;
 367:Src/main.c    ****   pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 368:Src/main.c    ****   if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 369:Src/main.c    ****   {
 370:Src/main.c    ****     Error_Handler();
 371:Src/main.c    ****   }
 372:Src/main.c    ****   pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 373:Src/main.c    ****   pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
ARM GAS  /tmp/ccIlGWJH.s 			page 8


 374:Src/main.c    ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 375:Src/main.c    ****   pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 376:Src/main.c    ****   pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 377:Src/main.c    ****   pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 378:Src/main.c    ****   pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 379:Src/main.c    ****   pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 380:Src/main.c    ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutput
 381:Src/main.c    ****   {
 382:Src/main.c    ****     Error_Handler();
 383:Src/main.c    ****   }
 384:Src/main.c    ****   pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 385:Src/main.c    ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 386:Src/main.c    ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutput
 387:Src/main.c    ****   {
 388:Src/main.c    ****     Error_Handler();
 389:Src/main.c    ****   }
 390:Src/main.c    ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 391:Src/main.c    ****   {
 392:Src/main.c    ****     Error_Handler();
 393:Src/main.c    ****   }
 394:Src/main.c    ****   /* USER CODE BEGIN HRTIM1_Init 2 */
 395:Src/main.c    **** 
 396:Src/main.c    ****   /* USER CODE END HRTIM1_Init 2 */
 397:Src/main.c    ****   HAL_HRTIM_MspPostInit(&hhrtim1);
 398:Src/main.c    **** 
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** /**
 402:Src/main.c    ****   * @brief TIM3 Initialization Function
 403:Src/main.c    ****   * @param None
 404:Src/main.c    ****   * @retval None
 405:Src/main.c    ****   */
 406:Src/main.c    **** static void MX_TIM3_Init(void)
 407:Src/main.c    **** {
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 412:Src/main.c    **** 
 413:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 414:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 415:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 416:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 417:Src/main.c    **** 
 418:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 419:Src/main.c    **** 
 420:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 421:Src/main.c    ****   htim3.Instance = TIM3;
 422:Src/main.c    ****   htim3.Init.Prescaler = TIM3_PRESCALER;
 423:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 424:Src/main.c    ****   htim3.Init.Period = 0xFFFF;
 425:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 426:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 427:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 428:Src/main.c    ****   {
 429:Src/main.c    ****     Error_Handler();
 430:Src/main.c    ****   }
ARM GAS  /tmp/ccIlGWJH.s 			page 9


 431:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 432:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 433:Src/main.c    ****   {
 434:Src/main.c    ****     Error_Handler();
 435:Src/main.c    ****   }
 436:Src/main.c    ****   if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 437:Src/main.c    ****   {
 438:Src/main.c    ****     Error_Handler();
 439:Src/main.c    ****   }
 440:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 441:Src/main.c    ****   {
 442:Src/main.c    ****     Error_Handler();
 443:Src/main.c    ****   }
 444:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 445:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 446:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 447:Src/main.c    ****   {
 448:Src/main.c    ****     Error_Handler();
 449:Src/main.c    ****   }
 450:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 451:Src/main.c    ****   sConfigOC.Pulse = 0;
 452:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 453:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 454:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 455:Src/main.c    ****   {
 456:Src/main.c    ****     Error_Handler();
 457:Src/main.c    ****   }
 458:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 459:Src/main.c    ****   {
 460:Src/main.c    ****     Error_Handler();
 461:Src/main.c    ****   }
 462:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 463:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 464:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 465:Src/main.c    ****   sConfigIC.ICFilter = 15;
 466:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 467:Src/main.c    ****   {
 468:Src/main.c    ****     Error_Handler();
 469:Src/main.c    ****   }
 470:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 471:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 472:Src/main.c    ****   {
 473:Src/main.c    ****     Error_Handler();
 474:Src/main.c    ****   }
 475:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 476:Src/main.c    **** 
 477:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 478:Src/main.c    **** 
 479:Src/main.c    **** }
 480:Src/main.c    **** 
 481:Src/main.c    **** /**
 482:Src/main.c    ****   * @brief USART1 Initialization Function
 483:Src/main.c    ****   * @param None
 484:Src/main.c    ****   * @retval None
 485:Src/main.c    ****   */
 486:Src/main.c    **** static void MX_USART1_UART_Init(void)
 487:Src/main.c    **** {
ARM GAS  /tmp/ccIlGWJH.s 			page 10


 488:Src/main.c    **** 
 489:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 490:Src/main.c    **** 
 491:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 492:Src/main.c    **** 
 493:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 494:Src/main.c    **** 
 495:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 496:Src/main.c    ****   huart1.Instance = USART1;
 497:Src/main.c    ****   huart1.Init.BaudRate = 38400;
 498:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 499:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 500:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 501:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 502:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 503:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 504:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 505:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 506:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 507:Src/main.c    ****   {
 508:Src/main.c    ****     Error_Handler();
 509:Src/main.c    ****   }
 510:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 511:Src/main.c    **** 
 512:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 513:Src/main.c    **** 
 514:Src/main.c    **** }
 515:Src/main.c    **** 
 516:Src/main.c    **** /**
 517:Src/main.c    ****   * @brief USART3 Initialization Function
 518:Src/main.c    ****   * @param None
 519:Src/main.c    ****   * @retval None
 520:Src/main.c    ****   */
 521:Src/main.c    **** static void MX_USART3_UART_Init(void)
 522:Src/main.c    **** {
 523:Src/main.c    **** 
 524:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 525:Src/main.c    **** 
 526:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 527:Src/main.c    **** 
 528:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 529:Src/main.c    **** 
 530:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 531:Src/main.c    ****   huart3.Instance = USART3;
 532:Src/main.c    ****   huart3.Init.BaudRate = 38400;
 533:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 534:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 535:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 536:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 537:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 538:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 539:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 540:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 541:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 542:Src/main.c    ****   {
 543:Src/main.c    ****     Error_Handler();
 544:Src/main.c    ****   }
ARM GAS  /tmp/ccIlGWJH.s 			page 11


 545:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 546:Src/main.c    **** 
 547:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 548:Src/main.c    **** 
 549:Src/main.c    **** }
 550:Src/main.c    **** 
 551:Src/main.c    **** /** 
 552:Src/main.c    ****   * Enable DMA controller clock
 553:Src/main.c    ****   */
 554:Src/main.c    **** static void MX_DMA_Init(void) 
 555:Src/main.c    **** {
 556:Src/main.c    ****   /* DMA controller clock enable */
 557:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 558:Src/main.c    **** 
 559:Src/main.c    ****   /* DMA interrupt init */
 560:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 561:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 562:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 563:Src/main.c    **** 
 564:Src/main.c    **** }
 565:Src/main.c    **** 
 566:Src/main.c    **** /**
 567:Src/main.c    ****   * @brief GPIO Initialization Function
 568:Src/main.c    ****   * @param None
 569:Src/main.c    ****   * @retval None
 570:Src/main.c    ****   */
 571:Src/main.c    **** static void MX_GPIO_Init(void)
 572:Src/main.c    **** {
  28              		.loc 1 572 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 88B0     		sub	sp, sp, #32
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
 573:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 573 3 view .LVU1
  43              		.loc 1 573 20 is_stmt 0 view .LVU2
  44 0004 0024     		movs	r4, #0
  45 0006 0394     		str	r4, [sp, #12]
  46 0008 0494     		str	r4, [sp, #16]
  47 000a 0594     		str	r4, [sp, #20]
  48 000c 0694     		str	r4, [sp, #24]
  49 000e 0794     		str	r4, [sp, #28]
 574:Src/main.c    **** 
 575:Src/main.c    ****   /* GPIO Ports Clock Enable */
 576:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  50              		.loc 1 576 3 is_stmt 1 view .LVU3
  51              	.LBB2:
  52              		.loc 1 576 3 view .LVU4
ARM GAS  /tmp/ccIlGWJH.s 			page 12


  53              		.loc 1 576 3 view .LVU5
  54 0010 2A4B     		ldr	r3, .L3
  55 0012 5A69     		ldr	r2, [r3, #20]
  56 0014 42F48002 		orr	r2, r2, #4194304
  57 0018 5A61     		str	r2, [r3, #20]
  58              		.loc 1 576 3 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 02F48002 		and	r2, r2, #4194304
  61 0020 0092     		str	r2, [sp]
  62              		.loc 1 576 3 view .LVU7
  63 0022 009A     		ldr	r2, [sp]
  64              	.LBE2:
 577:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  65              		.loc 1 577 3 view .LVU8
  66              	.LBB3:
  67              		.loc 1 577 3 view .LVU9
  68              		.loc 1 577 3 view .LVU10
  69 0024 5A69     		ldr	r2, [r3, #20]
  70 0026 42F40032 		orr	r2, r2, #131072
  71 002a 5A61     		str	r2, [r3, #20]
  72              		.loc 1 577 3 view .LVU11
  73 002c 5A69     		ldr	r2, [r3, #20]
  74 002e 02F40032 		and	r2, r2, #131072
  75 0032 0192     		str	r2, [sp, #4]
  76              		.loc 1 577 3 view .LVU12
  77 0034 019A     		ldr	r2, [sp, #4]
  78              	.LBE3:
 578:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  79              		.loc 1 578 3 view .LVU13
  80              	.LBB4:
  81              		.loc 1 578 3 view .LVU14
  82              		.loc 1 578 3 view .LVU15
  83 0036 5A69     		ldr	r2, [r3, #20]
  84 0038 42F48022 		orr	r2, r2, #262144
  85 003c 5A61     		str	r2, [r3, #20]
  86              		.loc 1 578 3 view .LVU16
  87 003e 5B69     		ldr	r3, [r3, #20]
  88 0040 03F48023 		and	r3, r3, #262144
  89 0044 0293     		str	r3, [sp, #8]
  90              		.loc 1 578 3 view .LVU17
  91 0046 029B     		ldr	r3, [sp, #8]
  92              	.LBE4:
 579:Src/main.c    **** 
 580:Src/main.c    ****   /*Configure GPIO pin Output Level */
 581:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, RS485_DEnRE_Pin|LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin 
  93              		.loc 1 581 3 view .LVU18
  94 0048 1D4D     		ldr	r5, .L3+4
  95 004a 2246     		mov	r2, r4
  96 004c 47F23C31 		movw	r1, #29500
  97 0050 2846     		mov	r0, r5
  98 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL0:
 582:Src/main.c    ****                           |MISC0_Pin|MISC1_Pin|MISC2_Pin|THYRISTOR0_DRIVE_Pin 
 583:Src/main.c    ****                           |THYRISTOR1_DRIVE_Pin, GPIO_PIN_RESET);
 584:Src/main.c    **** 
 585:Src/main.c    ****   /*Configure GPIO pins : TRIGIN_RISING_Pin TRIGIN_FALLING_Pin */
 586:Src/main.c    ****   GPIO_InitStruct.Pin = TRIGIN_RISING_Pin|TRIGIN_FALLING_Pin;
ARM GAS  /tmp/ccIlGWJH.s 			page 13


 100              		.loc 1 586 3 view .LVU19
 101              		.loc 1 586 23 is_stmt 0 view .LVU20
 102 0056 3023     		movs	r3, #48
 103 0058 0393     		str	r3, [sp, #12]
 587:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 104              		.loc 1 587 3 is_stmt 1 view .LVU21
 105              		.loc 1 587 24 is_stmt 0 view .LVU22
 106 005a 1A4B     		ldr	r3, .L3+8
 107 005c 0493     		str	r3, [sp, #16]
 588:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 108              		.loc 1 588 3 is_stmt 1 view .LVU23
 109              		.loc 1 588 24 is_stmt 0 view .LVU24
 110 005e 0223     		movs	r3, #2
 111 0060 0593     		str	r3, [sp, #20]
 589:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 112              		.loc 1 589 3 is_stmt 1 view .LVU25
 113 0062 03A9     		add	r1, sp, #12
 114 0064 4FF09040 		mov	r0, #1207959552
 115 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 116              	.LVL1:
 590:Src/main.c    **** 
 591:Src/main.c    ****   /*Configure GPIO pins : RS485_DEnRE_Pin THYRISTOR0_DRIVE_Pin THYRISTOR1_DRIVE_Pin */
 592:Src/main.c    ****   GPIO_InitStruct.Pin = RS485_DEnRE_Pin|THYRISTOR0_DRIVE_Pin|THYRISTOR1_DRIVE_Pin;
 117              		.loc 1 592 3 view .LVU26
 118              		.loc 1 592 23 is_stmt 0 view .LVU27
 119 006c 4FF44173 		mov	r3, #772
 120 0070 0393     		str	r3, [sp, #12]
 593:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 121              		.loc 1 593 3 is_stmt 1 view .LVU28
 122              		.loc 1 593 24 is_stmt 0 view .LVU29
 123 0072 0126     		movs	r6, #1
 124 0074 0496     		str	r6, [sp, #16]
 594:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 125              		.loc 1 594 3 is_stmt 1 view .LVU30
 126              		.loc 1 594 24 is_stmt 0 view .LVU31
 127 0076 0594     		str	r4, [sp, #20]
 595:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 128              		.loc 1 595 3 is_stmt 1 view .LVU32
 129              		.loc 1 595 25 is_stmt 0 view .LVU33
 130 0078 0696     		str	r6, [sp, #24]
 596:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 131              		.loc 1 596 3 is_stmt 1 view .LVU34
 132 007a 03A9     		add	r1, sp, #12
 133 007c 2846     		mov	r0, r5
 134 007e FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL2:
 597:Src/main.c    **** 
 598:Src/main.c    ****   /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin MISC0_Pin 
 599:Src/main.c    ****                            MISC1_Pin MISC2_Pin */
 600:Src/main.c    ****   GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin|MISC0_Pin 
 136              		.loc 1 600 3 view .LVU35
 137              		.loc 1 600 23 is_stmt 0 view .LVU36
 138 0082 47F23803 		movw	r3, #28728
 139 0086 0393     		str	r3, [sp, #12]
 601:Src/main.c    ****                           |MISC1_Pin|MISC2_Pin;
 602:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 140              		.loc 1 602 3 is_stmt 1 view .LVU37
ARM GAS  /tmp/ccIlGWJH.s 			page 14


 141              		.loc 1 602 24 is_stmt 0 view .LVU38
 142 0088 0496     		str	r6, [sp, #16]
 603:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 603 3 is_stmt 1 view .LVU39
 144              		.loc 1 603 24 is_stmt 0 view .LVU40
 145 008a 0594     		str	r4, [sp, #20]
 604:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 146              		.loc 1 604 3 is_stmt 1 view .LVU41
 147              		.loc 1 604 25 is_stmt 0 view .LVU42
 148 008c 0694     		str	r4, [sp, #24]
 605:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 149              		.loc 1 605 3 is_stmt 1 view .LVU43
 150 008e 03A9     		add	r1, sp, #12
 151 0090 2846     		mov	r0, r5
 152 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 153              	.LVL3:
 606:Src/main.c    **** 
 607:Src/main.c    ****   /* EXTI interrupt init*/
 608:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 154              		.loc 1 608 3 view .LVU44
 155 0096 2246     		mov	r2, r4
 156 0098 0321     		movs	r1, #3
 157 009a 0A20     		movs	r0, #10
 158 009c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 159              	.LVL4:
 609:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 160              		.loc 1 609 3 view .LVU45
 161 00a0 0A20     		movs	r0, #10
 162 00a2 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 163              	.LVL5:
 610:Src/main.c    **** 
 611:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 164              		.loc 1 611 3 view .LVU46
 165 00a6 2246     		mov	r2, r4
 166 00a8 0321     		movs	r1, #3
 167 00aa 1720     		movs	r0, #23
 168 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 169              	.LVL6:
 612:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 170              		.loc 1 612 3 view .LVU47
 171 00b0 1720     		movs	r0, #23
 172 00b2 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 173              	.LVL7:
 613:Src/main.c    **** 
 614:Src/main.c    **** }
 174              		.loc 1 614 1 is_stmt 0 view .LVU48
 175 00b6 08B0     		add	sp, sp, #32
 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 16
 178              		@ sp needed
 179 00b8 70BD     		pop	{r4, r5, r6, pc}
 180              	.L4:
 181 00ba 00BF     		.align	2
 182              	.L3:
 183 00bc 00100240 		.word	1073876992
 184 00c0 00040048 		.word	1207960576
 185 00c4 00001110 		.word	269549568
ARM GAS  /tmp/ccIlGWJH.s 			page 15


 186              		.cfi_endproc
 187              	.LFE134:
 189              		.section	.text.MX_DMA_Init,"ax",%progbits
 190              		.align	1
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu fpv4-sp-d16
 196              	MX_DMA_Init:
 197              	.LFB133:
 555:Src/main.c    ****   /* DMA controller clock enable */
 198              		.loc 1 555 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 00B5     		push	{lr}
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 4
 205              		.cfi_offset 14, -4
 206 0002 83B0     		sub	sp, sp, #12
 207              	.LCFI4:
 208              		.cfi_def_cfa_offset 16
 557:Src/main.c    **** 
 209              		.loc 1 557 3 view .LVU50
 210              	.LBB5:
 557:Src/main.c    **** 
 211              		.loc 1 557 3 view .LVU51
 557:Src/main.c    **** 
 212              		.loc 1 557 3 view .LVU52
 213 0004 0A4B     		ldr	r3, .L7
 214 0006 5A69     		ldr	r2, [r3, #20]
 215 0008 42F00102 		orr	r2, r2, #1
 216 000c 5A61     		str	r2, [r3, #20]
 557:Src/main.c    **** 
 217              		.loc 1 557 3 view .LVU53
 218 000e 5B69     		ldr	r3, [r3, #20]
 219 0010 03F00103 		and	r3, r3, #1
 220 0014 0193     		str	r3, [sp, #4]
 557:Src/main.c    **** 
 221              		.loc 1 557 3 view .LVU54
 222 0016 019B     		ldr	r3, [sp, #4]
 223              	.LBE5:
 561:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 224              		.loc 1 561 3 view .LVU55
 225 0018 0022     		movs	r2, #0
 226 001a 0121     		movs	r1, #1
 227 001c 0B20     		movs	r0, #11
 228 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 229              	.LVL8:
 562:Src/main.c    **** 
 230              		.loc 1 562 3 view .LVU56
 231 0022 0B20     		movs	r0, #11
 232 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 233              	.LVL9:
 564:Src/main.c    **** 
 234              		.loc 1 564 1 is_stmt 0 view .LVU57
 235 0028 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccIlGWJH.s 			page 16


 236              	.LCFI5:
 237              		.cfi_def_cfa_offset 4
 238              		@ sp needed
 239 002a 5DF804FB 		ldr	pc, [sp], #4
 240              	.L8:
 241 002e 00BF     		.align	2
 242              	.L7:
 243 0030 00100240 		.word	1073876992
 244              		.cfi_endproc
 245              	.LFE133:
 247              		.section	.text.MX_HRTIM1_Init,"ax",%progbits
 248              		.align	1
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	MX_HRTIM1_Init:
 255              	.LFB129:
 257:Src/main.c    **** 
 256              		.loc 1 257 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 192
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 261              	.LCFI6:
 262              		.cfi_def_cfa_offset 32
 263              		.cfi_offset 4, -32
 264              		.cfi_offset 5, -28
 265              		.cfi_offset 6, -24
 266              		.cfi_offset 7, -20
 267              		.cfi_offset 8, -16
 268              		.cfi_offset 9, -12
 269              		.cfi_offset 10, -8
 270              		.cfi_offset 14, -4
 271 0004 B0B0     		sub	sp, sp, #192
 272              	.LCFI7:
 273              		.cfi_def_cfa_offset 224
 263:Src/main.c    ****   HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 274              		.loc 1 263 3 view .LVU59
 263:Src/main.c    ****   HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 275              		.loc 1 263 30 is_stmt 0 view .LVU60
 276 0006 0024     		movs	r4, #0
 277 0008 2E94     		str	r4, [sp, #184]
 278 000a 2F94     		str	r4, [sp, #188]
 264:Src/main.c    ****   HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 279              		.loc 1 264 3 is_stmt 1 view .LVU61
 264:Src/main.c    ****   HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 280              		.loc 1 264 28 is_stmt 0 view .LVU62
 281 000c 2A94     		str	r4, [sp, #168]
 282 000e 2B94     		str	r4, [sp, #172]
 283 0010 2C94     		str	r4, [sp, #176]
 284 0012 2D94     		str	r4, [sp, #180]
 265:Src/main.c    ****   HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 285              		.loc 1 265 3 is_stmt 1 view .LVU63
 265:Src/main.c    ****   HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 286              		.loc 1 265 25 is_stmt 0 view .LVU64
 287 0014 5422     		movs	r2, #84
ARM GAS  /tmp/ccIlGWJH.s 			page 17


 288 0016 2146     		mov	r1, r4
 289 0018 0DEB0200 		add	r0, sp, r2
 290 001c FFF7FEFF 		bl	memset
 291              	.LVL10:
 266:Src/main.c    ****   HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 292              		.loc 1 266 3 is_stmt 1 view .LVU65
 266:Src/main.c    ****   HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 293              		.loc 1 266 27 is_stmt 0 view .LVU66
 294 0020 1294     		str	r4, [sp, #72]
 295 0022 1394     		str	r4, [sp, #76]
 296 0024 1494     		str	r4, [sp, #80]
 267:Src/main.c    ****   HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 297              		.loc 1 267 3 is_stmt 1 view .LVU67
 267:Src/main.c    ****   HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 298              		.loc 1 267 28 is_stmt 0 view .LVU68
 299 0026 2422     		movs	r2, #36
 300 0028 2146     		mov	r1, r4
 301 002a 0DEB0200 		add	r0, sp, r2
 302 002e FFF7FEFF 		bl	memset
 303              	.LVL11:
 268:Src/main.c    **** 
 304              		.loc 1 268 3 is_stmt 1 view .LVU69
 268:Src/main.c    **** 
 305              		.loc 1 268 26 is_stmt 0 view .LVU70
 306 0032 2022     		movs	r2, #32
 307 0034 2146     		mov	r1, r4
 308 0036 01A8     		add	r0, sp, #4
 309 0038 FFF7FEFF 		bl	memset
 310              	.LVL12:
 273:Src/main.c    ****   hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 311              		.loc 1 273 3 is_stmt 1 view .LVU71
 273:Src/main.c    ****   hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 312              		.loc 1 273 20 is_stmt 0 view .LVU72
 313 003c 594D     		ldr	r5, .L11
 314 003e 5A4B     		ldr	r3, .L11+4
 315 0040 2B60     		str	r3, [r5]
 274:Src/main.c    ****   hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 316              		.loc 1 274 3 is_stmt 1 view .LVU73
 274:Src/main.c    ****   hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 317              		.loc 1 274 40 is_stmt 0 view .LVU74
 318 0042 6C60     		str	r4, [r5, #4]
 275:Src/main.c    ****   if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 319              		.loc 1 275 3 is_stmt 1 view .LVU75
 275:Src/main.c    ****   if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 320              		.loc 1 275 28 is_stmt 0 view .LVU76
 321 0044 AC60     		str	r4, [r5, #8]
 276:Src/main.c    ****   {
 322              		.loc 1 276 3 is_stmt 1 view .LVU77
 276:Src/main.c    ****   {
 323              		.loc 1 276 7 is_stmt 0 view .LVU78
 324 0046 2846     		mov	r0, r5
 325 0048 FFF7FEFF 		bl	HAL_HRTIM_Init
 326              	.LVL13:
 280:Src/main.c    ****   {
 327              		.loc 1 280 3 is_stmt 1 view .LVU79
 280:Src/main.c    ****   {
 328              		.loc 1 280 7 is_stmt 0 view .LVU80
ARM GAS  /tmp/ccIlGWJH.s 			page 18


 329 004c 0C21     		movs	r1, #12
 330 004e 2846     		mov	r0, r5
 331 0050 FFF7FEFF 		bl	HAL_HRTIM_DLLCalibrationStart
 332              	.LVL14:
 284:Src/main.c    ****   {
 333              		.loc 1 284 3 is_stmt 1 view .LVU81
 284:Src/main.c    ****   {
 334              		.loc 1 284 7 is_stmt 0 view .LVU82
 335 0054 0A21     		movs	r1, #10
 336 0056 2846     		mov	r0, r5
 337 0058 FFF7FEFF 		bl	HAL_HRTIM_PollForDLLCalibration
 338              	.LVL15:
 288:Src/main.c    ****   pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_CMP2;
 339              		.loc 1 288 3 is_stmt 1 view .LVU83
 288:Src/main.c    ****   pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_CMP2;
 340              		.loc 1 288 31 is_stmt 0 view .LVU84
 341 005c 4FF40033 		mov	r3, #131072
 342 0060 2E93     		str	r3, [sp, #184]
 289:Src/main.c    ****   if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 343              		.loc 1 289 3 is_stmt 1 view .LVU85
 289:Src/main.c    ****   if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 344              		.loc 1 289 26 is_stmt 0 view .LVU86
 345 0062 4FF40048 		mov	r8, #32768
 346 0066 CDF8BC80 		str	r8, [sp, #188]
 290:Src/main.c    ****   {
 347              		.loc 1 290 3 is_stmt 1 view .LVU87
 290:Src/main.c    ****   {
 348              		.loc 1 290 7 is_stmt 0 view .LVU88
 349 006a 2EAA     		add	r2, sp, #184
 350 006c 0121     		movs	r1, #1
 351 006e 2846     		mov	r0, r5
 352 0070 FFF7FEFF 		bl	HAL_HRTIM_ADCTriggerConfig
 353              	.LVL16:
 294:Src/main.c    ****   pTimeBaseCfg.RepetitionCounter = 0x00;
 354              		.loc 1 294 3 is_stmt 1 view .LVU89
 294:Src/main.c    ****   pTimeBaseCfg.RepetitionCounter = 0x00;
 355              		.loc 1 294 23 is_stmt 0 view .LVU90
 356 0074 4FF6F77A 		movw	r10, #65527
 357 0078 CDF8A8A0 		str	r10, [sp, #168]
 295:Src/main.c    ****   pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 358              		.loc 1 295 3 is_stmt 1 view .LVU91
 295:Src/main.c    ****   pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL8;
 359              		.loc 1 295 34 is_stmt 0 view .LVU92
 360 007c 2B94     		str	r4, [sp, #172]
 296:Src/main.c    ****   pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 361              		.loc 1 296 3 is_stmt 1 view .LVU93
 296:Src/main.c    ****   pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 362              		.loc 1 296 31 is_stmt 0 view .LVU94
 363 007e 0227     		movs	r7, #2
 364 0080 2C97     		str	r7, [sp, #176]
 297:Src/main.c    ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 365              		.loc 1 297 3 is_stmt 1 view .LVU95
 297:Src/main.c    ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 366              		.loc 1 297 21 is_stmt 0 view .LVU96
 367 0082 0823     		movs	r3, #8
 368 0084 2D93     		str	r3, [sp, #180]
 298:Src/main.c    ****   {
ARM GAS  /tmp/ccIlGWJH.s 			page 19


 369              		.loc 1 298 3 is_stmt 1 view .LVU97
 298:Src/main.c    ****   {
 370              		.loc 1 298 7 is_stmt 0 view .LVU98
 371 0086 2AAA     		add	r2, sp, #168
 372 0088 2146     		mov	r1, r4
 373 008a 2846     		mov	r0, r5
 374 008c FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 375              	.LVL17:
 302:Src/main.c    ****   pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 376              		.loc 1 302 3 is_stmt 1 view .LVU99
 302:Src/main.c    ****   pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 377              		.loc 1 302 31 is_stmt 0 view .LVU100
 378 0090 1594     		str	r4, [sp, #84]
 303:Src/main.c    ****   pTimerCfg.DMASrcAddress = 0x0000;
 379              		.loc 1 303 3 is_stmt 1 view .LVU101
 303:Src/main.c    ****   pTimerCfg.DMASrcAddress = 0x0000;
 380              		.loc 1 303 25 is_stmt 0 view .LVU102
 381 0092 1694     		str	r4, [sp, #88]
 304:Src/main.c    ****   pTimerCfg.DMADstAddress = 0x0000;
 382              		.loc 1 304 3 is_stmt 1 view .LVU103
 304:Src/main.c    ****   pTimerCfg.DMADstAddress = 0x0000;
 383              		.loc 1 304 27 is_stmt 0 view .LVU104
 384 0094 1794     		str	r4, [sp, #92]
 305:Src/main.c    ****   pTimerCfg.DMASize = 0x1;
 385              		.loc 1 305 3 is_stmt 1 view .LVU105
 305:Src/main.c    ****   pTimerCfg.DMASize = 0x1;
 386              		.loc 1 305 27 is_stmt 0 view .LVU106
 387 0096 1894     		str	r4, [sp, #96]
 306:Src/main.c    ****   pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 388              		.loc 1 306 3 is_stmt 1 view .LVU107
 306:Src/main.c    ****   pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 389              		.loc 1 306 21 is_stmt 0 view .LVU108
 390 0098 0126     		movs	r6, #1
 391 009a 1996     		str	r6, [sp, #100]
 307:Src/main.c    ****   pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 392              		.loc 1 307 3 is_stmt 1 view .LVU109
 307:Src/main.c    ****   pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 393              		.loc 1 307 28 is_stmt 0 view .LVU110
 394 009c 1A94     		str	r4, [sp, #104]
 308:Src/main.c    ****   pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 395              		.loc 1 308 3 is_stmt 1 view .LVU111
 308:Src/main.c    ****   pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 396              		.loc 1 308 25 is_stmt 0 view .LVU112
 397 009e 1B94     		str	r4, [sp, #108]
 309:Src/main.c    ****   pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 398              		.loc 1 309 3 is_stmt 1 view .LVU113
 309:Src/main.c    ****   pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 399              		.loc 1 309 25 is_stmt 0 view .LVU114
 400 00a0 1C94     		str	r4, [sp, #112]
 310:Src/main.c    ****   pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 401              		.loc 1 310 3 is_stmt 1 view .LVU115
 310:Src/main.c    ****   pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 402              		.loc 1 310 24 is_stmt 0 view .LVU116
 403 00a2 1D94     		str	r4, [sp, #116]
 311:Src/main.c    ****   pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 404              		.loc 1 311 3 is_stmt 1 view .LVU117
 311:Src/main.c    ****   pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
ARM GAS  /tmp/ccIlGWJH.s 			page 20


 405              		.loc 1 311 27 is_stmt 0 view .LVU118
 406 00a4 4FF00063 		mov	r3, #134217728
 407 00a8 1E93     		str	r3, [sp, #120]
 312:Src/main.c    ****   pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 408              		.loc 1 312 3 is_stmt 1 view .LVU119
 312:Src/main.c    ****   pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 409              		.loc 1 312 26 is_stmt 0 view .LVU120
 410 00aa 1F94     		str	r4, [sp, #124]
 313:Src/main.c    ****   pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 411              		.loc 1 313 3 is_stmt 1 view .LVU121
 313:Src/main.c    ****   pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 412              		.loc 1 313 23 is_stmt 0 view .LVU122
 413 00ac 2094     		str	r4, [sp, #128]
 314:Src/main.c    ****   pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 414              		.loc 1 314 3 is_stmt 1 view .LVU123
 314:Src/main.c    ****   pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 415              		.loc 1 314 30 is_stmt 0 view .LVU124
 416 00ae 2194     		str	r4, [sp, #132]
 315:Src/main.c    ****   pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 417              		.loc 1 315 3 is_stmt 1 view .LVU125
 315:Src/main.c    ****   pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 418              		.loc 1 315 22 is_stmt 0 view .LVU126
 419 00b0 2294     		str	r4, [sp, #136]
 316:Src/main.c    ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READONLY;
 420              		.loc 1 316 3 is_stmt 1 view .LVU127
 316:Src/main.c    ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READONLY;
 421              		.loc 1 316 25 is_stmt 0 view .LVU128
 422 00b2 2394     		str	r4, [sp, #140]
 317:Src/main.c    ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 423              		.loc 1 317 3 is_stmt 1 view .LVU129
 317:Src/main.c    ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 424              		.loc 1 317 23 is_stmt 0 view .LVU130
 425 00b4 4FF00049 		mov	r9, #-2147483648
 426 00b8 CDF89090 		str	r9, [sp, #144]
 318:Src/main.c    ****   pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 427              		.loc 1 318 3 is_stmt 1 view .LVU131
 318:Src/main.c    ****   pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 428              		.loc 1 318 31 is_stmt 0 view .LVU132
 429 00bc 4FF48073 		mov	r3, #256
 430 00c0 2593     		str	r3, [sp, #148]
 319:Src/main.c    ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 431              		.loc 1 319 3 is_stmt 1 view .LVU133
 319:Src/main.c    ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 432              		.loc 1 319 35 is_stmt 0 view .LVU134
 433 00c2 2694     		str	r4, [sp, #152]
 320:Src/main.c    ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 434              		.loc 1 320 3 is_stmt 1 view .LVU135
 320:Src/main.c    ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 435              		.loc 1 320 27 is_stmt 0 view .LVU136
 436 00c4 2794     		str	r4, [sp, #156]
 321:Src/main.c    ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 437              		.loc 1 321 3 is_stmt 1 view .LVU137
 321:Src/main.c    ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 438              		.loc 1 321 26 is_stmt 0 view .LVU138
 439 00c6 2894     		str	r4, [sp, #160]
 322:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 440              		.loc 1 322 3 is_stmt 1 view .LVU139
ARM GAS  /tmp/ccIlGWJH.s 			page 21


 322:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 441              		.loc 1 322 25 is_stmt 0 view .LVU140
 442 00c8 4FF48023 		mov	r3, #262144
 443 00cc 2993     		str	r3, [sp, #164]
 323:Src/main.c    ****   {
 444              		.loc 1 323 3 is_stmt 1 view .LVU141
 323:Src/main.c    ****   {
 445              		.loc 1 323 7 is_stmt 0 view .LVU142
 446 00ce 15AA     		add	r2, sp, #84
 447 00d0 2146     		mov	r1, r4
 448 00d2 2846     		mov	r0, r5
 449 00d4 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerConfig
 450              	.LVL18:
 327:Src/main.c    ****   pTimerCfg.DMADstAddress = 0x0000;
 451              		.loc 1 327 3 is_stmt 1 view .LVU143
 327:Src/main.c    ****   pTimerCfg.DMADstAddress = 0x0000;
 452              		.loc 1 327 27 is_stmt 0 view .LVU144
 453 00d8 1794     		str	r4, [sp, #92]
 328:Src/main.c    ****   pTimerCfg.DMASize = 0x1;
 454              		.loc 1 328 3 is_stmt 1 view .LVU145
 328:Src/main.c    ****   pTimerCfg.DMASize = 0x1;
 455              		.loc 1 328 27 is_stmt 0 view .LVU146
 456 00da 1894     		str	r4, [sp, #96]
 329:Src/main.c    ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 457              		.loc 1 329 3 is_stmt 1 view .LVU147
 329:Src/main.c    ****   pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 458              		.loc 1 329 21 is_stmt 0 view .LVU148
 459 00dc 1996     		str	r6, [sp, #100]
 330:Src/main.c    ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 460              		.loc 1 330 3 is_stmt 1 view .LVU149
 330:Src/main.c    ****   pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 461              		.loc 1 330 23 is_stmt 0 view .LVU150
 462 00de 2494     		str	r4, [sp, #144]
 331:Src/main.c    ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 463              		.loc 1 331 3 is_stmt 1 view .LVU151
 331:Src/main.c    ****   pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_TIMER_A;
 464              		.loc 1 331 31 is_stmt 0 view .LVU152
 465 00e0 2594     		str	r4, [sp, #148]
 332:Src/main.c    ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER1_CMP1;
 466              		.loc 1 332 3 is_stmt 1 view .LVU153
 332:Src/main.c    ****   pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_OTHER1_CMP1;
 467              		.loc 1 332 27 is_stmt 0 view .LVU154
 468 00e2 4FF40023 		mov	r3, #524288
 469 00e6 2793     		str	r3, [sp, #156]
 333:Src/main.c    ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 470              		.loc 1 333 3 is_stmt 1 view .LVU155
 333:Src/main.c    ****   pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 471              		.loc 1 333 26 is_stmt 0 view .LVU156
 472 00e8 2893     		str	r3, [sp, #160]
 334:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 473              		.loc 1 334 3 is_stmt 1 view .LVU157
 334:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 474              		.loc 1 334 25 is_stmt 0 view .LVU158
 475 00ea 2994     		str	r4, [sp, #164]
 335:Src/main.c    ****   {
 476              		.loc 1 335 3 is_stmt 1 view .LVU159
 335:Src/main.c    ****   {
ARM GAS  /tmp/ccIlGWJH.s 			page 22


 477              		.loc 1 335 7 is_stmt 0 view .LVU160
 478 00ec 15AA     		add	r2, sp, #84
 479 00ee 3146     		mov	r1, r6
 480 00f0 2846     		mov	r0, r5
 481 00f2 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerConfig
 482              	.LVL19:
 339:Src/main.c    ****   if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCo
 483              		.loc 1 339 3 is_stmt 1 view .LVU161
 339:Src/main.c    ****   if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCo
 484              		.loc 1 339 28 is_stmt 0 view .LVU162
 485 00f6 1823     		movs	r3, #24
 486 00f8 1293     		str	r3, [sp, #72]
 340:Src/main.c    ****   {
 487              		.loc 1 340 3 is_stmt 1 view .LVU163
 340:Src/main.c    ****   {
 488              		.loc 1 340 7 is_stmt 0 view .LVU164
 489 00fa 12AB     		add	r3, sp, #72
 490 00fc 3246     		mov	r2, r6
 491 00fe 2146     		mov	r1, r4
 492 0100 2846     		mov	r0, r5
 493 0102 FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 494              	.LVL20:
 344:Src/main.c    ****   pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 495              		.loc 1 344 3 is_stmt 1 view .LVU165
 344:Src/main.c    ****   pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 496              		.loc 1 344 28 is_stmt 0 view .LVU166
 497 0106 CDF848A0 		str	r10, [sp, #72]
 345:Src/main.c    ****   pCompareCfg.AutoDelayedTimeout = 0x0000;
 498              		.loc 1 345 3 is_stmt 1 view .LVU167
 345:Src/main.c    ****   pCompareCfg.AutoDelayedTimeout = 0x0000;
 499              		.loc 1 345 31 is_stmt 0 view .LVU168
 500 010a 1394     		str	r4, [sp, #76]
 346:Src/main.c    **** 
 501              		.loc 1 346 3 is_stmt 1 view .LVU169
 346:Src/main.c    **** 
 502              		.loc 1 346 34 is_stmt 0 view .LVU170
 503 010c 1494     		str	r4, [sp, #80]
 348:Src/main.c    ****   {
 504              		.loc 1 348 3 is_stmt 1 view .LVU171
 348:Src/main.c    ****   {
 505              		.loc 1 348 7 is_stmt 0 view .LVU172
 506 010e 12AB     		add	r3, sp, #72
 507 0110 3A46     		mov	r2, r7
 508 0112 2146     		mov	r1, r4
 509 0114 2846     		mov	r0, r5
 510 0116 FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 511              	.LVL21:
 352:Src/main.c    ****   pCompareCfg.AutoDelayedTimeout = 0x0000;
 512              		.loc 1 352 3 is_stmt 1 view .LVU173
 352:Src/main.c    ****   pCompareCfg.AutoDelayedTimeout = 0x0000;
 513              		.loc 1 352 28 is_stmt 0 view .LVU174
 514 011a CDF84880 		str	r8, [sp, #72]
 353:Src/main.c    **** 
 515              		.loc 1 353 3 is_stmt 1 view .LVU175
 353:Src/main.c    **** 
 516              		.loc 1 353 34 is_stmt 0 view .LVU176
 517 011e 1494     		str	r4, [sp, #80]
ARM GAS  /tmp/ccIlGWJH.s 			page 23


 355:Src/main.c    ****   {
 518              		.loc 1 355 3 is_stmt 1 view .LVU177
 355:Src/main.c    ****   {
 519              		.loc 1 355 7 is_stmt 0 view .LVU178
 520 0120 12AB     		add	r3, sp, #72
 521 0122 3A46     		mov	r2, r7
 522 0124 3146     		mov	r1, r6
 523 0126 2846     		mov	r0, r5
 524 0128 FFF7FEFF 		bl	HAL_HRTIM_WaveformCompareConfig
 525              	.LVL22:
 359:Src/main.c    ****   pDeadTimeCfg.RisingValue = 216;
 526              		.loc 1 359 3 is_stmt 1 view .LVU179
 359:Src/main.c    ****   pDeadTimeCfg.RisingValue = 216;
 527              		.loc 1 359 26 is_stmt 0 view .LVU180
 528 012c 4FF44063 		mov	r3, #3072
 529 0130 0993     		str	r3, [sp, #36]
 360:Src/main.c    ****   pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 530              		.loc 1 360 3 is_stmt 1 view .LVU181
 360:Src/main.c    ****   pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 531              		.loc 1 360 28 is_stmt 0 view .LVU182
 532 0132 D823     		movs	r3, #216
 533 0134 0A93     		str	r3, [sp, #40]
 361:Src/main.c    ****   pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_READONLY;
 534              		.loc 1 361 3 is_stmt 1 view .LVU183
 361:Src/main.c    ****   pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_READONLY;
 535              		.loc 1 361 27 is_stmt 0 view .LVU184
 536 0136 0B94     		str	r4, [sp, #44]
 362:Src/main.c    ****   pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 537              		.loc 1 362 3 is_stmt 1 view .LVU185
 362:Src/main.c    ****   pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_READONLY;
 538              		.loc 1 362 27 is_stmt 0 view .LVU186
 539 0138 CDF83080 		str	r8, [sp, #48]
 363:Src/main.c    ****   pDeadTimeCfg.FallingValue = 216;
 540              		.loc 1 363 3 is_stmt 1 view .LVU187
 363:Src/main.c    ****   pDeadTimeCfg.FallingValue = 216;
 541              		.loc 1 363 31 is_stmt 0 view .LVU188
 542 013c 4FF48042 		mov	r2, #16384
 543 0140 0D92     		str	r2, [sp, #52]
 364:Src/main.c    ****   pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_NEGATIVE;
 544              		.loc 1 364 3 is_stmt 1 view .LVU189
 364:Src/main.c    ****   pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_NEGATIVE;
 545              		.loc 1 364 29 is_stmt 0 view .LVU190
 546 0142 0E93     		str	r3, [sp, #56]
 365:Src/main.c    ****   pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_READONLY;
 547              		.loc 1 365 3 is_stmt 1 view .LVU191
 365:Src/main.c    ****   pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_READONLY;
 548              		.loc 1 365 28 is_stmt 0 view .LVU192
 549 0144 4FF00073 		mov	r3, #33554432
 550 0148 0F93     		str	r3, [sp, #60]
 366:Src/main.c    ****   pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 551              		.loc 1 366 3 is_stmt 1 view .LVU193
 366:Src/main.c    ****   pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_READONLY;
 552              		.loc 1 366 28 is_stmt 0 view .LVU194
 553 014a CDF84090 		str	r9, [sp, #64]
 367:Src/main.c    ****   if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 554              		.loc 1 367 3 is_stmt 1 view .LVU195
 367:Src/main.c    ****   if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
ARM GAS  /tmp/ccIlGWJH.s 			page 24


 555              		.loc 1 367 32 is_stmt 0 view .LVU196
 556 014e 4FF08043 		mov	r3, #1073741824
 557 0152 1193     		str	r3, [sp, #68]
 368:Src/main.c    ****   {
 558              		.loc 1 368 3 is_stmt 1 view .LVU197
 368:Src/main.c    ****   {
 559              		.loc 1 368 7 is_stmt 0 view .LVU198
 560 0154 09AA     		add	r2, sp, #36
 561 0156 2146     		mov	r1, r4
 562 0158 2846     		mov	r0, r5
 563 015a FFF7FEFF 		bl	HAL_HRTIM_DeadTimeConfig
 564              	.LVL23:
 372:Src/main.c    ****   pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 565              		.loc 1 372 3 is_stmt 1 view .LVU199
 372:Src/main.c    ****   pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 566              		.loc 1 372 23 is_stmt 0 view .LVU200
 567 015e 0194     		str	r4, [sp, #4]
 373:Src/main.c    ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 568              		.loc 1 373 3 is_stmt 1 view .LVU201
 373:Src/main.c    ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 569              		.loc 1 373 24 is_stmt 0 view .LVU202
 570 0160 0423     		movs	r3, #4
 571 0162 0293     		str	r3, [sp, #8]
 374:Src/main.c    ****   pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 572              		.loc 1 374 3 is_stmt 1 view .LVU203
 374:Src/main.c    ****   pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 573              		.loc 1 374 26 is_stmt 0 view .LVU204
 574 0164 1023     		movs	r3, #16
 575 0166 0393     		str	r3, [sp, #12]
 375:Src/main.c    ****   pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 576              		.loc 1 375 3 is_stmt 1 view .LVU205
 375:Src/main.c    ****   pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 577              		.loc 1 375 23 is_stmt 0 view .LVU206
 578 0168 0494     		str	r4, [sp, #16]
 376:Src/main.c    ****   pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 579              		.loc 1 376 3 is_stmt 1 view .LVU207
 376:Src/main.c    ****   pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 580              		.loc 1 376 24 is_stmt 0 view .LVU208
 581 016a 0594     		str	r4, [sp, #20]
 377:Src/main.c    ****   pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 582              		.loc 1 377 3 is_stmt 1 view .LVU209
 377:Src/main.c    ****   pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 583              		.loc 1 377 25 is_stmt 0 view .LVU210
 584 016c 0694     		str	r4, [sp, #24]
 378:Src/main.c    ****   pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 585              		.loc 1 378 3 is_stmt 1 view .LVU211
 378:Src/main.c    ****   pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 586              		.loc 1 378 32 is_stmt 0 view .LVU212
 587 016e 0794     		str	r4, [sp, #28]
 379:Src/main.c    ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutput
 588              		.loc 1 379 3 is_stmt 1 view .LVU213
 379:Src/main.c    ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutput
 589              		.loc 1 379 36 is_stmt 0 view .LVU214
 590 0170 0894     		str	r4, [sp, #32]
 380:Src/main.c    ****   {
 591              		.loc 1 380 3 is_stmt 1 view .LVU215
 380:Src/main.c    ****   {
ARM GAS  /tmp/ccIlGWJH.s 			page 25


 592              		.loc 1 380 7 is_stmt 0 view .LVU216
 593 0172 01AB     		add	r3, sp, #4
 594 0174 3246     		mov	r2, r6
 595 0176 2146     		mov	r1, r4
 596 0178 2846     		mov	r0, r5
 597 017a FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 598              	.LVL24:
 384:Src/main.c    ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 599              		.loc 1 384 3 is_stmt 1 view .LVU217
 384:Src/main.c    ****   pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 600              		.loc 1 384 24 is_stmt 0 view .LVU218
 601 017e 0294     		str	r4, [sp, #8]
 385:Src/main.c    ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutput
 602              		.loc 1 385 3 is_stmt 1 view .LVU219
 385:Src/main.c    ****   if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutput
 603              		.loc 1 385 26 is_stmt 0 view .LVU220
 604 0180 0394     		str	r4, [sp, #12]
 386:Src/main.c    ****   {
 605              		.loc 1 386 3 is_stmt 1 view .LVU221
 386:Src/main.c    ****   {
 606              		.loc 1 386 7 is_stmt 0 view .LVU222
 607 0182 01AB     		add	r3, sp, #4
 608 0184 3A46     		mov	r2, r7
 609 0186 2146     		mov	r1, r4
 610 0188 2846     		mov	r0, r5
 611 018a FFF7FEFF 		bl	HAL_HRTIM_WaveformOutputConfig
 612              	.LVL25:
 390:Src/main.c    ****   {
 613              		.loc 1 390 3 is_stmt 1 view .LVU223
 390:Src/main.c    ****   {
 614              		.loc 1 390 7 is_stmt 0 view .LVU224
 615 018e 2AAA     		add	r2, sp, #168
 616 0190 3146     		mov	r1, r6
 617 0192 2846     		mov	r0, r5
 618 0194 FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 619              	.LVL26:
 397:Src/main.c    **** 
 620              		.loc 1 397 3 is_stmt 1 view .LVU225
 621 0198 2846     		mov	r0, r5
 622 019a FFF7FEFF 		bl	HAL_HRTIM_MspPostInit
 623              	.LVL27:
 399:Src/main.c    **** 
 624              		.loc 1 399 1 is_stmt 0 view .LVU226
 625 019e 30B0     		add	sp, sp, #192
 626              	.LCFI8:
 627              		.cfi_def_cfa_offset 32
 628              		@ sp needed
 629 01a0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 630              	.L12:
 631              		.align	2
 632              	.L11:
 633 01a4 00000000 		.word	hhrtim1
 634 01a8 00740140 		.word	1073837056
 635              		.cfi_endproc
 636              	.LFE129:
 638              		.section	.text.MX_TIM3_Init,"ax",%progbits
 639              		.align	1
ARM GAS  /tmp/ccIlGWJH.s 			page 26


 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 643              		.fpu fpv4-sp-d16
 645              	MX_TIM3_Init:
 646              	.LFB130:
 407:Src/main.c    **** 
 647              		.loc 1 407 1 is_stmt 1 view -0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 72
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651 0000 30B5     		push	{r4, r5, lr}
 652              	.LCFI9:
 653              		.cfi_def_cfa_offset 12
 654              		.cfi_offset 4, -12
 655              		.cfi_offset 5, -8
 656              		.cfi_offset 14, -4
 657 0002 93B0     		sub	sp, sp, #76
 658              	.LCFI10:
 659              		.cfi_def_cfa_offset 88
 413:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 660              		.loc 1 413 3 view .LVU228
 413:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 661              		.loc 1 413 26 is_stmt 0 view .LVU229
 662 0004 0024     		movs	r4, #0
 663 0006 0E94     		str	r4, [sp, #56]
 664 0008 0F94     		str	r4, [sp, #60]
 665 000a 1094     		str	r4, [sp, #64]
 666 000c 1194     		str	r4, [sp, #68]
 414:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 667              		.loc 1 414 3 is_stmt 1 view .LVU230
 414:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 668              		.loc 1 414 27 is_stmt 0 view .LVU231
 669 000e 0B94     		str	r4, [sp, #44]
 670 0010 0C94     		str	r4, [sp, #48]
 671 0012 0D94     		str	r4, [sp, #52]
 415:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 672              		.loc 1 415 3 is_stmt 1 view .LVU232
 415:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 673              		.loc 1 415 22 is_stmt 0 view .LVU233
 674 0014 0494     		str	r4, [sp, #16]
 675 0016 0594     		str	r4, [sp, #20]
 676 0018 0694     		str	r4, [sp, #24]
 677 001a 0794     		str	r4, [sp, #28]
 678 001c 0894     		str	r4, [sp, #32]
 679 001e 0994     		str	r4, [sp, #36]
 680 0020 0A94     		str	r4, [sp, #40]
 416:Src/main.c    **** 
 681              		.loc 1 416 3 is_stmt 1 view .LVU234
 416:Src/main.c    **** 
 682              		.loc 1 416 22 is_stmt 0 view .LVU235
 683 0022 0094     		str	r4, [sp]
 684 0024 0194     		str	r4, [sp, #4]
 685 0026 0294     		str	r4, [sp, #8]
 686 0028 0394     		str	r4, [sp, #12]
 421:Src/main.c    ****   htim3.Init.Prescaler = TIM3_PRESCALER;
 687              		.loc 1 421 3 is_stmt 1 view .LVU236
ARM GAS  /tmp/ccIlGWJH.s 			page 27


 421:Src/main.c    ****   htim3.Init.Prescaler = TIM3_PRESCALER;
 688              		.loc 1 421 18 is_stmt 0 view .LVU237
 689 002a 214D     		ldr	r5, .L15
 690 002c 214B     		ldr	r3, .L15+4
 691 002e 2B60     		str	r3, [r5]
 422:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 692              		.loc 1 422 3 is_stmt 1 view .LVU238
 422:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 693              		.loc 1 422 24 is_stmt 0 view .LVU239
 694 0030 4723     		movs	r3, #71
 695 0032 6B60     		str	r3, [r5, #4]
 423:Src/main.c    ****   htim3.Init.Period = 0xFFFF;
 696              		.loc 1 423 3 is_stmt 1 view .LVU240
 423:Src/main.c    ****   htim3.Init.Period = 0xFFFF;
 697              		.loc 1 423 26 is_stmt 0 view .LVU241
 698 0034 AC60     		str	r4, [r5, #8]
 424:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 699              		.loc 1 424 3 is_stmt 1 view .LVU242
 424:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 700              		.loc 1 424 21 is_stmt 0 view .LVU243
 701 0036 4FF6FF73 		movw	r3, #65535
 702 003a EB60     		str	r3, [r5, #12]
 425:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 703              		.loc 1 425 3 is_stmt 1 view .LVU244
 425:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 704              		.loc 1 425 28 is_stmt 0 view .LVU245
 705 003c 2C61     		str	r4, [r5, #16]
 426:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 706              		.loc 1 426 3 is_stmt 1 view .LVU246
 426:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 707              		.loc 1 426 32 is_stmt 0 view .LVU247
 708 003e AC61     		str	r4, [r5, #24]
 427:Src/main.c    ****   {
 709              		.loc 1 427 3 is_stmt 1 view .LVU248
 427:Src/main.c    ****   {
 710              		.loc 1 427 7 is_stmt 0 view .LVU249
 711 0040 2846     		mov	r0, r5
 712 0042 FFF7FEFF 		bl	HAL_TIM_Base_Init
 713              	.LVL28:
 431:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 714              		.loc 1 431 3 is_stmt 1 view .LVU250
 431:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 715              		.loc 1 431 34 is_stmt 0 view .LVU251
 716 0046 4FF48053 		mov	r3, #4096
 717 004a 0E93     		str	r3, [sp, #56]
 432:Src/main.c    ****   {
 718              		.loc 1 432 3 is_stmt 1 view .LVU252
 432:Src/main.c    ****   {
 719              		.loc 1 432 7 is_stmt 0 view .LVU253
 720 004c 0EA9     		add	r1, sp, #56
 721 004e 2846     		mov	r0, r5
 722 0050 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 723              	.LVL29:
 436:Src/main.c    ****   {
 724              		.loc 1 436 3 is_stmt 1 view .LVU254
 436:Src/main.c    ****   {
 725              		.loc 1 436 7 is_stmt 0 view .LVU255
ARM GAS  /tmp/ccIlGWJH.s 			page 28


 726 0054 2846     		mov	r0, r5
 727 0056 FFF7FEFF 		bl	HAL_TIM_OC_Init
 728              	.LVL30:
 440:Src/main.c    ****   {
 729              		.loc 1 440 3 is_stmt 1 view .LVU256
 440:Src/main.c    ****   {
 730              		.loc 1 440 7 is_stmt 0 view .LVU257
 731 005a 2846     		mov	r0, r5
 732 005c FFF7FEFF 		bl	HAL_TIM_IC_Init
 733              	.LVL31:
 444:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 734              		.loc 1 444 3 is_stmt 1 view .LVU258
 444:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 735              		.loc 1 444 37 is_stmt 0 view .LVU259
 736 0060 0B94     		str	r4, [sp, #44]
 445:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 737              		.loc 1 445 3 is_stmt 1 view .LVU260
 445:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 738              		.loc 1 445 33 is_stmt 0 view .LVU261
 739 0062 0D94     		str	r4, [sp, #52]
 446:Src/main.c    ****   {
 740              		.loc 1 446 3 is_stmt 1 view .LVU262
 446:Src/main.c    ****   {
 741              		.loc 1 446 7 is_stmt 0 view .LVU263
 742 0064 0BA9     		add	r1, sp, #44
 743 0066 2846     		mov	r0, r5
 744 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 745              	.LVL32:
 450:Src/main.c    ****   sConfigOC.Pulse = 0;
 746              		.loc 1 450 3 is_stmt 1 view .LVU264
 450:Src/main.c    ****   sConfigOC.Pulse = 0;
 747              		.loc 1 450 20 is_stmt 0 view .LVU265
 748 006c 0494     		str	r4, [sp, #16]
 451:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 749              		.loc 1 451 3 is_stmt 1 view .LVU266
 451:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 750              		.loc 1 451 19 is_stmt 0 view .LVU267
 751 006e 0594     		str	r4, [sp, #20]
 452:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 752              		.loc 1 452 3 is_stmt 1 view .LVU268
 452:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 753              		.loc 1 452 24 is_stmt 0 view .LVU269
 754 0070 0694     		str	r4, [sp, #24]
 453:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 755              		.loc 1 453 3 is_stmt 1 view .LVU270
 453:Src/main.c    ****   if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 756              		.loc 1 453 24 is_stmt 0 view .LVU271
 757 0072 0894     		str	r4, [sp, #32]
 454:Src/main.c    ****   {
 758              		.loc 1 454 3 is_stmt 1 view .LVU272
 454:Src/main.c    ****   {
 759              		.loc 1 454 7 is_stmt 0 view .LVU273
 760 0074 2246     		mov	r2, r4
 761 0076 04A9     		add	r1, sp, #16
 762 0078 2846     		mov	r0, r5
 763 007a FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 764              	.LVL33:
ARM GAS  /tmp/ccIlGWJH.s 			page 29


 458:Src/main.c    ****   {
 765              		.loc 1 458 3 is_stmt 1 view .LVU274
 458:Src/main.c    ****   {
 766              		.loc 1 458 7 is_stmt 0 view .LVU275
 767 007e 0422     		movs	r2, #4
 768 0080 04A9     		add	r1, sp, #16
 769 0082 2846     		mov	r0, r5
 770 0084 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 771              	.LVL34:
 462:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 772              		.loc 1 462 3 is_stmt 1 view .LVU276
 462:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 773              		.loc 1 462 24 is_stmt 0 view .LVU277
 774 0088 0223     		movs	r3, #2
 775 008a 0093     		str	r3, [sp]
 463:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 776              		.loc 1 463 3 is_stmt 1 view .LVU278
 463:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 777              		.loc 1 463 25 is_stmt 0 view .LVU279
 778 008c 0123     		movs	r3, #1
 779 008e 0193     		str	r3, [sp, #4]
 464:Src/main.c    ****   sConfigIC.ICFilter = 15;
 780              		.loc 1 464 3 is_stmt 1 view .LVU280
 464:Src/main.c    ****   sConfigIC.ICFilter = 15;
 781              		.loc 1 464 25 is_stmt 0 view .LVU281
 782 0090 0294     		str	r4, [sp, #8]
 465:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 783              		.loc 1 465 3 is_stmt 1 view .LVU282
 465:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 784              		.loc 1 465 22 is_stmt 0 view .LVU283
 785 0092 0F23     		movs	r3, #15
 786 0094 0393     		str	r3, [sp, #12]
 466:Src/main.c    ****   {
 787              		.loc 1 466 3 is_stmt 1 view .LVU284
 466:Src/main.c    ****   {
 788              		.loc 1 466 7 is_stmt 0 view .LVU285
 789 0096 0822     		movs	r2, #8
 790 0098 6946     		mov	r1, sp
 791 009a 2846     		mov	r0, r5
 792 009c FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 793              	.LVL35:
 470:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 794              		.loc 1 470 3 is_stmt 1 view .LVU286
 470:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 795              		.loc 1 470 24 is_stmt 0 view .LVU287
 796 00a0 0094     		str	r4, [sp]
 471:Src/main.c    ****   {
 797              		.loc 1 471 3 is_stmt 1 view .LVU288
 471:Src/main.c    ****   {
 798              		.loc 1 471 7 is_stmt 0 view .LVU289
 799 00a2 0C22     		movs	r2, #12
 800 00a4 6946     		mov	r1, sp
 801 00a6 2846     		mov	r0, r5
 802 00a8 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 803              	.LVL36:
 479:Src/main.c    **** 
 804              		.loc 1 479 1 view .LVU290
ARM GAS  /tmp/ccIlGWJH.s 			page 30


 805 00ac 13B0     		add	sp, sp, #76
 806              	.LCFI11:
 807              		.cfi_def_cfa_offset 12
 808              		@ sp needed
 809 00ae 30BD     		pop	{r4, r5, pc}
 810              	.L16:
 811              		.align	2
 812              	.L15:
 813 00b0 00000000 		.word	htim3
 814 00b4 00040040 		.word	1073742848
 815              		.cfi_endproc
 816              	.LFE130:
 818              		.section	.text.MX_ADC1_Init,"ax",%progbits
 819              		.align	1
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu fpv4-sp-d16
 825              	MX_ADC1_Init:
 826              	.LFB128:
 186:Src/main.c    **** 
 827              		.loc 1 186 1 is_stmt 1 view -0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 40
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 832              	.LCFI12:
 833              		.cfi_def_cfa_offset 20
 834              		.cfi_offset 4, -20
 835              		.cfi_offset 5, -16
 836              		.cfi_offset 6, -12
 837              		.cfi_offset 7, -8
 838              		.cfi_offset 14, -4
 839 0002 8BB0     		sub	sp, sp, #44
 840              	.LCFI13:
 841              		.cfi_def_cfa_offset 64
 192:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 842              		.loc 1 192 3 view .LVU292
 192:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 843              		.loc 1 192 24 is_stmt 0 view .LVU293
 844 0004 0025     		movs	r5, #0
 845 0006 0795     		str	r5, [sp, #28]
 846 0008 0895     		str	r5, [sp, #32]
 847 000a 0995     		str	r5, [sp, #36]
 193:Src/main.c    **** 
 848              		.loc 1 193 3 is_stmt 1 view .LVU294
 193:Src/main.c    **** 
 849              		.loc 1 193 26 is_stmt 0 view .LVU295
 850 000c 0195     		str	r5, [sp, #4]
 851 000e 0295     		str	r5, [sp, #8]
 852 0010 0395     		str	r5, [sp, #12]
 853 0012 0495     		str	r5, [sp, #16]
 854 0014 0595     		str	r5, [sp, #20]
 855 0016 0695     		str	r5, [sp, #24]
 200:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 856              		.loc 1 200 3 is_stmt 1 view .LVU296
 200:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
ARM GAS  /tmp/ccIlGWJH.s 			page 31


 857              		.loc 1 200 18 is_stmt 0 view .LVU297
 858 0018 1B4C     		ldr	r4, .L19
 859 001a 4FF0A043 		mov	r3, #1342177280
 860 001e 2360     		str	r3, [r4]
 201:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 861              		.loc 1 201 3 is_stmt 1 view .LVU298
 201:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 862              		.loc 1 201 29 is_stmt 0 view .LVU299
 863 0020 4FF40033 		mov	r3, #131072
 864 0024 6360     		str	r3, [r4, #4]
 202:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 865              		.loc 1 202 3 is_stmt 1 view .LVU300
 202:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 866              		.loc 1 202 25 is_stmt 0 view .LVU301
 867 0026 A560     		str	r5, [r4, #8]
 203:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 868              		.loc 1 203 3 is_stmt 1 view .LVU302
 203:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 869              		.loc 1 203 27 is_stmt 0 view .LVU303
 870 0028 0126     		movs	r6, #1
 871 002a 2661     		str	r6, [r4, #16]
 204:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 872              		.loc 1 204 3 is_stmt 1 view .LVU304
 204:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 873              		.loc 1 204 33 is_stmt 0 view .LVU305
 874 002c E561     		str	r5, [r4, #28]
 205:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 875              		.loc 1 205 3 is_stmt 1 view .LVU306
 205:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 876              		.loc 1 205 36 is_stmt 0 view .LVU307
 877 002e 6562     		str	r5, [r4, #36]
 206:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 878              		.loc 1 206 3 is_stmt 1 view .LVU308
 206:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 879              		.loc 1 206 35 is_stmt 0 view .LVU309
 880 0030 4FF48063 		mov	r3, #1024
 881 0034 2363     		str	r3, [r4, #48]
 207:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 882              		.loc 1 207 3 is_stmt 1 view .LVU310
 207:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 883              		.loc 1 207 31 is_stmt 0 view .LVU311
 884 0036 4FF4E073 		mov	r3, #448
 885 003a E362     		str	r3, [r4, #44]
 208:Src/main.c    ****   hadc1.Init.NbrOfConversion = 2;
 886              		.loc 1 208 3 is_stmt 1 view .LVU312
 208:Src/main.c    ****   hadc1.Init.NbrOfConversion = 2;
 887              		.loc 1 208 24 is_stmt 0 view .LVU313
 888 003c E560     		str	r5, [r4, #12]
 209:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 889              		.loc 1 209 3 is_stmt 1 view .LVU314
 209:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 890              		.loc 1 209 30 is_stmt 0 view .LVU315
 891 003e 0227     		movs	r7, #2
 892 0040 2762     		str	r7, [r4, #32]
 210:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 893              		.loc 1 210 3 is_stmt 1 view .LVU316
 210:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
ARM GAS  /tmp/ccIlGWJH.s 			page 32


 894              		.loc 1 210 36 is_stmt 0 view .LVU317
 895 0042 6663     		str	r6, [r4, #52]
 211:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 896              		.loc 1 211 3 is_stmt 1 view .LVU318
 211:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 897              		.loc 1 211 27 is_stmt 0 view .LVU319
 898 0044 0823     		movs	r3, #8
 899 0046 6361     		str	r3, [r4, #20]
 212:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 900              		.loc 1 212 3 is_stmt 1 view .LVU320
 212:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 901              		.loc 1 212 31 is_stmt 0 view .LVU321
 902 0048 A561     		str	r5, [r4, #24]
 213:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 903              		.loc 1 213 3 is_stmt 1 view .LVU322
 213:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 904              		.loc 1 213 22 is_stmt 0 view .LVU323
 905 004a A563     		str	r5, [r4, #56]
 214:Src/main.c    ****   {
 906              		.loc 1 214 3 is_stmt 1 view .LVU324
 214:Src/main.c    ****   {
 907              		.loc 1 214 7 is_stmt 0 view .LVU325
 908 004c 2046     		mov	r0, r4
 909 004e FFF7FEFF 		bl	HAL_ADC_Init
 910              	.LVL37:
 220:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 911              		.loc 1 220 3 is_stmt 1 view .LVU326
 220:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 912              		.loc 1 220 18 is_stmt 0 view .LVU327
 913 0052 0795     		str	r5, [sp, #28]
 221:Src/main.c    ****   {
 914              		.loc 1 221 3 is_stmt 1 view .LVU328
 221:Src/main.c    ****   {
 915              		.loc 1 221 7 is_stmt 0 view .LVU329
 916 0054 07A9     		add	r1, sp, #28
 917 0056 2046     		mov	r0, r4
 918 0058 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 919              	.LVL38:
 227:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 920              		.loc 1 227 3 is_stmt 1 view .LVU330
 227:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 921              		.loc 1 227 19 is_stmt 0 view .LVU331
 922 005c 0196     		str	r6, [sp, #4]
 228:Src/main.c    ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 923              		.loc 1 228 3 is_stmt 1 view .LVU332
 228:Src/main.c    ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 924              		.loc 1 228 16 is_stmt 0 view .LVU333
 925 005e 0296     		str	r6, [sp, #8]
 229:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 926              		.loc 1 229 3 is_stmt 1 view .LVU334
 229:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 927              		.loc 1 229 22 is_stmt 0 view .LVU335
 928 0060 0496     		str	r6, [sp, #16]
 230:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 929              		.loc 1 230 3 is_stmt 1 view .LVU336
 230:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 930              		.loc 1 230 24 is_stmt 0 view .LVU337
ARM GAS  /tmp/ccIlGWJH.s 			page 33


 931 0062 0423     		movs	r3, #4
 932 0064 0393     		str	r3, [sp, #12]
 231:Src/main.c    ****   sConfig.Offset = 0;
 933              		.loc 1 231 3 is_stmt 1 view .LVU338
 231:Src/main.c    ****   sConfig.Offset = 0;
 934              		.loc 1 231 24 is_stmt 0 view .LVU339
 935 0066 0595     		str	r5, [sp, #20]
 232:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 936              		.loc 1 232 3 is_stmt 1 view .LVU340
 232:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 937              		.loc 1 232 18 is_stmt 0 view .LVU341
 938 0068 0695     		str	r5, [sp, #24]
 233:Src/main.c    ****   {
 939              		.loc 1 233 3 is_stmt 1 view .LVU342
 233:Src/main.c    ****   {
 940              		.loc 1 233 7 is_stmt 0 view .LVU343
 941 006a 0DEB0301 		add	r1, sp, r3
 942 006e 2046     		mov	r0, r4
 943 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 944              	.LVL39:
 239:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 945              		.loc 1 239 3 is_stmt 1 view .LVU344
 239:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_2;
 946              		.loc 1 239 19 is_stmt 0 view .LVU345
 947 0074 0323     		movs	r3, #3
 948 0076 0193     		str	r3, [sp, #4]
 240:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 949              		.loc 1 240 3 is_stmt 1 view .LVU346
 240:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 950              		.loc 1 240 16 is_stmt 0 view .LVU347
 951 0078 0297     		str	r7, [sp, #8]
 241:Src/main.c    ****   {
 952              		.loc 1 241 3 is_stmt 1 view .LVU348
 241:Src/main.c    ****   {
 953              		.loc 1 241 7 is_stmt 0 view .LVU349
 954 007a 01A9     		add	r1, sp, #4
 955 007c 2046     		mov	r0, r4
 956 007e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 957              	.LVL40:
 249:Src/main.c    **** 
 958              		.loc 1 249 1 view .LVU350
 959 0082 0BB0     		add	sp, sp, #44
 960              	.LCFI14:
 961              		.cfi_def_cfa_offset 20
 962              		@ sp needed
 963 0084 F0BD     		pop	{r4, r5, r6, r7, pc}
 964              	.L20:
 965 0086 00BF     		.align	2
 966              	.L19:
 967 0088 00000000 		.word	hadc1
 968              		.cfi_endproc
 969              	.LFE128:
 971              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 972              		.align	1
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
ARM GAS  /tmp/ccIlGWJH.s 			page 34


 976              		.fpu fpv4-sp-d16
 978              	MX_USART1_UART_Init:
 979              	.LFB131:
 487:Src/main.c    **** 
 980              		.loc 1 487 1 is_stmt 1 view -0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 984 0000 08B5     		push	{r3, lr}
 985              	.LCFI15:
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 3, -8
 988              		.cfi_offset 14, -4
 496:Src/main.c    ****   huart1.Init.BaudRate = 38400;
 989              		.loc 1 496 3 view .LVU352
 496:Src/main.c    ****   huart1.Init.BaudRate = 38400;
 990              		.loc 1 496 19 is_stmt 0 view .LVU353
 991 0002 0948     		ldr	r0, .L23
 992 0004 094B     		ldr	r3, .L23+4
 993 0006 0360     		str	r3, [r0]
 497:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 994              		.loc 1 497 3 is_stmt 1 view .LVU354
 497:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 995              		.loc 1 497 24 is_stmt 0 view .LVU355
 996 0008 4FF41643 		mov	r3, #38400
 997 000c 4360     		str	r3, [r0, #4]
 498:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 998              		.loc 1 498 3 is_stmt 1 view .LVU356
 498:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 999              		.loc 1 498 26 is_stmt 0 view .LVU357
 1000 000e 0023     		movs	r3, #0
 1001 0010 8360     		str	r3, [r0, #8]
 499:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 1002              		.loc 1 499 3 is_stmt 1 view .LVU358
 499:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 1003              		.loc 1 499 24 is_stmt 0 view .LVU359
 1004 0012 C360     		str	r3, [r0, #12]
 500:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1005              		.loc 1 500 3 is_stmt 1 view .LVU360
 500:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1006              		.loc 1 500 22 is_stmt 0 view .LVU361
 1007 0014 0361     		str	r3, [r0, #16]
 501:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1008              		.loc 1 501 3 is_stmt 1 view .LVU362
 501:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1009              		.loc 1 501 20 is_stmt 0 view .LVU363
 1010 0016 0C22     		movs	r2, #12
 1011 0018 4261     		str	r2, [r0, #20]
 502:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1012              		.loc 1 502 3 is_stmt 1 view .LVU364
 502:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1013              		.loc 1 502 25 is_stmt 0 view .LVU365
 1014 001a 8361     		str	r3, [r0, #24]
 503:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1015              		.loc 1 503 3 is_stmt 1 view .LVU366
 503:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1016              		.loc 1 503 28 is_stmt 0 view .LVU367
ARM GAS  /tmp/ccIlGWJH.s 			page 35


 1017 001c C361     		str	r3, [r0, #28]
 504:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1018              		.loc 1 504 3 is_stmt 1 view .LVU368
 504:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1019              		.loc 1 504 30 is_stmt 0 view .LVU369
 1020 001e 0362     		str	r3, [r0, #32]
 505:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1021              		.loc 1 505 3 is_stmt 1 view .LVU370
 505:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1022              		.loc 1 505 38 is_stmt 0 view .LVU371
 1023 0020 4362     		str	r3, [r0, #36]
 506:Src/main.c    ****   {
 1024              		.loc 1 506 3 is_stmt 1 view .LVU372
 506:Src/main.c    ****   {
 1025              		.loc 1 506 7 is_stmt 0 view .LVU373
 1026 0022 FFF7FEFF 		bl	HAL_UART_Init
 1027              	.LVL41:
 514:Src/main.c    **** 
 1028              		.loc 1 514 1 view .LVU374
 1029 0026 08BD     		pop	{r3, pc}
 1030              	.L24:
 1031              		.align	2
 1032              	.L23:
 1033 0028 00000000 		.word	huart1
 1034 002c 00380140 		.word	1073821696
 1035              		.cfi_endproc
 1036              	.LFE131:
 1038              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1039              		.align	1
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu fpv4-sp-d16
 1045              	MX_USART3_UART_Init:
 1046              	.LFB132:
 522:Src/main.c    **** 
 1047              		.loc 1 522 1 is_stmt 1 view -0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051 0000 08B5     		push	{r3, lr}
 1052              	.LCFI16:
 1053              		.cfi_def_cfa_offset 8
 1054              		.cfi_offset 3, -8
 1055              		.cfi_offset 14, -4
 531:Src/main.c    ****   huart3.Init.BaudRate = 38400;
 1056              		.loc 1 531 3 view .LVU376
 531:Src/main.c    ****   huart3.Init.BaudRate = 38400;
 1057              		.loc 1 531 19 is_stmt 0 view .LVU377
 1058 0002 0948     		ldr	r0, .L27
 1059 0004 094B     		ldr	r3, .L27+4
 1060 0006 0360     		str	r3, [r0]
 532:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1061              		.loc 1 532 3 is_stmt 1 view .LVU378
 532:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1062              		.loc 1 532 24 is_stmt 0 view .LVU379
 1063 0008 4FF41643 		mov	r3, #38400
ARM GAS  /tmp/ccIlGWJH.s 			page 36


 1064 000c 4360     		str	r3, [r0, #4]
 533:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1065              		.loc 1 533 3 is_stmt 1 view .LVU380
 533:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1066              		.loc 1 533 26 is_stmt 0 view .LVU381
 1067 000e 0023     		movs	r3, #0
 1068 0010 8360     		str	r3, [r0, #8]
 534:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 1069              		.loc 1 534 3 is_stmt 1 view .LVU382
 534:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 1070              		.loc 1 534 24 is_stmt 0 view .LVU383
 1071 0012 C360     		str	r3, [r0, #12]
 535:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1072              		.loc 1 535 3 is_stmt 1 view .LVU384
 535:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1073              		.loc 1 535 22 is_stmt 0 view .LVU385
 1074 0014 0361     		str	r3, [r0, #16]
 536:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1075              		.loc 1 536 3 is_stmt 1 view .LVU386
 536:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1076              		.loc 1 536 20 is_stmt 0 view .LVU387
 1077 0016 0C22     		movs	r2, #12
 1078 0018 4261     		str	r2, [r0, #20]
 537:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1079              		.loc 1 537 3 is_stmt 1 view .LVU388
 537:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1080              		.loc 1 537 25 is_stmt 0 view .LVU389
 1081 001a 8361     		str	r3, [r0, #24]
 538:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1082              		.loc 1 538 3 is_stmt 1 view .LVU390
 538:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1083              		.loc 1 538 28 is_stmt 0 view .LVU391
 1084 001c C361     		str	r3, [r0, #28]
 539:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1085              		.loc 1 539 3 is_stmt 1 view .LVU392
 539:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1086              		.loc 1 539 30 is_stmt 0 view .LVU393
 1087 001e 0362     		str	r3, [r0, #32]
 540:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1088              		.loc 1 540 3 is_stmt 1 view .LVU394
 540:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1089              		.loc 1 540 38 is_stmt 0 view .LVU395
 1090 0020 4362     		str	r3, [r0, #36]
 541:Src/main.c    ****   {
 1091              		.loc 1 541 3 is_stmt 1 view .LVU396
 541:Src/main.c    ****   {
 1092              		.loc 1 541 7 is_stmt 0 view .LVU397
 1093 0022 FFF7FEFF 		bl	HAL_UART_Init
 1094              	.LVL42:
 549:Src/main.c    **** 
 1095              		.loc 1 549 1 view .LVU398
 1096 0026 08BD     		pop	{r3, pc}
 1097              	.L28:
 1098              		.align	2
 1099              	.L27:
 1100 0028 00000000 		.word	huart3
 1101 002c 00480040 		.word	1073760256
ARM GAS  /tmp/ccIlGWJH.s 			page 37


 1102              		.cfi_endproc
 1103              	.LFE132:
 1105              		.section	.text.SystemClock_Config,"ax",%progbits
 1106              		.align	1
 1107              		.global	SystemClock_Config
 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1111              		.fpu fpv4-sp-d16
 1113              	SystemClock_Config:
 1114              	.LFB127:
 140:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1115              		.loc 1 140 1 is_stmt 1 view -0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 88
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119 0000 30B5     		push	{r4, r5, lr}
 1120              	.LCFI17:
 1121              		.cfi_def_cfa_offset 12
 1122              		.cfi_offset 4, -12
 1123              		.cfi_offset 5, -8
 1124              		.cfi_offset 14, -4
 1125 0002 97B0     		sub	sp, sp, #92
 1126              	.LCFI18:
 1127              		.cfi_def_cfa_offset 104
 141:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1128              		.loc 1 141 3 view .LVU400
 141:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1129              		.loc 1 141 22 is_stmt 0 view .LVU401
 1130 0004 0024     		movs	r4, #0
 1131 0006 0E94     		str	r4, [sp, #56]
 1132 0008 0F94     		str	r4, [sp, #60]
 1133 000a 1194     		str	r4, [sp, #68]
 1134 000c 1294     		str	r4, [sp, #72]
 142:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1135              		.loc 1 142 3 is_stmt 1 view .LVU402
 142:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1136              		.loc 1 142 22 is_stmt 0 view .LVU403
 1137 000e 0794     		str	r4, [sp, #28]
 1138 0010 0894     		str	r4, [sp, #32]
 1139 0012 0994     		str	r4, [sp, #36]
 1140 0014 0A94     		str	r4, [sp, #40]
 1141 0016 0B94     		str	r4, [sp, #44]
 143:Src/main.c    **** 
 1142              		.loc 1 143 3 is_stmt 1 view .LVU404
 143:Src/main.c    **** 
 1143              		.loc 1 143 28 is_stmt 0 view .LVU405
 1144 0018 0094     		str	r4, [sp]
 1145 001a 0194     		str	r4, [sp, #4]
 1146 001c 0294     		str	r4, [sp, #8]
 1147 001e 0394     		str	r4, [sp, #12]
 1148 0020 0494     		str	r4, [sp, #16]
 1149 0022 0594     		str	r4, [sp, #20]
 1150 0024 0694     		str	r4, [sp, #24]
 147:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1151              		.loc 1 147 3 is_stmt 1 view .LVU406
 147:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
ARM GAS  /tmp/ccIlGWJH.s 			page 38


 1152              		.loc 1 147 36 is_stmt 0 view .LVU407
 1153 0026 0122     		movs	r2, #1
 1154 0028 0C92     		str	r2, [sp, #48]
 148:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1155              		.loc 1 148 3 is_stmt 1 view .LVU408
 148:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1156              		.loc 1 148 30 is_stmt 0 view .LVU409
 1157 002a 4FF48033 		mov	r3, #65536
 1158 002e 0D93     		str	r3, [sp, #52]
 149:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1159              		.loc 1 149 3 is_stmt 1 view .LVU410
 150:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1160              		.loc 1 150 3 view .LVU411
 150:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1161              		.loc 1 150 30 is_stmt 0 view .LVU412
 1162 0030 1092     		str	r2, [sp, #64]
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1163              		.loc 1 151 3 is_stmt 1 view .LVU413
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1164              		.loc 1 151 34 is_stmt 0 view .LVU414
 1165 0032 0225     		movs	r5, #2
 1166 0034 1395     		str	r5, [sp, #76]
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1167              		.loc 1 152 3 is_stmt 1 view .LVU415
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1168              		.loc 1 152 35 is_stmt 0 view .LVU416
 1169 0036 1493     		str	r3, [sp, #80]
 153:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1170              		.loc 1 153 3 is_stmt 1 view .LVU417
 153:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1171              		.loc 1 153 32 is_stmt 0 view .LVU418
 1172 0038 4FF4E013 		mov	r3, #1835008
 1173 003c 1593     		str	r3, [sp, #84]
 154:Src/main.c    ****   {
 1174              		.loc 1 154 3 is_stmt 1 view .LVU419
 154:Src/main.c    ****   {
 1175              		.loc 1 154 7 is_stmt 0 view .LVU420
 1176 003e 0CA8     		add	r0, sp, #48
 1177 0040 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1178              	.LVL43:
 160:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1179              		.loc 1 160 3 is_stmt 1 view .LVU421
 160:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1180              		.loc 1 160 31 is_stmt 0 view .LVU422
 1181 0044 0F23     		movs	r3, #15
 1182 0046 0793     		str	r3, [sp, #28]
 162:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1183              		.loc 1 162 3 is_stmt 1 view .LVU423
 162:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1184              		.loc 1 162 34 is_stmt 0 view .LVU424
 1185 0048 0895     		str	r5, [sp, #32]
 163:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1186              		.loc 1 163 3 is_stmt 1 view .LVU425
 163:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1187              		.loc 1 163 35 is_stmt 0 view .LVU426
 1188 004a 0994     		str	r4, [sp, #36]
 164:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/ccIlGWJH.s 			page 39


 1189              		.loc 1 164 3 is_stmt 1 view .LVU427
 164:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1190              		.loc 1 164 36 is_stmt 0 view .LVU428
 1191 004c 4FF48063 		mov	r3, #1024
 1192 0050 0A93     		str	r3, [sp, #40]
 165:Src/main.c    **** 
 1193              		.loc 1 165 3 is_stmt 1 view .LVU429
 165:Src/main.c    **** 
 1194              		.loc 1 165 36 is_stmt 0 view .LVU430
 1195 0052 0B94     		str	r4, [sp, #44]
 167:Src/main.c    ****   {
 1196              		.loc 1 167 3 is_stmt 1 view .LVU431
 167:Src/main.c    ****   {
 1197              		.loc 1 167 7 is_stmt 0 view .LVU432
 1198 0054 2946     		mov	r1, r5
 1199 0056 07A8     		add	r0, sp, #28
 1200 0058 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1201              	.LVL44:
 171:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 1202              		.loc 1 171 3 is_stmt 1 view .LVU433
 171:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 1203              		.loc 1 171 38 is_stmt 0 view .LVU434
 1204 005c 44F20103 		movw	r3, #16385
 1205 0060 0093     		str	r3, [sp]
 172:Src/main.c    ****   PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 1206              		.loc 1 172 3 is_stmt 1 view .LVU435
 172:Src/main.c    ****   PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 1207              		.loc 1 172 38 is_stmt 0 view .LVU436
 1208 0062 0294     		str	r4, [sp, #8]
 173:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1209              		.loc 1 173 3 is_stmt 1 view .LVU437
 173:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1210              		.loc 1 173 38 is_stmt 0 view .LVU438
 1211 0064 4FF48053 		mov	r3, #4096
 1212 0068 0693     		str	r3, [sp, #24]
 174:Src/main.c    ****   {
 1213              		.loc 1 174 3 is_stmt 1 view .LVU439
 174:Src/main.c    ****   {
 1214              		.loc 1 174 7 is_stmt 0 view .LVU440
 1215 006a 6846     		mov	r0, sp
 1216 006c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1217              	.LVL45:
 178:Src/main.c    **** 
 1218              		.loc 1 178 1 view .LVU441
 1219 0070 17B0     		add	sp, sp, #92
 1220              	.LCFI19:
 1221              		.cfi_def_cfa_offset 12
 1222              		@ sp needed
 1223 0072 30BD     		pop	{r4, r5, pc}
 1224              		.cfi_endproc
 1225              	.LFE127:
 1227              		.section	.text.main,"ax",%progbits
 1228              		.align	1
 1229              		.global	main
 1230              		.syntax unified
 1231              		.thumb
 1232              		.thumb_func
ARM GAS  /tmp/ccIlGWJH.s 			page 40


 1233              		.fpu fpv4-sp-d16
 1235              	main:
 1236              	.LFB126:
  84:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1237              		.loc 1 84 1 is_stmt 1 view -0
 1238              		.cfi_startproc
 1239              		@ Volatile: function does not return.
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242 0000 08B5     		push	{r3, lr}
 1243              	.LCFI20:
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 3, -8
 1246              		.cfi_offset 14, -4
  92:Src/main.c    **** 
 1247              		.loc 1 92 3 view .LVU443
 1248 0002 FFF7FEFF 		bl	HAL_Init
 1249              	.LVL46:
  99:Src/main.c    **** 
 1250              		.loc 1 99 3 view .LVU444
 1251 0006 FFF7FEFF 		bl	SystemClock_Config
 1252              	.LVL47:
 106:Src/main.c    ****   MX_DMA_Init();
 1253              		.loc 1 106 3 view .LVU445
 1254 000a FFF7FEFF 		bl	MX_GPIO_Init
 1255              	.LVL48:
 107:Src/main.c    ****   MX_HRTIM1_Init();
 1256              		.loc 1 107 3 view .LVU446
 1257 000e FFF7FEFF 		bl	MX_DMA_Init
 1258              	.LVL49:
 108:Src/main.c    ****   MX_TIM3_Init();
 1259              		.loc 1 108 3 view .LVU447
 1260 0012 FFF7FEFF 		bl	MX_HRTIM1_Init
 1261              	.LVL50:
 109:Src/main.c    ****   MX_ADC1_Init();
 1262              		.loc 1 109 3 view .LVU448
 1263 0016 FFF7FEFF 		bl	MX_TIM3_Init
 1264              	.LVL51:
 110:Src/main.c    ****   MX_USART1_UART_Init();
 1265              		.loc 1 110 3 view .LVU449
 1266 001a FFF7FEFF 		bl	MX_ADC1_Init
 1267              	.LVL52:
 111:Src/main.c    ****   MX_USART3_UART_Init();
 1268              		.loc 1 111 3 view .LVU450
 1269 001e FFF7FEFF 		bl	MX_USART1_UART_Init
 1270              	.LVL53:
 112:Src/main.c    **** 
 1271              		.loc 1 112 3 view .LVU451
 1272 0022 FFF7FEFF 		bl	MX_USART3_UART_Init
 1273              	.LVL54:
 115:Src/main.c    ****   // Sr_SetVoltage(0.0f);
 1274              		.loc 1 115 3 view .LVU452
 1275 0026 FFF7FEFF 		bl	Sr_Start
 1276              	.LVL55:
 118:Src/main.c    **** 
 1277              		.loc 1 118 3 view .LVU453
 1278              	.L32:
ARM GAS  /tmp/ccIlGWJH.s 			page 41


 118:Src/main.c    **** 
 1279              		.loc 1 118 29 discriminator 1 view .LVU454
 118:Src/main.c    **** 
 1280              		.loc 1 118 11 is_stmt 0 discriminator 1 view .LVU455
 1281 002a FFF7FEFF 		bl	Sr_IsStabilized
 1282              	.LVL56:
 118:Src/main.c    **** 
 1283              		.loc 1 118 9 discriminator 1 view .LVU456
 1284 002e 0028     		cmp	r0, #0
 1285 0030 FBD0     		beq	.L32
 1286              	.L33:
 125:Src/main.c    ****   {
 1287              		.loc 1 125 3 is_stmt 1 discriminator 1 view .LVU457
 131:Src/main.c    ****   /* USER CODE END 3 */
 1288              		.loc 1 131 3 discriminator 1 view .LVU458
 1289 0032 FEE7     		b	.L33
 1290              		.cfi_endproc
 1291              	.LFE126:
 1293              		.section	.text.Error_Handler,"ax",%progbits
 1294              		.align	1
 1295              		.global	Error_Handler
 1296              		.syntax unified
 1297              		.thumb
 1298              		.thumb_func
 1299              		.fpu fpv4-sp-d16
 1301              	Error_Handler:
 1302              	.LFB135:
 615:Src/main.c    **** 
 616:Src/main.c    **** /* USER CODE BEGIN 4 */
 617:Src/main.c    **** 
 618:Src/main.c    **** /* USER CODE END 4 */
 619:Src/main.c    **** 
 620:Src/main.c    **** /**
 621:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 622:Src/main.c    ****   * @retval None
 623:Src/main.c    ****   */
 624:Src/main.c    **** void Error_Handler(void)
 625:Src/main.c    **** {
 1303              		.loc 1 625 1 view -0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              		@ link register save eliminated.
 626:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 627:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 628:Src/main.c    **** 
 629:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 630:Src/main.c    **** }
 1308              		.loc 1 630 1 view .LVU460
 1309 0000 7047     		bx	lr
 1310              		.cfi_endproc
 1311              	.LFE135:
 1313              		.comm	huart3,112,4
 1314              		.comm	huart1,112,4
 1315              		.comm	htim3,64,4
 1316              		.comm	hhrtim1,220,4
 1317              		.comm	hdma_adc1,68,4
ARM GAS  /tmp/ccIlGWJH.s 			page 42


 1318              		.comm	hadc1,84,4
 1319              		.text
 1320              	.Letext0:
 1321              		.file 2 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine
 1322              		.file 3 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_st
 1323              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1324              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 1325              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f334x8.h"
 1326              		.file 7 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 1327              		.file 8 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/loc
 1328              		.file 9 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_ty
 1329              		.file 10 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/
 1330              		.file 11 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/re
 1331              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1332              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1333              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1334              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1335              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1336              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 1337              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 1338              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_hrtim.h"
 1339              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 1340              		.file 21 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 1341              		.file 22 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1342              		.file 23 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 1343              		.file 24 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 1344              		.file 25 "Inc/main.h"
 1345              		.file 26 "Inc/synchronous_rectifier.h"
 1346              		.file 27 "<built-in>"
ARM GAS  /tmp/ccIlGWJH.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccIlGWJH.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccIlGWJH.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccIlGWJH.s:183    .text.MX_GPIO_Init:00000000000000bc $d
     /tmp/ccIlGWJH.s:190    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccIlGWJH.s:196    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccIlGWJH.s:243    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccIlGWJH.s:248    .text.MX_HRTIM1_Init:0000000000000000 $t
     /tmp/ccIlGWJH.s:254    .text.MX_HRTIM1_Init:0000000000000000 MX_HRTIM1_Init
     /tmp/ccIlGWJH.s:633    .text.MX_HRTIM1_Init:00000000000001a4 $d
                            *COM*:00000000000000dc hhrtim1
     /tmp/ccIlGWJH.s:639    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccIlGWJH.s:645    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccIlGWJH.s:813    .text.MX_TIM3_Init:00000000000000b0 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccIlGWJH.s:819    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccIlGWJH.s:825    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccIlGWJH.s:967    .text.MX_ADC1_Init:0000000000000088 $d
                            *COM*:0000000000000054 hadc1
     /tmp/ccIlGWJH.s:972    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccIlGWJH.s:978    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccIlGWJH.s:1033   .text.MX_USART1_UART_Init:0000000000000028 $d
                            *COM*:0000000000000070 huart1
     /tmp/ccIlGWJH.s:1039   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccIlGWJH.s:1045   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccIlGWJH.s:1100   .text.MX_USART3_UART_Init:0000000000000028 $d
                            *COM*:0000000000000070 huart3
     /tmp/ccIlGWJH.s:1106   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccIlGWJH.s:1113   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccIlGWJH.s:1228   .text.main:0000000000000000 $t
     /tmp/ccIlGWJH.s:1235   .text.main:0000000000000000 main
     /tmp/ccIlGWJH.s:1294   .text.Error_Handler:0000000000000000 $t
     /tmp/ccIlGWJH.s:1301   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000044 hdma_adc1

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
memset
HAL_HRTIM_Init
HAL_HRTIM_DLLCalibrationStart
HAL_HRTIM_PollForDLLCalibration
HAL_HRTIM_ADCTriggerConfig
HAL_HRTIM_TimeBaseConfig
HAL_HRTIM_WaveformTimerConfig
HAL_HRTIM_WaveformCompareConfig
HAL_HRTIM_DeadTimeConfig
HAL_HRTIM_WaveformOutputConfig
HAL_HRTIM_MspPostInit
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_OC_Init
HAL_TIM_IC_Init
HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccIlGWJH.s 			page 44


HAL_TIM_OC_ConfigChannel
HAL_TIM_IC_ConfigChannel
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
Sr_Start
Sr_IsStabilized
