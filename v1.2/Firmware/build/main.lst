ARM GAS  /tmp/ccx9yBKr.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB72:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "synchronous_rectifier.h"
  27:Src/main.c    **** #include "piezo_driver.h"
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  /tmp/ccx9yBKr.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** TIM_HandleTypeDef htim1;
  47:Src/main.c    **** TIM_HandleTypeDef htim2;
  48:Src/main.c    **** TIM_HandleTypeDef htim3;
  49:Src/main.c    **** TIM_HandleTypeDef htim4;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE BEGIN PV */
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE END PV */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  56:Src/main.c    **** void SystemClock_Config(void);
  57:Src/main.c    **** static void MX_GPIO_Init(void);
  58:Src/main.c    **** static void MX_TIM1_Init(void);
  59:Src/main.c    **** static void MX_TIM3_Init(void);
  60:Src/main.c    **** static void MX_TIM4_Init(void);
  61:Src/main.c    **** static void MX_TIM2_Init(void);
  62:Src/main.c    **** /* USER CODE BEGIN PFP */
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  67:Src/main.c    **** /* USER CODE BEGIN 0 */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE END 0 */
  70:Src/main.c    **** 
  71:Src/main.c    **** /**
  72:Src/main.c    ****   * @brief  The application entry point.
  73:Src/main.c    ****   * @retval int
  74:Src/main.c    ****   */
  75:Src/main.c    **** int main(void)
  76:Src/main.c    **** {
  77:Src/main.c    ****   /* USER CODE BEGIN 1 */
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* USER CODE END 1 */
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  84:Src/main.c    ****   HAL_Init();
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE BEGIN Init */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END Init */
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* Configure the system clock */
ARM GAS  /tmp/ccx9yBKr.s 			page 3


  91:Src/main.c    ****   SystemClock_Config();
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END SysInit */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Initialize all configured peripherals */
  98:Src/main.c    ****   MX_GPIO_Init();
  99:Src/main.c    ****   MX_TIM1_Init();
 100:Src/main.c    ****   MX_TIM3_Init();
 101:Src/main.c    ****   MX_TIM4_Init();
 102:Src/main.c    ****   MX_TIM2_Init();
 103:Src/main.c    ****   /* USER CODE BEGIN 2 */
 104:Src/main.c    ****   HAL_Delay(1000);
 105:Src/main.c    ****   Sr_Start();
 106:Src/main.c    ****   Sr_SetVoltage(1.0f);
 107:Src/main.c    ****   Pd_CmdSignalGeneration(TRUE);
 108:Src/main.c    ****   /* USER CODE END 2 */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* Infinite loop */
 111:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 112:Src/main.c    ****   while (1)
 113:Src/main.c    ****   {
 114:Src/main.c    ****     /* USER CODE END WHILE */
 115:Src/main.c    ****     /* USER CODE BEGIN 3 */
 116:Src/main.c    ****   }
 117:Src/main.c    ****   /* USER CODE END 3 */
 118:Src/main.c    **** }
 119:Src/main.c    **** 
 120:Src/main.c    **** /**
 121:Src/main.c    ****   * @brief System Clock Configuration
 122:Src/main.c    ****   * @retval None
 123:Src/main.c    ****   */
 124:Src/main.c    **** void SystemClock_Config(void)
 125:Src/main.c    **** {
 126:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 127:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 128:Src/main.c    **** 
 129:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 130:Src/main.c    ****   */
 131:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 132:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 133:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 134:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 135:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 136:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 137:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 138:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 139:Src/main.c    ****   {
 140:Src/main.c    ****     Error_Handler();
 141:Src/main.c    ****   }
 142:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 143:Src/main.c    ****   */
 144:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 145:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 146:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 147:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccx9yBKr.s 			page 4


 148:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 149:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 150:Src/main.c    **** 
 151:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 152:Src/main.c    ****   {
 153:Src/main.c    ****     Error_Handler();
 154:Src/main.c    ****   }
 155:Src/main.c    **** }
 156:Src/main.c    **** 
 157:Src/main.c    **** /**
 158:Src/main.c    ****   * @brief TIM1 Initialization Function
 159:Src/main.c    ****   * @param None
 160:Src/main.c    ****   * @retval None
 161:Src/main.c    ****   */
 162:Src/main.c    **** static void MX_TIM1_Init(void)
 163:Src/main.c    **** {
 164:Src/main.c    **** 
 165:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 168:Src/main.c    **** 
 169:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 170:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 171:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 172:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 177:Src/main.c    ****   htim1.Instance = TIM1;
 178:Src/main.c    ****   htim1.Init.Prescaler = 0;
 179:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 180:Src/main.c    ****   htim1.Init.Period = TIM1_RELOAD_VALUE;
 181:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 182:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 183:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 184:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 185:Src/main.c    ****   {
 186:Src/main.c    ****     Error_Handler();
 187:Src/main.c    ****   }
 188:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 189:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 190:Src/main.c    ****   {
 191:Src/main.c    ****     Error_Handler();
 192:Src/main.c    ****   }
 193:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 194:Src/main.c    ****   {
 195:Src/main.c    ****     Error_Handler();
 196:Src/main.c    ****   }
 197:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 198:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 199:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     Error_Handler();
 202:Src/main.c    ****   }
 203:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 204:Src/main.c    ****   sConfigOC.Pulse = 0;
ARM GAS  /tmp/ccx9yBKr.s 			page 5


 205:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 206:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 207:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 208:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 209:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 210:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 211:Src/main.c    ****   {
 212:Src/main.c    ****     Error_Handler();
 213:Src/main.c    ****   }
 214:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 215:Src/main.c    ****   {
 216:Src/main.c    ****     Error_Handler();
 217:Src/main.c    ****   }
 218:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 219:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 220:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 221:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 196;
 222:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 223:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 224:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 225:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 226:Src/main.c    ****   {
 227:Src/main.c    ****     Error_Handler();
 228:Src/main.c    ****   }
 229:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 230:Src/main.c    **** 
 231:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 232:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 233:Src/main.c    **** 
 234:Src/main.c    **** }
 235:Src/main.c    **** 
 236:Src/main.c    **** /**
 237:Src/main.c    ****   * @brief TIM2 Initialization Function
 238:Src/main.c    ****   * @param None
 239:Src/main.c    ****   * @retval None
 240:Src/main.c    ****   */
 241:Src/main.c    **** static void MX_TIM2_Init(void)
 242:Src/main.c    **** {
 243:Src/main.c    **** 
 244:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 245:Src/main.c    **** 
 246:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 247:Src/main.c    **** 
 248:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 249:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 250:Src/main.c    **** 
 251:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 252:Src/main.c    **** 
 253:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 254:Src/main.c    ****   htim2.Instance = TIM2;
 255:Src/main.c    ****   htim2.Init.Prescaler = TIM2_PRESCALER;
 256:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 257:Src/main.c    ****   htim2.Init.Period = TIM2_RELOAD_VALUE;
 258:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 259:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 260:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 261:Src/main.c    ****   {
ARM GAS  /tmp/ccx9yBKr.s 			page 6


 262:Src/main.c    ****     Error_Handler();
 263:Src/main.c    ****   }
 264:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 265:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 266:Src/main.c    ****   {
 267:Src/main.c    ****     Error_Handler();
 268:Src/main.c    ****   }
 269:Src/main.c    ****   if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 270:Src/main.c    ****   {
 271:Src/main.c    ****     Error_Handler();
 272:Src/main.c    ****   }
 273:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 274:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 275:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 276:Src/main.c    ****   {
 277:Src/main.c    ****     Error_Handler();
 278:Src/main.c    ****   }
 279:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 280:Src/main.c    **** 
 281:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 282:Src/main.c    **** 
 283:Src/main.c    **** }
 284:Src/main.c    **** 
 285:Src/main.c    **** /**
 286:Src/main.c    ****   * @brief TIM3 Initialization Function
 287:Src/main.c    ****   * @param None
 288:Src/main.c    ****   * @retval None
 289:Src/main.c    ****   */
 290:Src/main.c    **** static void MX_TIM3_Init(void)
 291:Src/main.c    **** {
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 0 */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* USER CODE END TIM3_Init 0 */
 296:Src/main.c    **** 
 297:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 298:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 299:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 300:Src/main.c    **** 
 301:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 1 */
 302:Src/main.c    **** 
 303:Src/main.c    ****   /* USER CODE END TIM3_Init 1 */
 304:Src/main.c    ****   htim3.Instance = TIM3;
 305:Src/main.c    ****   htim3.Init.Prescaler = TIM3_PRESCALER;
 306:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 307:Src/main.c    ****   htim3.Init.Period = 0xFFFF;
 308:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 309:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 310:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 311:Src/main.c    ****   {
 312:Src/main.c    ****     Error_Handler();
 313:Src/main.c    ****   }
 314:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 315:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 316:Src/main.c    ****   {
 317:Src/main.c    ****     Error_Handler();
 318:Src/main.c    ****   }
ARM GAS  /tmp/ccx9yBKr.s 			page 7


 319:Src/main.c    ****   if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 320:Src/main.c    ****   {
 321:Src/main.c    ****     Error_Handler();
 322:Src/main.c    ****   }
 323:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 324:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 325:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 326:Src/main.c    ****   {
 327:Src/main.c    ****     Error_Handler();
 328:Src/main.c    ****   }
 329:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 330:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 331:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 332:Src/main.c    ****   sConfigIC.ICFilter = 15;
 333:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 334:Src/main.c    ****   {
 335:Src/main.c    ****     Error_Handler();
 336:Src/main.c    ****   }
 337:Src/main.c    ****   sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 338:Src/main.c    ****   sConfigIC.ICFilter = 5;
 339:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 340:Src/main.c    ****   {
 341:Src/main.c    ****     Error_Handler();
 342:Src/main.c    ****   }
 343:Src/main.c    ****   /* USER CODE BEGIN TIM3_Init 2 */
 344:Src/main.c    **** 
 345:Src/main.c    ****   /* USER CODE END TIM3_Init 2 */
 346:Src/main.c    **** 
 347:Src/main.c    **** }
 348:Src/main.c    **** 
 349:Src/main.c    **** /**
 350:Src/main.c    ****   * @brief TIM4 Initialization Function
 351:Src/main.c    ****   * @param None
 352:Src/main.c    ****   * @retval None
 353:Src/main.c    ****   */
 354:Src/main.c    **** static void MX_TIM4_Init(void)
 355:Src/main.c    **** {
 356:Src/main.c    **** 
 357:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 0 */
 358:Src/main.c    **** 
 359:Src/main.c    ****   /* USER CODE END TIM4_Init 0 */
 360:Src/main.c    **** 
 361:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 362:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 363:Src/main.c    **** 
 364:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 1 */
 365:Src/main.c    **** 
 366:Src/main.c    ****   /* USER CODE END TIM4_Init 1 */
 367:Src/main.c    ****   htim4.Instance = TIM4;
 368:Src/main.c    ****   htim4.Init.Prescaler = TIM4_PRESCALER;
 369:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 370:Src/main.c    ****   htim4.Init.Period = TIM4_RELOAD_VALUE;
 371:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 372:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 373:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 374:Src/main.c    ****   {
 375:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccx9yBKr.s 			page 8


 376:Src/main.c    ****   }
 377:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 378:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 379:Src/main.c    ****   {
 380:Src/main.c    ****     Error_Handler();
 381:Src/main.c    ****   }
 382:Src/main.c    ****   if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 383:Src/main.c    ****   {
 384:Src/main.c    ****     Error_Handler();
 385:Src/main.c    ****   }
 386:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 387:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 388:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 389:Src/main.c    ****   {
 390:Src/main.c    ****     Error_Handler();
 391:Src/main.c    ****   }
 392:Src/main.c    ****   /* USER CODE BEGIN TIM4_Init 2 */
 393:Src/main.c    **** 
 394:Src/main.c    ****   /* USER CODE END TIM4_Init 2 */
 395:Src/main.c    **** 
 396:Src/main.c    **** }
 397:Src/main.c    **** 
 398:Src/main.c    **** /**
 399:Src/main.c    ****   * @brief GPIO Initialization Function
 400:Src/main.c    ****   * @param None
 401:Src/main.c    ****   * @retval None
 402:Src/main.c    ****   */
 403:Src/main.c    **** static void MX_GPIO_Init(void)
 404:Src/main.c    **** {
  26              		.loc 1 404 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 405:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 405 3 view .LVU1
  42              		.loc 1 405 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0494     		str	r4, [sp, #16]
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* GPIO Ports Clock Enable */
 408:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 408 3 is_stmt 1 view .LVU3
  49              	.LBB2:
ARM GAS  /tmp/ccx9yBKr.s 			page 9


  50              		.loc 1 408 3 view .LVU4
  51              		.loc 1 408 3 view .LVU5
  52 000e 254B     		ldr	r3, .L3
  53 0010 9A69     		ldr	r2, [r3, #24]
  54 0012 42F01002 		orr	r2, r2, #16
  55 0016 9A61     		str	r2, [r3, #24]
  56              		.loc 1 408 3 view .LVU6
  57 0018 9A69     		ldr	r2, [r3, #24]
  58 001a 02F01002 		and	r2, r2, #16
  59 001e 0092     		str	r2, [sp]
  60              		.loc 1 408 3 view .LVU7
  61 0020 009A     		ldr	r2, [sp]
  62              	.LBE2:
 409:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  63              		.loc 1 409 3 view .LVU8
  64              	.LBB3:
  65              		.loc 1 409 3 view .LVU9
  66              		.loc 1 409 3 view .LVU10
  67 0022 9A69     		ldr	r2, [r3, #24]
  68 0024 42F02002 		orr	r2, r2, #32
  69 0028 9A61     		str	r2, [r3, #24]
  70              		.loc 1 409 3 view .LVU11
  71 002a 9A69     		ldr	r2, [r3, #24]
  72 002c 02F02002 		and	r2, r2, #32
  73 0030 0192     		str	r2, [sp, #4]
  74              		.loc 1 409 3 view .LVU12
  75 0032 019A     		ldr	r2, [sp, #4]
  76              	.LBE3:
 410:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  77              		.loc 1 410 3 view .LVU13
  78              	.LBB4:
  79              		.loc 1 410 3 view .LVU14
  80              		.loc 1 410 3 view .LVU15
  81 0034 9A69     		ldr	r2, [r3, #24]
  82 0036 42F00802 		orr	r2, r2, #8
  83 003a 9A61     		str	r2, [r3, #24]
  84              		.loc 1 410 3 view .LVU16
  85 003c 9A69     		ldr	r2, [r3, #24]
  86 003e 02F00802 		and	r2, r2, #8
  87 0042 0292     		str	r2, [sp, #8]
  88              		.loc 1 410 3 view .LVU17
  89 0044 029A     		ldr	r2, [sp, #8]
  90              	.LBE4:
 411:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  91              		.loc 1 411 3 view .LVU18
  92              	.LBB5:
  93              		.loc 1 411 3 view .LVU19
  94              		.loc 1 411 3 view .LVU20
  95 0046 9A69     		ldr	r2, [r3, #24]
  96 0048 42F00402 		orr	r2, r2, #4
  97 004c 9A61     		str	r2, [r3, #24]
  98              		.loc 1 411 3 view .LVU21
  99 004e 9B69     		ldr	r3, [r3, #24]
 100 0050 03F00403 		and	r3, r3, #4
 101 0054 0393     		str	r3, [sp, #12]
 102              		.loc 1 411 3 view .LVU22
 103 0056 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccx9yBKr.s 			page 10


 104              	.LBE5:
 412:Src/main.c    **** 
 413:Src/main.c    ****   /*Configure GPIO pin Output Level */
 414:Src/main.c    ****   HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 105              		.loc 1 414 3 view .LVU23
 106 0058 134F     		ldr	r7, .L3+4
 107 005a 2246     		mov	r2, r4
 108 005c 4FF40051 		mov	r1, #8192
 109 0060 3846     		mov	r0, r7
 110 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 111              	.LVL0:
 415:Src/main.c    **** 
 416:Src/main.c    ****   /*Configure GPIO pin Output Level */
 417:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, THYRISTOR1_DRIVE_Pin|THYRISTOR0_DRIVE_Pin, GPIO_PIN_RESET);
 112              		.loc 1 417 3 view .LVU24
 113 0066 114E     		ldr	r6, .L3+8
 114 0068 2246     		mov	r2, r4
 115 006a 4FF44071 		mov	r1, #768
 116 006e 3046     		mov	r0, r6
 117 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL1:
 418:Src/main.c    **** 
 419:Src/main.c    ****   /*Configure GPIO pin : LED_GREEN_Pin */
 420:Src/main.c    ****   GPIO_InitStruct.Pin = LED_GREEN_Pin;
 119              		.loc 1 420 3 view .LVU25
 120              		.loc 1 420 23 is_stmt 0 view .LVU26
 121 0074 4FF40053 		mov	r3, #8192
 122 0078 0493     		str	r3, [sp, #16]
 421:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 123              		.loc 1 421 3 is_stmt 1 view .LVU27
 124              		.loc 1 421 24 is_stmt 0 view .LVU28
 125 007a 0125     		movs	r5, #1
 126 007c 0595     		str	r5, [sp, #20]
 422:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 422 3 is_stmt 1 view .LVU29
 128              		.loc 1 422 24 is_stmt 0 view .LVU30
 129 007e 0694     		str	r4, [sp, #24]
 423:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 130              		.loc 1 423 3 is_stmt 1 view .LVU31
 131              		.loc 1 423 25 is_stmt 0 view .LVU32
 132 0080 0223     		movs	r3, #2
 133 0082 0793     		str	r3, [sp, #28]
 424:Src/main.c    ****   HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 134              		.loc 1 424 3 is_stmt 1 view .LVU33
 135 0084 04A9     		add	r1, sp, #16
 136 0086 3846     		mov	r0, r7
 137 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 138              	.LVL2:
 425:Src/main.c    **** 
 426:Src/main.c    ****   /*Configure GPIO pins : THYRISTOR1_DRIVE_Pin THYRISTOR0_DRIVE_Pin */
 427:Src/main.c    ****   GPIO_InitStruct.Pin = THYRISTOR1_DRIVE_Pin|THYRISTOR0_DRIVE_Pin;
 139              		.loc 1 427 3 view .LVU34
 140              		.loc 1 427 23 is_stmt 0 view .LVU35
 141 008c 4FF44073 		mov	r3, #768
 142 0090 0493     		str	r3, [sp, #16]
 428:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 143              		.loc 1 428 3 is_stmt 1 view .LVU36
ARM GAS  /tmp/ccx9yBKr.s 			page 11


 144              		.loc 1 428 24 is_stmt 0 view .LVU37
 145 0092 0595     		str	r5, [sp, #20]
 429:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 146              		.loc 1 429 3 is_stmt 1 view .LVU38
 147              		.loc 1 429 24 is_stmt 0 view .LVU39
 148 0094 0694     		str	r4, [sp, #24]
 430:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 149              		.loc 1 430 3 is_stmt 1 view .LVU40
 150              		.loc 1 430 25 is_stmt 0 view .LVU41
 151 0096 0795     		str	r5, [sp, #28]
 431:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 152              		.loc 1 431 3 is_stmt 1 view .LVU42
 153 0098 04A9     		add	r1, sp, #16
 154 009a 3046     		mov	r0, r6
 155 009c FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL3:
 432:Src/main.c    **** 
 433:Src/main.c    **** }
 157              		.loc 1 433 1 is_stmt 0 view .LVU43
 158 00a0 09B0     		add	sp, sp, #36
 159              	.LCFI2:
 160              		.cfi_def_cfa_offset 20
 161              		@ sp needed
 162 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 163              	.L4:
 164              		.align	2
 165              	.L3:
 166 00a4 00100240 		.word	1073876992
 167 00a8 00100140 		.word	1073811456
 168 00ac 000C0140 		.word	1073810432
 169              		.cfi_endproc
 170              	.LFE72:
 172              		.section	.text.MX_TIM1_Init,"ax",%progbits
 173              		.align	1
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu softvfp
 179              	MX_TIM1_Init:
 180              	.LFB68:
 163:Src/main.c    **** 
 181              		.loc 1 163 1 is_stmt 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 80
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185 0000 70B5     		push	{r4, r5, r6, lr}
 186              	.LCFI3:
 187              		.cfi_def_cfa_offset 16
 188              		.cfi_offset 4, -16
 189              		.cfi_offset 5, -12
 190              		.cfi_offset 6, -8
 191              		.cfi_offset 14, -4
 192 0002 94B0     		sub	sp, sp, #80
 193              	.LCFI4:
 194              		.cfi_def_cfa_offset 96
 169:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 195              		.loc 1 169 3 view .LVU45
ARM GAS  /tmp/ccx9yBKr.s 			page 12


 169:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 196              		.loc 1 169 26 is_stmt 0 view .LVU46
 197 0004 0024     		movs	r4, #0
 198 0006 1094     		str	r4, [sp, #64]
 199 0008 1194     		str	r4, [sp, #68]
 200 000a 1294     		str	r4, [sp, #72]
 201 000c 1394     		str	r4, [sp, #76]
 170:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 202              		.loc 1 170 3 is_stmt 1 view .LVU47
 170:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 203              		.loc 1 170 27 is_stmt 0 view .LVU48
 204 000e 0E94     		str	r4, [sp, #56]
 205 0010 0F94     		str	r4, [sp, #60]
 171:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 206              		.loc 1 171 3 is_stmt 1 view .LVU49
 171:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 207              		.loc 1 171 22 is_stmt 0 view .LVU50
 208 0012 0794     		str	r4, [sp, #28]
 209 0014 0894     		str	r4, [sp, #32]
 210 0016 0994     		str	r4, [sp, #36]
 211 0018 0A94     		str	r4, [sp, #40]
 212 001a 0B94     		str	r4, [sp, #44]
 213 001c 0C94     		str	r4, [sp, #48]
 214 001e 0D94     		str	r4, [sp, #52]
 172:Src/main.c    **** 
 215              		.loc 1 172 3 is_stmt 1 view .LVU51
 172:Src/main.c    **** 
 216              		.loc 1 172 34 is_stmt 0 view .LVU52
 217 0020 0094     		str	r4, [sp]
 218 0022 0194     		str	r4, [sp, #4]
 219 0024 0294     		str	r4, [sp, #8]
 220 0026 0394     		str	r4, [sp, #12]
 221 0028 0494     		str	r4, [sp, #16]
 222 002a 0594     		str	r4, [sp, #20]
 223 002c 0694     		str	r4, [sp, #24]
 177:Src/main.c    ****   htim1.Init.Prescaler = 0;
 224              		.loc 1 177 3 is_stmt 1 view .LVU53
 177:Src/main.c    ****   htim1.Init.Prescaler = 0;
 225              		.loc 1 177 18 is_stmt 0 view .LVU54
 226 002e 224D     		ldr	r5, .L7
 227 0030 224B     		ldr	r3, .L7+4
 228 0032 2B60     		str	r3, [r5]
 178:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 229              		.loc 1 178 3 is_stmt 1 view .LVU55
 178:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 230              		.loc 1 178 24 is_stmt 0 view .LVU56
 231 0034 6C60     		str	r4, [r5, #4]
 179:Src/main.c    ****   htim1.Init.Period = TIM1_RELOAD_VALUE;
 232              		.loc 1 179 3 is_stmt 1 view .LVU57
 179:Src/main.c    ****   htim1.Init.Period = TIM1_RELOAD_VALUE;
 233              		.loc 1 179 26 is_stmt 0 view .LVU58
 234 0036 AC60     		str	r4, [r5, #8]
 180:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 235              		.loc 1 180 3 is_stmt 1 view .LVU59
 180:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 236              		.loc 1 180 21 is_stmt 0 view .LVU60
 237 0038 40F6EB33 		movw	r3, #3051
ARM GAS  /tmp/ccx9yBKr.s 			page 13


 238 003c EB60     		str	r3, [r5, #12]
 181:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 239              		.loc 1 181 3 is_stmt 1 view .LVU61
 181:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 240              		.loc 1 181 28 is_stmt 0 view .LVU62
 241 003e 2C61     		str	r4, [r5, #16]
 182:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 242              		.loc 1 182 3 is_stmt 1 view .LVU63
 182:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 243              		.loc 1 182 32 is_stmt 0 view .LVU64
 244 0040 6C61     		str	r4, [r5, #20]
 183:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 245              		.loc 1 183 3 is_stmt 1 view .LVU65
 183:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 246              		.loc 1 183 32 is_stmt 0 view .LVU66
 247 0042 8023     		movs	r3, #128
 248 0044 AB61     		str	r3, [r5, #24]
 184:Src/main.c    ****   {
 249              		.loc 1 184 3 is_stmt 1 view .LVU67
 184:Src/main.c    ****   {
 250              		.loc 1 184 7 is_stmt 0 view .LVU68
 251 0046 2846     		mov	r0, r5
 252 0048 FFF7FEFF 		bl	HAL_TIM_Base_Init
 253              	.LVL4:
 188:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 254              		.loc 1 188 3 is_stmt 1 view .LVU69
 188:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 255              		.loc 1 188 34 is_stmt 0 view .LVU70
 256 004c 4FF48056 		mov	r6, #4096
 257 0050 1096     		str	r6, [sp, #64]
 189:Src/main.c    ****   {
 258              		.loc 1 189 3 is_stmt 1 view .LVU71
 189:Src/main.c    ****   {
 259              		.loc 1 189 7 is_stmt 0 view .LVU72
 260 0052 10A9     		add	r1, sp, #64
 261 0054 2846     		mov	r0, r5
 262 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 263              	.LVL5:
 193:Src/main.c    ****   {
 264              		.loc 1 193 3 is_stmt 1 view .LVU73
 193:Src/main.c    ****   {
 265              		.loc 1 193 7 is_stmt 0 view .LVU74
 266 005a 2846     		mov	r0, r5
 267 005c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 268              	.LVL6:
 197:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 269              		.loc 1 197 3 is_stmt 1 view .LVU75
 197:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 270              		.loc 1 197 37 is_stmt 0 view .LVU76
 271 0060 0E94     		str	r4, [sp, #56]
 198:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 272              		.loc 1 198 3 is_stmt 1 view .LVU77
 198:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 273              		.loc 1 198 33 is_stmt 0 view .LVU78
 274 0062 0F94     		str	r4, [sp, #60]
 199:Src/main.c    ****   {
 275              		.loc 1 199 3 is_stmt 1 view .LVU79
ARM GAS  /tmp/ccx9yBKr.s 			page 14


 199:Src/main.c    ****   {
 276              		.loc 1 199 7 is_stmt 0 view .LVU80
 277 0064 0EA9     		add	r1, sp, #56
 278 0066 2846     		mov	r0, r5
 279 0068 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 280              	.LVL7:
 203:Src/main.c    ****   sConfigOC.Pulse = 0;
 281              		.loc 1 203 3 is_stmt 1 view .LVU81
 203:Src/main.c    ****   sConfigOC.Pulse = 0;
 282              		.loc 1 203 20 is_stmt 0 view .LVU82
 283 006c 7023     		movs	r3, #112
 284 006e 0793     		str	r3, [sp, #28]
 204:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 285              		.loc 1 204 3 is_stmt 1 view .LVU83
 204:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 286              		.loc 1 204 19 is_stmt 0 view .LVU84
 287 0070 0894     		str	r4, [sp, #32]
 205:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 288              		.loc 1 205 3 is_stmt 1 view .LVU85
 205:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 289              		.loc 1 205 24 is_stmt 0 view .LVU86
 290 0072 0994     		str	r4, [sp, #36]
 206:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 291              		.loc 1 206 3 is_stmt 1 view .LVU87
 206:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 292              		.loc 1 206 25 is_stmt 0 view .LVU88
 293 0074 0A94     		str	r4, [sp, #40]
 207:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 294              		.loc 1 207 3 is_stmt 1 view .LVU89
 207:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 295              		.loc 1 207 24 is_stmt 0 view .LVU90
 296 0076 0B94     		str	r4, [sp, #44]
 208:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 297              		.loc 1 208 3 is_stmt 1 view .LVU91
 208:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 298              		.loc 1 208 25 is_stmt 0 view .LVU92
 299 0078 0C94     		str	r4, [sp, #48]
 209:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 300              		.loc 1 209 3 is_stmt 1 view .LVU93
 209:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 301              		.loc 1 209 26 is_stmt 0 view .LVU94
 302 007a 0D94     		str	r4, [sp, #52]
 210:Src/main.c    ****   {
 303              		.loc 1 210 3 is_stmt 1 view .LVU95
 210:Src/main.c    ****   {
 304              		.loc 1 210 7 is_stmt 0 view .LVU96
 305 007c 2246     		mov	r2, r4
 306 007e 07A9     		add	r1, sp, #28
 307 0080 2846     		mov	r0, r5
 308 0082 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 309              	.LVL8:
 214:Src/main.c    ****   {
 310              		.loc 1 214 3 is_stmt 1 view .LVU97
 214:Src/main.c    ****   {
 311              		.loc 1 214 7 is_stmt 0 view .LVU98
 312 0086 0422     		movs	r2, #4
 313 0088 07A9     		add	r1, sp, #28
ARM GAS  /tmp/ccx9yBKr.s 			page 15


 314 008a 2846     		mov	r0, r5
 315 008c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 316              	.LVL9:
 218:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 317              		.loc 1 218 3 is_stmt 1 view .LVU99
 218:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 318              		.loc 1 218 40 is_stmt 0 view .LVU100
 319 0090 0094     		str	r4, [sp]
 219:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 320              		.loc 1 219 3 is_stmt 1 view .LVU101
 219:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 321              		.loc 1 219 41 is_stmt 0 view .LVU102
 322 0092 0194     		str	r4, [sp, #4]
 220:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 196;
 323              		.loc 1 220 3 is_stmt 1 view .LVU103
 220:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 196;
 324              		.loc 1 220 34 is_stmt 0 view .LVU104
 325 0094 0294     		str	r4, [sp, #8]
 221:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 326              		.loc 1 221 3 is_stmt 1 view .LVU105
 221:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 327              		.loc 1 221 33 is_stmt 0 view .LVU106
 328 0096 C423     		movs	r3, #196
 329 0098 0393     		str	r3, [sp, #12]
 222:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 330              		.loc 1 222 3 is_stmt 1 view .LVU107
 222:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 331              		.loc 1 222 35 is_stmt 0 view .LVU108
 332 009a 0496     		str	r6, [sp, #16]
 223:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 333              		.loc 1 223 3 is_stmt 1 view .LVU109
 223:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 334              		.loc 1 223 38 is_stmt 0 view .LVU110
 335 009c 0594     		str	r4, [sp, #20]
 224:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 336              		.loc 1 224 3 is_stmt 1 view .LVU111
 224:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 337              		.loc 1 224 40 is_stmt 0 view .LVU112
 338 009e 4FF48043 		mov	r3, #16384
 339 00a2 0693     		str	r3, [sp, #24]
 225:Src/main.c    ****   {
 340              		.loc 1 225 3 is_stmt 1 view .LVU113
 225:Src/main.c    ****   {
 341              		.loc 1 225 7 is_stmt 0 view .LVU114
 342 00a4 6946     		mov	r1, sp
 343 00a6 2846     		mov	r0, r5
 344 00a8 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 345              	.LVL10:
 232:Src/main.c    **** 
 346              		.loc 1 232 3 is_stmt 1 view .LVU115
 347 00ac 2846     		mov	r0, r5
 348 00ae FFF7FEFF 		bl	HAL_TIM_MspPostInit
 349              	.LVL11:
 234:Src/main.c    **** 
 350              		.loc 1 234 1 is_stmt 0 view .LVU116
 351 00b2 14B0     		add	sp, sp, #80
 352              	.LCFI5:
ARM GAS  /tmp/ccx9yBKr.s 			page 16


 353              		.cfi_def_cfa_offset 16
 354              		@ sp needed
 355 00b4 70BD     		pop	{r4, r5, r6, pc}
 356              	.L8:
 357 00b6 00BF     		.align	2
 358              	.L7:
 359 00b8 00000000 		.word	htim1
 360 00bc 002C0140 		.word	1073818624
 361              		.cfi_endproc
 362              	.LFE68:
 364              		.section	.text.MX_TIM3_Init,"ax",%progbits
 365              		.align	1
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu softvfp
 371              	MX_TIM3_Init:
 372              	.LFB70:
 291:Src/main.c    **** 
 373              		.loc 1 291 1 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 40
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377 0000 30B5     		push	{r4, r5, lr}
 378              	.LCFI6:
 379              		.cfi_def_cfa_offset 12
 380              		.cfi_offset 4, -12
 381              		.cfi_offset 5, -8
 382              		.cfi_offset 14, -4
 383 0002 8BB0     		sub	sp, sp, #44
 384              	.LCFI7:
 385              		.cfi_def_cfa_offset 56
 297:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 386              		.loc 1 297 3 view .LVU118
 297:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 387              		.loc 1 297 26 is_stmt 0 view .LVU119
 388 0004 0024     		movs	r4, #0
 389 0006 0694     		str	r4, [sp, #24]
 390 0008 0794     		str	r4, [sp, #28]
 391 000a 0894     		str	r4, [sp, #32]
 392 000c 0994     		str	r4, [sp, #36]
 298:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 393              		.loc 1 298 3 is_stmt 1 view .LVU120
 298:Src/main.c    ****   TIM_IC_InitTypeDef sConfigIC = {0};
 394              		.loc 1 298 27 is_stmt 0 view .LVU121
 395 000e 0494     		str	r4, [sp, #16]
 396 0010 0594     		str	r4, [sp, #20]
 299:Src/main.c    **** 
 397              		.loc 1 299 3 is_stmt 1 view .LVU122
 299:Src/main.c    **** 
 398              		.loc 1 299 22 is_stmt 0 view .LVU123
 399 0012 0094     		str	r4, [sp]
 400 0014 0194     		str	r4, [sp, #4]
 401 0016 0294     		str	r4, [sp, #8]
 402 0018 0394     		str	r4, [sp, #12]
 304:Src/main.c    ****   htim3.Init.Prescaler = TIM3_PRESCALER;
 403              		.loc 1 304 3 is_stmt 1 view .LVU124
ARM GAS  /tmp/ccx9yBKr.s 			page 17


 304:Src/main.c    ****   htim3.Init.Prescaler = TIM3_PRESCALER;
 404              		.loc 1 304 18 is_stmt 0 view .LVU125
 405 001a 1A4D     		ldr	r5, .L11
 406 001c 1A4B     		ldr	r3, .L11+4
 407 001e 2B60     		str	r3, [r5]
 305:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 408              		.loc 1 305 3 is_stmt 1 view .LVU126
 305:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 409              		.loc 1 305 24 is_stmt 0 view .LVU127
 410 0020 4723     		movs	r3, #71
 411 0022 6B60     		str	r3, [r5, #4]
 306:Src/main.c    ****   htim3.Init.Period = 0xFFFF;
 412              		.loc 1 306 3 is_stmt 1 view .LVU128
 306:Src/main.c    ****   htim3.Init.Period = 0xFFFF;
 413              		.loc 1 306 26 is_stmt 0 view .LVU129
 414 0024 AC60     		str	r4, [r5, #8]
 307:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 415              		.loc 1 307 3 is_stmt 1 view .LVU130
 307:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 416              		.loc 1 307 21 is_stmt 0 view .LVU131
 417 0026 4FF6FF73 		movw	r3, #65535
 418 002a EB60     		str	r3, [r5, #12]
 308:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 419              		.loc 1 308 3 is_stmt 1 view .LVU132
 308:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 420              		.loc 1 308 28 is_stmt 0 view .LVU133
 421 002c 2C61     		str	r4, [r5, #16]
 309:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 422              		.loc 1 309 3 is_stmt 1 view .LVU134
 309:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 423              		.loc 1 309 32 is_stmt 0 view .LVU135
 424 002e AC61     		str	r4, [r5, #24]
 310:Src/main.c    ****   {
 425              		.loc 1 310 3 is_stmt 1 view .LVU136
 310:Src/main.c    ****   {
 426              		.loc 1 310 7 is_stmt 0 view .LVU137
 427 0030 2846     		mov	r0, r5
 428 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 429              	.LVL12:
 314:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 430              		.loc 1 314 3 is_stmt 1 view .LVU138
 314:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 431              		.loc 1 314 34 is_stmt 0 view .LVU139
 432 0036 4FF48053 		mov	r3, #4096
 433 003a 0693     		str	r3, [sp, #24]
 315:Src/main.c    ****   {
 434              		.loc 1 315 3 is_stmt 1 view .LVU140
 315:Src/main.c    ****   {
 435              		.loc 1 315 7 is_stmt 0 view .LVU141
 436 003c 06A9     		add	r1, sp, #24
 437 003e 2846     		mov	r0, r5
 438 0040 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 439              	.LVL13:
 319:Src/main.c    ****   {
 440              		.loc 1 319 3 is_stmt 1 view .LVU142
 319:Src/main.c    ****   {
 441              		.loc 1 319 7 is_stmt 0 view .LVU143
ARM GAS  /tmp/ccx9yBKr.s 			page 18


 442 0044 2846     		mov	r0, r5
 443 0046 FFF7FEFF 		bl	HAL_TIM_IC_Init
 444              	.LVL14:
 323:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 445              		.loc 1 323 3 is_stmt 1 view .LVU144
 323:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 446              		.loc 1 323 37 is_stmt 0 view .LVU145
 447 004a 0494     		str	r4, [sp, #16]
 324:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 448              		.loc 1 324 3 is_stmt 1 view .LVU146
 324:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 449              		.loc 1 324 33 is_stmt 0 view .LVU147
 450 004c 0594     		str	r4, [sp, #20]
 325:Src/main.c    ****   {
 451              		.loc 1 325 3 is_stmt 1 view .LVU148
 325:Src/main.c    ****   {
 452              		.loc 1 325 7 is_stmt 0 view .LVU149
 453 004e 04A9     		add	r1, sp, #16
 454 0050 2846     		mov	r0, r5
 455 0052 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 456              	.LVL15:
 329:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 457              		.loc 1 329 3 is_stmt 1 view .LVU150
 329:Src/main.c    ****   sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 458              		.loc 1 329 24 is_stmt 0 view .LVU151
 459 0056 0094     		str	r4, [sp]
 330:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 460              		.loc 1 330 3 is_stmt 1 view .LVU152
 330:Src/main.c    ****   sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 461              		.loc 1 330 25 is_stmt 0 view .LVU153
 462 0058 0123     		movs	r3, #1
 463 005a 0193     		str	r3, [sp, #4]
 331:Src/main.c    ****   sConfigIC.ICFilter = 15;
 464              		.loc 1 331 3 is_stmt 1 view .LVU154
 331:Src/main.c    ****   sConfigIC.ICFilter = 15;
 465              		.loc 1 331 25 is_stmt 0 view .LVU155
 466 005c 0294     		str	r4, [sp, #8]
 332:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 467              		.loc 1 332 3 is_stmt 1 view .LVU156
 332:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 468              		.loc 1 332 22 is_stmt 0 view .LVU157
 469 005e 0F23     		movs	r3, #15
 470 0060 0393     		str	r3, [sp, #12]
 333:Src/main.c    ****   {
 471              		.loc 1 333 3 is_stmt 1 view .LVU158
 333:Src/main.c    ****   {
 472              		.loc 1 333 7 is_stmt 0 view .LVU159
 473 0062 0822     		movs	r2, #8
 474 0064 6946     		mov	r1, sp
 475 0066 2846     		mov	r0, r5
 476 0068 FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 477              	.LVL16:
 337:Src/main.c    ****   sConfigIC.ICFilter = 5;
 478              		.loc 1 337 3 is_stmt 1 view .LVU160
 337:Src/main.c    ****   sConfigIC.ICFilter = 5;
 479              		.loc 1 337 24 is_stmt 0 view .LVU161
 480 006c 0223     		movs	r3, #2
ARM GAS  /tmp/ccx9yBKr.s 			page 19


 481 006e 0093     		str	r3, [sp]
 338:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 482              		.loc 1 338 3 is_stmt 1 view .LVU162
 338:Src/main.c    ****   if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 483              		.loc 1 338 22 is_stmt 0 view .LVU163
 484 0070 0523     		movs	r3, #5
 485 0072 0393     		str	r3, [sp, #12]
 339:Src/main.c    ****   {
 486              		.loc 1 339 3 is_stmt 1 view .LVU164
 339:Src/main.c    ****   {
 487              		.loc 1 339 7 is_stmt 0 view .LVU165
 488 0074 0C22     		movs	r2, #12
 489 0076 6946     		mov	r1, sp
 490 0078 2846     		mov	r0, r5
 491 007a FFF7FEFF 		bl	HAL_TIM_IC_ConfigChannel
 492              	.LVL17:
 347:Src/main.c    **** 
 493              		.loc 1 347 1 view .LVU166
 494 007e 0BB0     		add	sp, sp, #44
 495              	.LCFI8:
 496              		.cfi_def_cfa_offset 12
 497              		@ sp needed
 498 0080 30BD     		pop	{r4, r5, pc}
 499              	.L12:
 500 0082 00BF     		.align	2
 501              	.L11:
 502 0084 00000000 		.word	htim3
 503 0088 00040040 		.word	1073742848
 504              		.cfi_endproc
 505              	.LFE70:
 507              		.section	.text.MX_TIM4_Init,"ax",%progbits
 508              		.align	1
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 512              		.fpu softvfp
 514              	MX_TIM4_Init:
 515              	.LFB71:
 355:Src/main.c    **** 
 516              		.loc 1 355 1 is_stmt 1 view -0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 24
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 520 0000 30B5     		push	{r4, r5, lr}
 521              	.LCFI9:
 522              		.cfi_def_cfa_offset 12
 523              		.cfi_offset 4, -12
 524              		.cfi_offset 5, -8
 525              		.cfi_offset 14, -4
 526 0002 87B0     		sub	sp, sp, #28
 527              	.LCFI10:
 528              		.cfi_def_cfa_offset 40
 361:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 529              		.loc 1 361 3 view .LVU168
 361:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 530              		.loc 1 361 26 is_stmt 0 view .LVU169
 531 0004 0024     		movs	r4, #0
ARM GAS  /tmp/ccx9yBKr.s 			page 20


 532 0006 0294     		str	r4, [sp, #8]
 533 0008 0394     		str	r4, [sp, #12]
 534 000a 0494     		str	r4, [sp, #16]
 535 000c 0594     		str	r4, [sp, #20]
 362:Src/main.c    **** 
 536              		.loc 1 362 3 is_stmt 1 view .LVU170
 362:Src/main.c    **** 
 537              		.loc 1 362 27 is_stmt 0 view .LVU171
 538 000e 0094     		str	r4, [sp]
 539 0010 0194     		str	r4, [sp, #4]
 367:Src/main.c    ****   htim4.Init.Prescaler = TIM4_PRESCALER;
 540              		.loc 1 367 3 is_stmt 1 view .LVU172
 367:Src/main.c    ****   htim4.Init.Prescaler = TIM4_PRESCALER;
 541              		.loc 1 367 18 is_stmt 0 view .LVU173
 542 0012 104D     		ldr	r5, .L15
 543 0014 104B     		ldr	r3, .L15+4
 544 0016 2B60     		str	r3, [r5]
 368:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 545              		.loc 1 368 3 is_stmt 1 view .LVU174
 368:Src/main.c    ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 546              		.loc 1 368 24 is_stmt 0 view .LVU175
 547 0018 4723     		movs	r3, #71
 548 001a 6B60     		str	r3, [r5, #4]
 369:Src/main.c    ****   htim4.Init.Period = TIM4_RELOAD_VALUE;
 549              		.loc 1 369 3 is_stmt 1 view .LVU176
 369:Src/main.c    ****   htim4.Init.Period = TIM4_RELOAD_VALUE;
 550              		.loc 1 369 26 is_stmt 0 view .LVU177
 551 001c AC60     		str	r4, [r5, #8]
 370:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 552              		.loc 1 370 3 is_stmt 1 view .LVU178
 370:Src/main.c    ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 553              		.loc 1 370 21 is_stmt 0 view .LVU179
 554 001e 44F61F63 		movw	r3, #19999
 555 0022 EB60     		str	r3, [r5, #12]
 371:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 556              		.loc 1 371 3 is_stmt 1 view .LVU180
 371:Src/main.c    ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 557              		.loc 1 371 28 is_stmt 0 view .LVU181
 558 0024 2C61     		str	r4, [r5, #16]
 372:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 559              		.loc 1 372 3 is_stmt 1 view .LVU182
 372:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 560              		.loc 1 372 32 is_stmt 0 view .LVU183
 561 0026 AC61     		str	r4, [r5, #24]
 373:Src/main.c    ****   {
 562              		.loc 1 373 3 is_stmt 1 view .LVU184
 373:Src/main.c    ****   {
 563              		.loc 1 373 7 is_stmt 0 view .LVU185
 564 0028 2846     		mov	r0, r5
 565 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 566              	.LVL18:
 377:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 567              		.loc 1 377 3 is_stmt 1 view .LVU186
 377:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 568              		.loc 1 377 34 is_stmt 0 view .LVU187
 569 002e 4FF48053 		mov	r3, #4096
 570 0032 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccx9yBKr.s 			page 21


 378:Src/main.c    ****   {
 571              		.loc 1 378 3 is_stmt 1 view .LVU188
 378:Src/main.c    ****   {
 572              		.loc 1 378 7 is_stmt 0 view .LVU189
 573 0034 02A9     		add	r1, sp, #8
 574 0036 2846     		mov	r0, r5
 575 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 576              	.LVL19:
 382:Src/main.c    ****   {
 577              		.loc 1 382 3 is_stmt 1 view .LVU190
 382:Src/main.c    ****   {
 578              		.loc 1 382 7 is_stmt 0 view .LVU191
 579 003c 0821     		movs	r1, #8
 580 003e 2846     		mov	r0, r5
 581 0040 FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 582              	.LVL20:
 386:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 583              		.loc 1 386 3 is_stmt 1 view .LVU192
 386:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 584              		.loc 1 386 37 is_stmt 0 view .LVU193
 585 0044 0094     		str	r4, [sp]
 387:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 586              		.loc 1 387 3 is_stmt 1 view .LVU194
 387:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 587              		.loc 1 387 33 is_stmt 0 view .LVU195
 588 0046 0194     		str	r4, [sp, #4]
 388:Src/main.c    ****   {
 589              		.loc 1 388 3 is_stmt 1 view .LVU196
 388:Src/main.c    ****   {
 590              		.loc 1 388 7 is_stmt 0 view .LVU197
 591 0048 6946     		mov	r1, sp
 592 004a 2846     		mov	r0, r5
 593 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 594              	.LVL21:
 396:Src/main.c    **** 
 595              		.loc 1 396 1 view .LVU198
 596 0050 07B0     		add	sp, sp, #28
 597              	.LCFI11:
 598              		.cfi_def_cfa_offset 12
 599              		@ sp needed
 600 0052 30BD     		pop	{r4, r5, pc}
 601              	.L16:
 602              		.align	2
 603              	.L15:
 604 0054 00000000 		.word	htim4
 605 0058 00080040 		.word	1073743872
 606              		.cfi_endproc
 607              	.LFE71:
 609              		.section	.text.MX_TIM2_Init,"ax",%progbits
 610              		.align	1
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.fpu softvfp
 616              	MX_TIM2_Init:
 617              	.LFB69:
 242:Src/main.c    **** 
ARM GAS  /tmp/ccx9yBKr.s 			page 22


 618              		.loc 1 242 1 is_stmt 1 view -0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 24
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622 0000 30B5     		push	{r4, r5, lr}
 623              	.LCFI12:
 624              		.cfi_def_cfa_offset 12
 625              		.cfi_offset 4, -12
 626              		.cfi_offset 5, -8
 627              		.cfi_offset 14, -4
 628 0002 87B0     		sub	sp, sp, #28
 629              	.LCFI13:
 630              		.cfi_def_cfa_offset 40
 248:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 631              		.loc 1 248 3 view .LVU200
 248:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 632              		.loc 1 248 26 is_stmt 0 view .LVU201
 633 0004 0024     		movs	r4, #0
 634 0006 0294     		str	r4, [sp, #8]
 635 0008 0394     		str	r4, [sp, #12]
 636 000a 0494     		str	r4, [sp, #16]
 637 000c 0594     		str	r4, [sp, #20]
 249:Src/main.c    **** 
 638              		.loc 1 249 3 is_stmt 1 view .LVU202
 249:Src/main.c    **** 
 639              		.loc 1 249 27 is_stmt 0 view .LVU203
 640 000e 0094     		str	r4, [sp]
 641 0010 0194     		str	r4, [sp, #4]
 254:Src/main.c    ****   htim2.Init.Prescaler = TIM2_PRESCALER;
 642              		.loc 1 254 3 is_stmt 1 view .LVU204
 254:Src/main.c    ****   htim2.Init.Prescaler = TIM2_PRESCALER;
 643              		.loc 1 254 18 is_stmt 0 view .LVU205
 644 0012 114D     		ldr	r5, .L19
 645 0014 4FF08043 		mov	r3, #1073741824
 646 0018 2B60     		str	r3, [r5]
 255:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 647              		.loc 1 255 3 is_stmt 1 view .LVU206
 255:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 648              		.loc 1 255 24 is_stmt 0 view .LVU207
 649 001a 4723     		movs	r3, #71
 650 001c 6B60     		str	r3, [r5, #4]
 256:Src/main.c    ****   htim2.Init.Period = TIM2_RELOAD_VALUE;
 651              		.loc 1 256 3 is_stmt 1 view .LVU208
 256:Src/main.c    ****   htim2.Init.Period = TIM2_RELOAD_VALUE;
 652              		.loc 1 256 26 is_stmt 0 view .LVU209
 653 001e AC60     		str	r4, [r5, #8]
 257:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 654              		.loc 1 257 3 is_stmt 1 view .LVU210
 257:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 655              		.loc 1 257 21 is_stmt 0 view .LVU211
 656 0020 44F61F63 		movw	r3, #19999
 657 0024 EB60     		str	r3, [r5, #12]
 258:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 658              		.loc 1 258 3 is_stmt 1 view .LVU212
 258:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 659              		.loc 1 258 28 is_stmt 0 view .LVU213
 660 0026 2C61     		str	r4, [r5, #16]
ARM GAS  /tmp/ccx9yBKr.s 			page 23


 259:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 661              		.loc 1 259 3 is_stmt 1 view .LVU214
 259:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 662              		.loc 1 259 32 is_stmt 0 view .LVU215
 663 0028 AC61     		str	r4, [r5, #24]
 260:Src/main.c    ****   {
 664              		.loc 1 260 3 is_stmt 1 view .LVU216
 260:Src/main.c    ****   {
 665              		.loc 1 260 7 is_stmt 0 view .LVU217
 666 002a 2846     		mov	r0, r5
 667 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 668              	.LVL22:
 264:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 669              		.loc 1 264 3 is_stmt 1 view .LVU218
 264:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 670              		.loc 1 264 34 is_stmt 0 view .LVU219
 671 0030 4FF48053 		mov	r3, #4096
 672 0034 0293     		str	r3, [sp, #8]
 265:Src/main.c    ****   {
 673              		.loc 1 265 3 is_stmt 1 view .LVU220
 265:Src/main.c    ****   {
 674              		.loc 1 265 7 is_stmt 0 view .LVU221
 675 0036 02A9     		add	r1, sp, #8
 676 0038 2846     		mov	r0, r5
 677 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 678              	.LVL23:
 269:Src/main.c    ****   {
 679              		.loc 1 269 3 is_stmt 1 view .LVU222
 269:Src/main.c    ****   {
 680              		.loc 1 269 7 is_stmt 0 view .LVU223
 681 003e 0821     		movs	r1, #8
 682 0040 2846     		mov	r0, r5
 683 0042 FFF7FEFF 		bl	HAL_TIM_OnePulse_Init
 684              	.LVL24:
 273:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 685              		.loc 1 273 3 is_stmt 1 view .LVU224
 273:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 686              		.loc 1 273 37 is_stmt 0 view .LVU225
 687 0046 0094     		str	r4, [sp]
 274:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 688              		.loc 1 274 3 is_stmt 1 view .LVU226
 274:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 689              		.loc 1 274 33 is_stmt 0 view .LVU227
 690 0048 0194     		str	r4, [sp, #4]
 275:Src/main.c    ****   {
 691              		.loc 1 275 3 is_stmt 1 view .LVU228
 275:Src/main.c    ****   {
 692              		.loc 1 275 7 is_stmt 0 view .LVU229
 693 004a 6946     		mov	r1, sp
 694 004c 2846     		mov	r0, r5
 695 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 696              	.LVL25:
 283:Src/main.c    **** 
 697              		.loc 1 283 1 view .LVU230
 698 0052 07B0     		add	sp, sp, #28
 699              	.LCFI14:
 700              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccx9yBKr.s 			page 24


 701              		@ sp needed
 702 0054 30BD     		pop	{r4, r5, pc}
 703              	.L20:
 704 0056 00BF     		.align	2
 705              	.L19:
 706 0058 00000000 		.word	htim2
 707              		.cfi_endproc
 708              	.LFE69:
 710              		.section	.text.SystemClock_Config,"ax",%progbits
 711              		.align	1
 712              		.global	SystemClock_Config
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu softvfp
 718              	SystemClock_Config:
 719              	.LFB67:
 125:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 720              		.loc 1 125 1 is_stmt 1 view -0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 64
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724 0000 30B5     		push	{r4, r5, lr}
 725              	.LCFI15:
 726              		.cfi_def_cfa_offset 12
 727              		.cfi_offset 4, -12
 728              		.cfi_offset 5, -8
 729              		.cfi_offset 14, -4
 730 0002 91B0     		sub	sp, sp, #68
 731              	.LCFI16:
 732              		.cfi_def_cfa_offset 80
 126:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 733              		.loc 1 126 3 view .LVU232
 126:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 734              		.loc 1 126 22 is_stmt 0 view .LVU233
 735 0004 0024     		movs	r4, #0
 736 0006 0894     		str	r4, [sp, #32]
 737 0008 0994     		str	r4, [sp, #36]
 738 000a 0B94     		str	r4, [sp, #44]
 739 000c 0C94     		str	r4, [sp, #48]
 127:Src/main.c    **** 
 740              		.loc 1 127 3 is_stmt 1 view .LVU234
 127:Src/main.c    **** 
 741              		.loc 1 127 22 is_stmt 0 view .LVU235
 742 000e 0194     		str	r4, [sp, #4]
 743 0010 0294     		str	r4, [sp, #8]
 744 0012 0394     		str	r4, [sp, #12]
 745 0014 0494     		str	r4, [sp, #16]
 746 0016 0594     		str	r4, [sp, #20]
 131:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 747              		.loc 1 131 3 is_stmt 1 view .LVU236
 131:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 748              		.loc 1 131 36 is_stmt 0 view .LVU237
 749 0018 0122     		movs	r2, #1
 750 001a 0692     		str	r2, [sp, #24]
 132:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 751              		.loc 1 132 3 is_stmt 1 view .LVU238
ARM GAS  /tmp/ccx9yBKr.s 			page 25


 132:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 752              		.loc 1 132 30 is_stmt 0 view .LVU239
 753 001c 4FF48033 		mov	r3, #65536
 754 0020 0793     		str	r3, [sp, #28]
 133:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 755              		.loc 1 133 3 is_stmt 1 view .LVU240
 134:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 756              		.loc 1 134 3 view .LVU241
 134:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 757              		.loc 1 134 30 is_stmt 0 view .LVU242
 758 0022 0A92     		str	r2, [sp, #40]
 135:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 759              		.loc 1 135 3 is_stmt 1 view .LVU243
 135:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 760              		.loc 1 135 34 is_stmt 0 view .LVU244
 761 0024 0225     		movs	r5, #2
 762 0026 0D95     		str	r5, [sp, #52]
 136:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 763              		.loc 1 136 3 is_stmt 1 view .LVU245
 136:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 764              		.loc 1 136 35 is_stmt 0 view .LVU246
 765 0028 0E93     		str	r3, [sp, #56]
 137:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 766              		.loc 1 137 3 is_stmt 1 view .LVU247
 137:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 767              		.loc 1 137 32 is_stmt 0 view .LVU248
 768 002a 4FF4E013 		mov	r3, #1835008
 769 002e 0F93     		str	r3, [sp, #60]
 138:Src/main.c    ****   {
 770              		.loc 1 138 3 is_stmt 1 view .LVU249
 138:Src/main.c    ****   {
 771              		.loc 1 138 7 is_stmt 0 view .LVU250
 772 0030 06A8     		add	r0, sp, #24
 773 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 774              	.LVL26:
 144:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 775              		.loc 1 144 3 is_stmt 1 view .LVU251
 144:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 776              		.loc 1 144 31 is_stmt 0 view .LVU252
 777 0036 0F23     		movs	r3, #15
 778 0038 0193     		str	r3, [sp, #4]
 146:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 779              		.loc 1 146 3 is_stmt 1 view .LVU253
 146:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 780              		.loc 1 146 34 is_stmt 0 view .LVU254
 781 003a 0295     		str	r5, [sp, #8]
 147:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 782              		.loc 1 147 3 is_stmt 1 view .LVU255
 147:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 783              		.loc 1 147 35 is_stmt 0 view .LVU256
 784 003c 0394     		str	r4, [sp, #12]
 148:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 785              		.loc 1 148 3 is_stmt 1 view .LVU257
 148:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 786              		.loc 1 148 36 is_stmt 0 view .LVU258
 787 003e 4FF48063 		mov	r3, #1024
 788 0042 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/ccx9yBKr.s 			page 26


 149:Src/main.c    **** 
 789              		.loc 1 149 3 is_stmt 1 view .LVU259
 149:Src/main.c    **** 
 790              		.loc 1 149 36 is_stmt 0 view .LVU260
 791 0044 0594     		str	r4, [sp, #20]
 151:Src/main.c    ****   {
 792              		.loc 1 151 3 is_stmt 1 view .LVU261
 151:Src/main.c    ****   {
 793              		.loc 1 151 7 is_stmt 0 view .LVU262
 794 0046 2946     		mov	r1, r5
 795 0048 01A8     		add	r0, sp, #4
 796 004a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 797              	.LVL27:
 155:Src/main.c    **** 
 798              		.loc 1 155 1 view .LVU263
 799 004e 11B0     		add	sp, sp, #68
 800              	.LCFI17:
 801              		.cfi_def_cfa_offset 12
 802              		@ sp needed
 803 0050 30BD     		pop	{r4, r5, pc}
 804              		.cfi_endproc
 805              	.LFE67:
 807              		.section	.text.main,"ax",%progbits
 808              		.align	1
 809              		.global	main
 810              		.syntax unified
 811              		.thumb
 812              		.thumb_func
 813              		.fpu softvfp
 815              	main:
 816              	.LFB66:
  76:Src/main.c    ****   /* USER CODE BEGIN 1 */
 817              		.loc 1 76 1 is_stmt 1 view -0
 818              		.cfi_startproc
 819              		@ Volatile: function does not return.
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 822 0000 08B5     		push	{r3, lr}
 823              	.LCFI18:
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 3, -8
 826              		.cfi_offset 14, -4
  84:Src/main.c    **** 
 827              		.loc 1 84 3 view .LVU265
 828 0002 FFF7FEFF 		bl	HAL_Init
 829              	.LVL28:
  91:Src/main.c    **** 
 830              		.loc 1 91 3 view .LVU266
 831 0006 FFF7FEFF 		bl	SystemClock_Config
 832              	.LVL29:
  98:Src/main.c    ****   MX_TIM1_Init();
 833              		.loc 1 98 3 view .LVU267
 834 000a FFF7FEFF 		bl	MX_GPIO_Init
 835              	.LVL30:
  99:Src/main.c    ****   MX_TIM3_Init();
 836              		.loc 1 99 3 view .LVU268
 837 000e FFF7FEFF 		bl	MX_TIM1_Init
ARM GAS  /tmp/ccx9yBKr.s 			page 27


 838              	.LVL31:
 100:Src/main.c    ****   MX_TIM4_Init();
 839              		.loc 1 100 3 view .LVU269
 840 0012 FFF7FEFF 		bl	MX_TIM3_Init
 841              	.LVL32:
 101:Src/main.c    ****   MX_TIM2_Init();
 842              		.loc 1 101 3 view .LVU270
 843 0016 FFF7FEFF 		bl	MX_TIM4_Init
 844              	.LVL33:
 102:Src/main.c    ****   /* USER CODE BEGIN 2 */
 845              		.loc 1 102 3 view .LVU271
 846 001a FFF7FEFF 		bl	MX_TIM2_Init
 847              	.LVL34:
 104:Src/main.c    ****   Sr_Start();
 848              		.loc 1 104 3 view .LVU272
 849 001e 4FF47A70 		mov	r0, #1000
 850 0022 FFF7FEFF 		bl	HAL_Delay
 851              	.LVL35:
 105:Src/main.c    ****   Sr_SetVoltage(1.0f);
 852              		.loc 1 105 3 view .LVU273
 853 0026 FFF7FEFF 		bl	Sr_Start
 854              	.LVL36:
 106:Src/main.c    ****   Pd_CmdSignalGeneration(TRUE);
 855              		.loc 1 106 3 view .LVU274
 856 002a 4FF07E50 		mov	r0, #1065353216
 857 002e FFF7FEFF 		bl	Sr_SetVoltage
 858              	.LVL37:
 107:Src/main.c    ****   /* USER CODE END 2 */
 859              		.loc 1 107 3 view .LVU275
 860 0032 0120     		movs	r0, #1
 861 0034 FFF7FEFF 		bl	Pd_CmdSignalGeneration
 862              	.LVL38:
 863              	.L24:
 112:Src/main.c    ****   {
 864              		.loc 1 112 3 discriminator 1 view .LVU276
 116:Src/main.c    ****   /* USER CODE END 3 */
 865              		.loc 1 116 3 discriminator 1 view .LVU277
 866 0038 FEE7     		b	.L24
 867              		.cfi_endproc
 868              	.LFE66:
 870              		.section	.text.Error_Handler,"ax",%progbits
 871              		.align	1
 872              		.global	Error_Handler
 873              		.syntax unified
 874              		.thumb
 875              		.thumb_func
 876              		.fpu softvfp
 878              	Error_Handler:
 879              	.LFB73:
 434:Src/main.c    **** 
 435:Src/main.c    **** /* USER CODE BEGIN 4 */
 436:Src/main.c    **** 
 437:Src/main.c    **** /* USER CODE END 4 */
 438:Src/main.c    **** 
 439:Src/main.c    **** /**
 440:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 441:Src/main.c    ****   * @retval None
ARM GAS  /tmp/ccx9yBKr.s 			page 28


 442:Src/main.c    ****   */
 443:Src/main.c    **** void Error_Handler(void)
 444:Src/main.c    **** {
 880              		.loc 1 444 1 view -0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 445:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 446:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 447:Src/main.c    **** 
 448:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 449:Src/main.c    **** }
 885              		.loc 1 449 1 view .LVU279
 886 0000 7047     		bx	lr
 887              		.cfi_endproc
 888              	.LFE73:
 890              		.comm	htim4,64,4
 891              		.comm	htim3,64,4
 892              		.comm	htim2,64,4
 893              		.comm	htim1,64,4
 894              		.text
 895              	.Letext0:
 896              		.file 2 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine
 897              		.file 3 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_st
 898              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 899              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 900              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 901              		.file 7 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/loc
 902              		.file 8 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_ty
 903              		.file 9 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/i
 904              		.file 10 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/re
 905              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 906              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 907              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 908              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 909              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 910              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 911              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 912              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 913              		.file 19 "Inc/global.h"
 914              		.file 20 "Inc/main.h"
 915              		.file 21 "Inc/synchronous_rectifier.h"
 916              		.file 22 "Inc/piezo_driver.h"
ARM GAS  /tmp/ccx9yBKr.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccx9yBKr.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccx9yBKr.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccx9yBKr.s:166    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/ccx9yBKr.s:173    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccx9yBKr.s:179    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccx9yBKr.s:359    .text.MX_TIM1_Init:00000000000000b8 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccx9yBKr.s:365    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccx9yBKr.s:371    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccx9yBKr.s:502    .text.MX_TIM3_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccx9yBKr.s:508    .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccx9yBKr.s:514    .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccx9yBKr.s:604    .text.MX_TIM4_Init:0000000000000054 $d
                            *COM*:0000000000000040 htim4
     /tmp/ccx9yBKr.s:610    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccx9yBKr.s:616    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccx9yBKr.s:706    .text.MX_TIM2_Init:0000000000000058 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccx9yBKr.s:711    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccx9yBKr.s:718    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccx9yBKr.s:808    .text.main:0000000000000000 $t
     /tmp/ccx9yBKr.s:815    .text.main:0000000000000000 main
     /tmp/ccx9yBKr.s:871    .text.Error_Handler:0000000000000000 $t
     /tmp/ccx9yBKr.s:878    .text.Error_Handler:0000000000000000 Error_Handler

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_TIM_IC_Init
HAL_TIM_IC_ConfigChannel
HAL_TIM_OnePulse_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
Sr_Start
Sr_SetVoltage
Pd_CmdSignalGeneration
