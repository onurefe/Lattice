ARM GAS  /tmp/ccP4EJev.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB66:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f1xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f1xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccP4EJev.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim1;
  60:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  61:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  62:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  63:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  64:Src/stm32f1xx_it.c **** 
  65:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  66:Src/stm32f1xx_it.c **** 
  67:Src/stm32f1xx_it.c **** /******************************************************************************/
  68:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  69:Src/stm32f1xx_it.c **** /******************************************************************************/
  70:Src/stm32f1xx_it.c **** /**
  71:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Src/stm32f1xx_it.c ****   */
  73:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  74:Src/stm32f1xx_it.c **** {
  27              		.loc 1 74 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  75:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Src/stm32f1xx_it.c **** 
  77:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Src/stm32f1xx_it.c **** }
  32              		.loc 1 81 1 view .LVU1
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
ARM GAS  /tmp/ccP4EJev.s 			page 3


  35              	.LFE66:
  37              		.section	.text.HardFault_Handler,"ax",%progbits
  38              		.align	1
  39              		.global	HardFault_Handler
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	HardFault_Handler:
  46              	.LFB67:
  82:Src/stm32f1xx_it.c **** 
  83:Src/stm32f1xx_it.c **** /**
  84:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Src/stm32f1xx_it.c ****   */
  86:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  87:Src/stm32f1xx_it.c **** {
  47              		.loc 1 87 1 view -0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  88:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Src/stm32f1xx_it.c **** 
  90:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Src/stm32f1xx_it.c ****   while (1)
  54              		.loc 1 91 3 discriminator 1 view .LVU3
  92:Src/stm32f1xx_it.c ****   {
  93:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  95:Src/stm32f1xx_it.c ****   }
  55              		.loc 1 95 3 discriminator 1 view .LVU4
  56 0000 FEE7     		b	.L3
  57              		.cfi_endproc
  58              	.LFE67:
  60              		.section	.text.MemManage_Handler,"ax",%progbits
  61              		.align	1
  62              		.global	MemManage_Handler
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu softvfp
  68              	MemManage_Handler:
  69              	.LFB68:
  96:Src/stm32f1xx_it.c **** }
  97:Src/stm32f1xx_it.c **** 
  98:Src/stm32f1xx_it.c **** /**
  99:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 100:Src/stm32f1xx_it.c ****   */
 101:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 102:Src/stm32f1xx_it.c **** {
  70              		.loc 1 102 1 view -0
  71              		.cfi_startproc
  72              		@ Volatile: function does not return.
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccP4EJev.s 			page 4


  75              		@ link register save eliminated.
  76              	.L5:
 103:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 104:Src/stm32f1xx_it.c **** 
 105:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 106:Src/stm32f1xx_it.c ****   while (1)
  77              		.loc 1 106 3 discriminator 1 view .LVU6
 107:Src/stm32f1xx_it.c ****   {
 108:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 109:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 110:Src/stm32f1xx_it.c ****   }
  78              		.loc 1 110 3 discriminator 1 view .LVU7
  79 0000 FEE7     		b	.L5
  80              		.cfi_endproc
  81              	.LFE68:
  83              		.section	.text.BusFault_Handler,"ax",%progbits
  84              		.align	1
  85              		.global	BusFault_Handler
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu softvfp
  91              	BusFault_Handler:
  92              	.LFB69:
 111:Src/stm32f1xx_it.c **** }
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c **** /**
 114:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 115:Src/stm32f1xx_it.c ****   */
 116:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 117:Src/stm32f1xx_it.c **** {
  93              		.loc 1 117 1 view -0
  94              		.cfi_startproc
  95              		@ Volatile: function does not return.
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99              	.L7:
 118:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 119:Src/stm32f1xx_it.c **** 
 120:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 121:Src/stm32f1xx_it.c ****   while (1)
 100              		.loc 1 121 3 discriminator 1 view .LVU9
 122:Src/stm32f1xx_it.c ****   {
 123:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 124:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 125:Src/stm32f1xx_it.c ****   }
 101              		.loc 1 125 3 discriminator 1 view .LVU10
 102 0000 FEE7     		b	.L7
 103              		.cfi_endproc
 104              	.LFE69:
 106              		.section	.text.UsageFault_Handler,"ax",%progbits
 107              		.align	1
 108              		.global	UsageFault_Handler
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
ARM GAS  /tmp/ccP4EJev.s 			page 5


 112              		.fpu softvfp
 114              	UsageFault_Handler:
 115              	.LFB70:
 126:Src/stm32f1xx_it.c **** }
 127:Src/stm32f1xx_it.c **** 
 128:Src/stm32f1xx_it.c **** /**
 129:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 130:Src/stm32f1xx_it.c ****   */
 131:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 132:Src/stm32f1xx_it.c **** {
 116              		.loc 1 132 1 view -0
 117              		.cfi_startproc
 118              		@ Volatile: function does not return.
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122              	.L9:
 133:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 134:Src/stm32f1xx_it.c **** 
 135:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 136:Src/stm32f1xx_it.c ****   while (1)
 123              		.loc 1 136 3 discriminator 1 view .LVU12
 137:Src/stm32f1xx_it.c ****   {
 138:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 139:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 140:Src/stm32f1xx_it.c ****   }
 124              		.loc 1 140 3 discriminator 1 view .LVU13
 125 0000 FEE7     		b	.L9
 126              		.cfi_endproc
 127              	.LFE70:
 129              		.section	.text.SVC_Handler,"ax",%progbits
 130              		.align	1
 131              		.global	SVC_Handler
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	SVC_Handler:
 138              	.LFB71:
 141:Src/stm32f1xx_it.c **** }
 142:Src/stm32f1xx_it.c **** 
 143:Src/stm32f1xx_it.c **** /**
 144:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 145:Src/stm32f1xx_it.c ****   */
 146:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 147:Src/stm32f1xx_it.c **** {
 139              		.loc 1 147 1 view -0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 148:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 149:Src/stm32f1xx_it.c **** 
 150:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 151:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 152:Src/stm32f1xx_it.c **** 
 153:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
ARM GAS  /tmp/ccP4EJev.s 			page 6


 154:Src/stm32f1xx_it.c **** }
 144              		.loc 1 154 1 view .LVU15
 145 0000 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE71:
 149              		.section	.text.DebugMon_Handler,"ax",%progbits
 150              		.align	1
 151              		.global	DebugMon_Handler
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu softvfp
 157              	DebugMon_Handler:
 158              	.LFB72:
 155:Src/stm32f1xx_it.c **** 
 156:Src/stm32f1xx_it.c **** /**
 157:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 158:Src/stm32f1xx_it.c ****   */
 159:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 160:Src/stm32f1xx_it.c **** {
 159              		.loc 1 160 1 view -0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 164:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 167:Src/stm32f1xx_it.c **** }
 164              		.loc 1 167 1 view .LVU17
 165 0000 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE72:
 169              		.section	.text.PendSV_Handler,"ax",%progbits
 170              		.align	1
 171              		.global	PendSV_Handler
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 175              		.fpu softvfp
 177              	PendSV_Handler:
 178              	.LFB73:
 168:Src/stm32f1xx_it.c **** 
 169:Src/stm32f1xx_it.c **** /**
 170:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 171:Src/stm32f1xx_it.c ****   */
 172:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 173:Src/stm32f1xx_it.c **** {
 179              		.loc 1 173 1 view -0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 174:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
ARM GAS  /tmp/ccP4EJev.s 			page 7


 175:Src/stm32f1xx_it.c **** 
 176:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 177:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 178:Src/stm32f1xx_it.c **** 
 179:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 180:Src/stm32f1xx_it.c **** }
 184              		.loc 1 180 1 view .LVU19
 185 0000 7047     		bx	lr
 186              		.cfi_endproc
 187              	.LFE73:
 189              		.section	.text.SysTick_Handler,"ax",%progbits
 190              		.align	1
 191              		.global	SysTick_Handler
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu softvfp
 197              	SysTick_Handler:
 198              	.LFB74:
 181:Src/stm32f1xx_it.c **** 
 182:Src/stm32f1xx_it.c **** /**
 183:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 184:Src/stm32f1xx_it.c ****   */
 185:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 186:Src/stm32f1xx_it.c **** {
 199              		.loc 1 186 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI0:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 187:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 188:Src/stm32f1xx_it.c **** 
 189:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 190:Src/stm32f1xx_it.c ****   HAL_IncTick();
 208              		.loc 1 190 3 view .LVU21
 209 0002 FFF7FEFF 		bl	HAL_IncTick
 210              	.LVL0:
 191:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** 
 193:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 194:Src/stm32f1xx_it.c **** }
 211              		.loc 1 194 1 is_stmt 0 view .LVU22
 212 0006 08BD     		pop	{r3, pc}
 213              		.cfi_endproc
 214              	.LFE74:
 216              		.section	.text.TIM1_BRK_IRQHandler,"ax",%progbits
 217              		.align	1
 218              		.global	TIM1_BRK_IRQHandler
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu softvfp
 224              	TIM1_BRK_IRQHandler:
ARM GAS  /tmp/ccP4EJev.s 			page 8


 225              	.LFB75:
 195:Src/stm32f1xx_it.c **** 
 196:Src/stm32f1xx_it.c **** /******************************************************************************/
 197:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 198:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 199:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 200:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 201:Src/stm32f1xx_it.c **** /******************************************************************************/
 202:Src/stm32f1xx_it.c **** 
 203:Src/stm32f1xx_it.c **** /**
 204:Src/stm32f1xx_it.c ****   * @brief This function handles TIM1 break interrupt.
 205:Src/stm32f1xx_it.c ****   */
 206:Src/stm32f1xx_it.c **** void TIM1_BRK_IRQHandler(void)
 207:Src/stm32f1xx_it.c **** {
 226              		.loc 1 207 1 is_stmt 1 view -0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI1:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 208:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_IRQn 0 */
 209:Src/stm32f1xx_it.c **** 
 210:Src/stm32f1xx_it.c ****   /* USER CODE END TIM1_BRK_IRQn 0 */
 211:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 235              		.loc 1 211 3 view .LVU24
 236 0002 0248     		ldr	r0, .L17
 237 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 238              	.LVL1:
 212:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM1_BRK_IRQn 1 */
 213:Src/stm32f1xx_it.c **** 
 214:Src/stm32f1xx_it.c ****   /* USER CODE END TIM1_BRK_IRQn 1 */
 215:Src/stm32f1xx_it.c **** }
 239              		.loc 1 215 1 is_stmt 0 view .LVU25
 240 0008 08BD     		pop	{r3, pc}
 241              	.L18:
 242 000a 00BF     		.align	2
 243              	.L17:
 244 000c 00000000 		.word	htim1
 245              		.cfi_endproc
 246              	.LFE75:
 248              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 249              		.align	1
 250              		.global	TIM2_IRQHandler
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu softvfp
 256              	TIM2_IRQHandler:
 257              	.LFB76:
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c **** /**
 218:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 219:Src/stm32f1xx_it.c ****   */
 220:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
ARM GAS  /tmp/ccP4EJev.s 			page 9


 221:Src/stm32f1xx_it.c **** {
 258              		.loc 1 221 1 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI2:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
 222:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 223:Src/stm32f1xx_it.c **** 
 224:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 225:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 267              		.loc 1 225 3 view .LVU27
 268 0002 0248     		ldr	r0, .L21
 269 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 270              	.LVL2:
 226:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 227:Src/stm32f1xx_it.c **** 
 228:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 229:Src/stm32f1xx_it.c **** }
 271              		.loc 1 229 1 is_stmt 0 view .LVU28
 272 0008 08BD     		pop	{r3, pc}
 273              	.L22:
 274 000a 00BF     		.align	2
 275              	.L21:
 276 000c 00000000 		.word	htim2
 277              		.cfi_endproc
 278              	.LFE76:
 280              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 281              		.align	1
 282              		.global	TIM3_IRQHandler
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 286              		.fpu softvfp
 288              	TIM3_IRQHandler:
 289              	.LFB77:
 230:Src/stm32f1xx_it.c **** 
 231:Src/stm32f1xx_it.c **** /**
 232:Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 233:Src/stm32f1xx_it.c ****   */
 234:Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 235:Src/stm32f1xx_it.c **** {
 290              		.loc 1 235 1 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294 0000 08B5     		push	{r3, lr}
 295              	.LCFI3:
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 3, -8
 298              		.cfi_offset 14, -4
 236:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 237:Src/stm32f1xx_it.c **** 
 238:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
ARM GAS  /tmp/ccP4EJev.s 			page 10


 239:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 299              		.loc 1 239 3 view .LVU30
 300 0002 0248     		ldr	r0, .L25
 301 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 302              	.LVL3:
 240:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 241:Src/stm32f1xx_it.c **** 
 242:Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 243:Src/stm32f1xx_it.c **** }
 303              		.loc 1 243 1 is_stmt 0 view .LVU31
 304 0008 08BD     		pop	{r3, pc}
 305              	.L26:
 306 000a 00BF     		.align	2
 307              	.L25:
 308 000c 00000000 		.word	htim3
 309              		.cfi_endproc
 310              	.LFE77:
 312              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 313              		.align	1
 314              		.global	TIM4_IRQHandler
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 320              	TIM4_IRQHandler:
 321              	.LFB78:
 244:Src/stm32f1xx_it.c **** 
 245:Src/stm32f1xx_it.c **** /**
 246:Src/stm32f1xx_it.c ****   * @brief This function handles TIM4 global interrupt.
 247:Src/stm32f1xx_it.c ****   */
 248:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 249:Src/stm32f1xx_it.c **** {
 322              		.loc 1 249 1 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326 0000 08B5     		push	{r3, lr}
 327              	.LCFI4:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 3, -8
 330              		.cfi_offset 14, -4
 250:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 251:Src/stm32f1xx_it.c **** 
 252:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 253:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 331              		.loc 1 253 3 view .LVU33
 332 0002 0248     		ldr	r0, .L29
 333 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 334              	.LVL4:
 254:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 255:Src/stm32f1xx_it.c **** 
 256:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 257:Src/stm32f1xx_it.c **** }
 335              		.loc 1 257 1 is_stmt 0 view .LVU34
 336 0008 08BD     		pop	{r3, pc}
 337              	.L30:
 338 000a 00BF     		.align	2
ARM GAS  /tmp/ccP4EJev.s 			page 11


 339              	.L29:
 340 000c 00000000 		.word	htim4
 341              		.cfi_endproc
 342              	.LFE78:
 344              		.text
 345              	.Letext0:
 346              		.file 2 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/machine
 347              		.file 3 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_st
 348              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 349              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 350              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 351              		.file 7 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/loc
 352              		.file 8 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/_ty
 353              		.file 9 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/lib/gcc/arm-none-eabi/8.2.1/i
 354              		.file 10 "/home/onur/STM32Toolchain/gcc-arm-none-eabi-8-2018-q4-major/arm-none-eabi/include/sys/re
 355              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 356              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 357              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 358              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccP4EJev.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccP4EJev.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccP4EJev.s:38     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:45     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccP4EJev.s:61     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:68     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccP4EJev.s:84     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:91     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccP4EJev.s:107    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:114    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccP4EJev.s:130    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:137    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccP4EJev.s:150    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:157    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccP4EJev.s:170    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:177    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccP4EJev.s:190    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccP4EJev.s:197    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccP4EJev.s:217    .text.TIM1_BRK_IRQHandler:0000000000000000 $t
     /tmp/ccP4EJev.s:224    .text.TIM1_BRK_IRQHandler:0000000000000000 TIM1_BRK_IRQHandler
     /tmp/ccP4EJev.s:244    .text.TIM1_BRK_IRQHandler:000000000000000c $d
     /tmp/ccP4EJev.s:249    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccP4EJev.s:256    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccP4EJev.s:276    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/ccP4EJev.s:281    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccP4EJev.s:288    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccP4EJev.s:308    .text.TIM3_IRQHandler:000000000000000c $d
     /tmp/ccP4EJev.s:313    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/ccP4EJev.s:320    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/ccP4EJev.s:340    .text.TIM4_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim1
htim2
htim3
htim4
